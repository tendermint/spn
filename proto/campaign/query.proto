syntax = "proto3";
package tendermint.spn.campaign;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "campaign/campaign_chains.proto";
import "campaign/campaign.proto";
import "campaign/mainnet_vesting_account.proto";
import "campaign/mainnet_account.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/tendermint/spn/x/campaign/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a campaign by id.
  rpc Campaign(QueryGetCampaignRequest) returns (QueryGetCampaignResponse) {
    option (google.api.http).get =
        "/tendermint/spn/campaign/campaign/{campaignID}";
  }

  // Queries a list of campaign items.
  rpc CampaignAll(QueryAllCampaignRequest) returns (QueryAllCampaignResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/campaign";
  }

  // Queries a campaignChains by index.
  rpc CampaignChains(QueryGetCampaignChainsRequest) returns (QueryGetCampaignChainsResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/campaign_chains/{campaignID}";
  }

  // Queries a mainnetAccount by index.
  rpc MainnetAccount(QueryGetMainnetAccountRequest) returns (QueryGetMainnetAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_account/{campaignID}/{address}";
  }

  // Queries a list of mainnetAccount items.
  rpc MainnetAccountAll(QueryAllMainnetAccountRequest) returns (QueryAllMainnetAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_account";
  }

  // Queries a mainnetVestingAccount by index.
  rpc MainnetVestingAccount(QueryGetMainnetVestingAccountRequest) returns (QueryGetMainnetVestingAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_vesting_account/{campaignID}/{address}";
  }

  // Queries a list of mainnetVestingAccount items.
  rpc MainnetVestingAccountAll(QueryAllMainnetVestingAccountRequest) returns (QueryAllMainnetVestingAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_vesting_account";
  }

  // this line is used by starport scaffolding # 2
}

message QueryGetCampaignRequest {
  uint64 campaignID = 1;
}

message QueryGetCampaignResponse {
  Campaign campaign = 1 [(gogoproto.nullable) = false];
}

message QueryAllCampaignRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCampaignResponse {
  repeated Campaign campaign = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCampaignChainsRequest {
  uint64 campaignID = 1;
}

message QueryGetCampaignChainsResponse {
  CampaignChains campaignChains = 1 [(gogoproto.nullable) = false];
}

message QueryGetMainnetAccountRequest {
  uint64 campaignID = 1;
  string address = 2;
}

message QueryGetMainnetAccountResponse {
  MainnetAccount mainnetAccount = 1 [(gogoproto.nullable) = false];
}

message QueryAllMainnetAccountRequest {
  uint64 campaignID = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllMainnetAccountResponse {
  repeated MainnetAccount mainnetAccount = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetMainnetVestingAccountRequest {
  uint64 campaignID = 1;
  string address = 2;
}

message QueryGetMainnetVestingAccountResponse {
  MainnetVestingAccount mainnetVestingAccount = 1 [(gogoproto.nullable) = false];
}

message QueryAllMainnetVestingAccountRequest {
  uint64 campaignID = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllMainnetVestingAccountResponse {
  repeated MainnetVestingAccount mainnetVestingAccount = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
