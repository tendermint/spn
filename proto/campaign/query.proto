syntax = "proto3";
package tendermint.spn.campaign;

import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

import "campaign/campaign_chains.proto";
import "campaign/campaign.proto";
import "campaign/vesting.proto";
import "campaign/mainnet_account.proto";
import "campaign/params.proto";

option go_package = "github.com/tendermint/spn/x/campaign/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a campaign by id.
  rpc Campaign(QueryGetCampaignRequest) returns (QueryGetCampaignResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/campaign/{campaignID}";
  }

  // Queries a list of campaign items.
  rpc CampaignAll(QueryAllCampaignRequest) returns (QueryAllCampaignResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/campaign";
  }

  // Queries a campaignChains by index.
  rpc CampaignChains(QueryGetCampaignChainsRequest) returns (QueryGetCampaignChainsResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/campaign_chains/{campaignID}";
  }

  // Queries a list of SpecialAllocationsBalance items.
  rpc SpecialAllocationsBalance(QuerySpecialAllocationsBalanceRequest)
      returns (QuerySpecialAllocationsBalanceResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/special_allocations_balance/{campaignID}";
  }

  // Queries a mainnetAccount by index.
  rpc MainnetAccount(QueryGetMainnetAccountRequest) returns (QueryGetMainnetAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_account/{campaignID}/{address}";
  }

  // Queries a list of mainnetAccount items.
  rpc MainnetAccountAll(QueryAllMainnetAccountRequest) returns (QueryAllMainnetAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_account/{campaignID}";
  }

  // Queries a mainnetAccountBalance by index.
  rpc MainnetAccountBalance(QueryGetMainnetAccountBalanceRequest) returns (QueryGetMainnetAccountBalanceResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_account_balance/{campaignID}/{address}";
  }

  // Queries a list of mainnetAccountBalance items.
  rpc MainnetAccountBalanceAll(QueryAllMainnetAccountBalanceRequest) returns (QueryAllMainnetAccountBalanceResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/mainnet_account_balance/{campaignID}";
  }

  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/params";
  }

  // Queries the TotalShares value
  rpc TotalShares(QueryTotalSharesRequest) returns (QueryTotalSharesResponse) {
    option (google.api.http).get = "/tendermint/spn/campaign/total_shares";
  }
}

message QueryGetCampaignRequest {
  uint64 campaignID = 1;
}

message QueryGetCampaignResponse {
  Campaign campaign = 1 [(gogoproto.nullable) = false];
}

message QueryAllCampaignRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCampaignResponse {
  repeated Campaign                      campaign   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCampaignChainsRequest {
  uint64 campaignID = 1;
}

message QueryGetCampaignChainsResponse {
  CampaignChains campaignChains = 1 [(gogoproto.nullable) = false];
}

message QuerySpecialAllocationsBalanceRequest {
  uint64 campaignID = 1;
}

message QuerySpecialAllocationsBalanceResponse {
  repeated cosmos.base.v1beta1.Coin genesisDistribution = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.casttype)     = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin claimableAirdrop = 2 [
    (gogoproto.nullable)     = false,
    (gogoproto.casttype)     = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message QueryGetMainnetAccountRequest {
  uint64 campaignID = 1;
  string address    = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetMainnetAccountResponse {
  MainnetAccount mainnetAccount = 1 [(gogoproto.nullable) = false];
}

message QueryAllMainnetAccountRequest {
  uint64                                campaignID = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllMainnetAccountResponse {
  repeated MainnetAccount                mainnetAccount = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryGetMainnetAccountBalanceRequest {
  uint64 campaignID = 1;
  string address    = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetMainnetAccountBalanceResponse {
  MainnetAccountBalance mainnetAccountBalance = 1 [(gogoproto.nullable) = false];
}

message QueryAllMainnetAccountBalanceRequest {
  uint64                                campaignID = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllMainnetAccountBalanceResponse {
  repeated MainnetAccountBalance         mainnetAccountBalance = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryTotalSharesRequest {}

message QueryTotalSharesResponse {
  uint64 totalShares = 1;
}
