syntax = "proto3";
package tendermint.spn.campaign;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "campaign/mainnet_vesting_account.proto";

option go_package = "github.com/tendermint/spn/x/campaign/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateCampaign(MsgCreateCampaign) returns (MsgCreateCampaignResponse);
  rpc UpdateCampaignName(MsgUpdateCampaignName)
      returns (MsgUpdateCampaignNameResponse);
  rpc UpdateTotalSupply(MsgUpdateTotalSupply)
      returns (MsgUpdateTotalSupplyResponse);
  rpc UpdateTotalShares(MsgUpdateTotalShares)
      returns (MsgUpdateTotalSharesResponse);
  rpc InitializeMainnet(MsgInitializeMainnet)
      returns (MsgInitializeMainnetResponse);
  rpc AddShares(MsgAddShares) returns (MsgAddSharesResponse);
  rpc AddVestingOptions(MsgAddVestingOptions)
      returns (MsgAddVestingOptionsResponse);
  rpc MintVouchers(MsgMintVouchers) returns (MsgMintVouchersResponse);
  rpc BurnVouchers(MsgBurnVouchers) returns (MsgBurnVouchersResponse);
  rpc RedeemVouchers(MsgRedeemVouchers) returns (MsgRedeemVouchersResponse);
  rpc UnredeemVouchers(MsgUnredeemVouchers)
      returns (MsgUnredeemVouchersResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgCreateCampaign {
  string coordinator = 1;
  string campaignName = 2;
  repeated cosmos.base.v1beta1.Coin totalSupply = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  bool dynamicShares = 4;
}

message MsgCreateCampaignResponse { uint64 campaignID = 1; }

message MsgUpdateCampaignName {
  string coordinator = 1;
  uint64 campaignID = 2;
  string name = 3;
}

message MsgUpdateCampaignNameResponse {}

message MsgUpdateTotalSupply {
  string coordinator = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin totalSupplyUpdate = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgUpdateTotalSupplyResponse {}

message MsgUpdateTotalShares {
  string coordinator = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin totalShares = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "Shares"
  ];
}

message MsgUpdateTotalSharesResponse {}

message MsgInitializeMainnet {
  string coordinator = 1;
  uint64 campaignID = 2;
  string sourceURL = 3;
  string sourceHash = 4;
  string mainnetChainID = 5;
}

message MsgInitializeMainnetResponse { uint64 mainnetID = 1; }

message MsgAddShares {
  string coordinator = 1;
  uint64 campaignID = 2;
  string address = 3;
  repeated cosmos.base.v1beta1.Coin shares = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "Shares"
  ];
}

message MsgAddSharesResponse {}

message MsgAddVestingOptions {
  string coordinator = 1;
  uint64 campaignID = 2;
  string address = 3;
  repeated cosmos.base.v1beta1.Coin startingShares = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "Shares"
  ];
  ShareVestingOptions vestingOptions = 5 [ (gogoproto.nullable) = false ];
}

message MsgAddVestingOptionsResponse {}

message MsgMintVouchers {
  string coordinator = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin shares = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "Shares"
  ];
}

message MsgMintVouchersResponse {}

message MsgBurnVouchers {
  string sender = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin vouchers = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgBurnVouchersResponse {}

message MsgRedeemVouchers {
  string sender = 1;
  uint64 campaignID = 2;
  string account = 3;
  repeated cosmos.base.v1beta1.Coin vouchers = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgRedeemVouchersResponse {}

message MsgUnredeemVouchers {
  string sender = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin shares = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "Shares"
  ];
}

message MsgUnredeemVouchersResponse {}

// this line is used by starport scaffolding # proto/tx/message
