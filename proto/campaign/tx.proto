syntax = "proto3";
package tendermint.spn.campaign;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/tendermint/spn/x/campaign/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateCampaign(MsgCreateCampaign) returns (MsgCreateCampaignResponse);
  rpc UpdateTotalShares(MsgUpdateTotalShares) returns (MsgUpdateTotalSharesResponse);
  rpc UpdateTotalSupply(MsgUpdateTotalSupply) returns (MsgUpdateTotalSupplyResponse);
  rpc InitializeMainnet(MsgInitializeMainnet) returns (MsgInitializeMainnetResponse);
  rpc AddShares(MsgAddShares) returns (MsgAddSharesResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgUpdateTotalShares {
  string coordinator = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin totalShares = 3 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.castrepeated) = "Shares"];
}

message MsgUpdateTotalSharesResponse {
}

message MsgUpdateTotalSupply {
  string coordinator = 1;
  uint64 campaignID = 2;
  repeated cosmos.base.v1beta1.Coin totalSupply = 3 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgUpdateTotalSupplyResponse {
}

message MsgCreateCampaign {
  string coordinator = 1;
  string campaignName = 2;
  repeated cosmos.base.v1beta1.Coin TotalSupply = 3 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  bool dynamicShares = 4;
}

message MsgCreateCampaignResponse {
  uint64 campaignID = 1;
}

message MsgInitializeMainnet {
  string coordinator = 1;
  uint64 campaignID = 2;
  string sourceURL = 3;
  string sourceHash = 4;
  string mainnetChainID = 5;
}

message MsgInitializeMainnetResponse {
  uint64 mainnetID = 1;
}
message MsgAddShares {
  string coordinator = 1;
  uint64 campaignID = 2;
  string address = 3;
  repeated cosmos.base.v1beta1.Coin shares = 4 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.castrepeated) = "Shares"];
}

message MsgAddSharesResponse {
}

// this line is used by starport scaffolding # proto/tx/message
