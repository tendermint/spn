syntax = "proto3";

package tendermint.spn.claim;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";

import "claim/params.proto";
import "claim/claim_record.proto";
import "claim/mission.proto";
import "claim/initial_claim.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/tendermint/spn/x/claim/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/params";
  }

  // Queries a ClaimRecord by address.
  rpc ClaimRecord(QueryGetClaimRecordRequest) returns (QueryGetClaimRecordResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/claim_record/{address}";
  }

  // Queries a list of ClaimRecord items.
  rpc ClaimRecordAll(QueryAllClaimRecordRequest) returns (QueryAllClaimRecordResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/claim_record";
  }

  // Queries a Mission by ID.
  rpc Mission(QueryGetMissionRequest) returns (QueryGetMissionResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/mission/{missionID}";
  }

  // Queries a list of Mission items.
  rpc MissionAll(QueryAllMissionRequest) returns (QueryAllMissionResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/mission";
  }

  // Queries a AirdropSupply by index.
  rpc AirdropSupply(QueryGetAirdropSupplyRequest) returns (QueryGetAirdropSupplyResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/airdrop_supply";
  }
  // Queries a InitialClaim by index.
  rpc InitialClaim(QueryGetInitialClaimRequest) returns (QueryGetInitialClaimResponse) {
    option (google.api.http).get = "/tendermint/spn/claim/initial_claim";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetClaimRecordRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetClaimRecordResponse {
  ClaimRecord claimRecord = 1 [(gogoproto.nullable) = false];
}

message QueryAllClaimRecordRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllClaimRecordResponse {
  repeated ClaimRecord                   claimRecord = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryGetMissionRequest {
  uint64 missionID = 1;
}

message QueryGetMissionResponse {
  Mission Mission = 1 [(gogoproto.nullable) = false];
}

message QueryAllMissionRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMissionResponse {
  repeated Mission                       Mission    = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAirdropSupplyRequest {}

message QueryGetAirdropSupplyResponse {
  cosmos.base.v1beta1.Coin AirdropSupply = 1 [(gogoproto.nullable) = false];
}
message QueryGetInitialClaimRequest {}

message QueryGetInitialClaimResponse {
  InitialClaim InitialClaim = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
