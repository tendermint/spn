syntax = "proto3";
package tendermint.spn.participation;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";

import "participation/params.proto";
import "participation/used_allocations.proto";
import "participation/auction_used_allocations.proto";

option go_package = "github.com/tendermint/spn/x/participation/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a UsedAllocations by address.
  rpc UsedAllocations(QueryGetUsedAllocationsRequest) returns (QueryGetUsedAllocationsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/used_allocations/{address}";
  }

  // Queries a list of UsedAllocations items.
  rpc UsedAllocationsAll(QueryAllUsedAllocationsRequest) returns (QueryAllUsedAllocationsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/used_allocations";
  }

  // Queries a AuctionUsedAllocations by address and auctionID.
  rpc AuctionUsedAllocations(QueryGetAuctionUsedAllocationsRequest) returns (QueryGetAuctionUsedAllocationsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/auction_used_allocations/{address}/{auctionID}";
  }

  // Queries a list of AuctionUsedAllocations items.
  rpc AuctionUsedAllocationsAll(QueryAllAuctionUsedAllocationsRequest)
      returns (QueryAllAuctionUsedAllocationsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/auction_used_allocations/{address}";
  }

  // Queries a TotalAllocation of address.
  rpc TotalAllocations(QueryGetTotalAllocationsRequest) returns (QueryGetTotalAllocationsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/total_allocations/{address}";
  }

  // Queries the AvailableAllocation of address.
  rpc AvailableAllocations(QueryGetAvailableAllocationsRequest) returns (QueryGetAvailableAllocationsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/available_allocations/{address}";
  }

  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tendermint/spn/participation/params";
  }
}

message QueryGetUsedAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetUsedAllocationsResponse {
  UsedAllocations usedAllocations = 1 [(gogoproto.nullable) = false];
}

message QueryAllUsedAllocationsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUsedAllocationsResponse {
  repeated UsedAllocations               usedAllocations = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

message QueryGetAuctionUsedAllocationsRequest {
  string address   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 auctionID = 2;
}

message QueryGetAuctionUsedAllocationsResponse {
  AuctionUsedAllocations auctionUsedAllocations = 1 [(gogoproto.nullable) = false];
}

message QueryAllAuctionUsedAllocationsRequest {
  string                                address    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllAuctionUsedAllocationsResponse {
  repeated AuctionUsedAllocations        auctionUsedAllocations = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination             = 2;
}

message QueryGetTotalAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetTotalAllocationsResponse {
  string totalAllocations = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (cosmos_proto.scalar)  = "cosmos.Int"
  ];
}

message QueryGetAvailableAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetAvailableAllocationsResponse {
  string availableAllocations = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (cosmos_proto.scalar)  = "cosmos.Int"
  ];
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}
