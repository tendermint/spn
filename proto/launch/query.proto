syntax = "proto3";
package tendermint.spn.launch;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "launch/request.proto";
import "launch/chain.proto";

option go_package = "github.com/tendermint/spn/x/launch/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a request by index.
	rpc Request(QueryGetRequestRequest) returns (QueryGetRequestResponse) {
		option (google.api.http).get = "/tendermint/spn/launch/request/{chainID}/{requestID}";
	}

	// Queries a list of request items.
	rpc RequestAll(QueryAllRequestRequest) returns (QueryAllRequestResponse) {
		option (google.api.http).get = "/tendermint/spn/launch/request";
	}


	// Queries a chain by index.
	rpc Chain(QueryGetChainRequest) returns (QueryGetChainResponse) {
		option (google.api.http).get = "/tendermint/spn/launch/chain/{chainID}";
	}

	// Queries a list of chain items.
	rpc ChainAll(QueryAllChainRequest) returns (QueryAllChainResponse) {
		option (google.api.http).get = "/tendermint/spn/launch/chain";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetRequestRequest {
	  string chainID = 1;
  uint64 requestID = 2;

}

message QueryGetRequestResponse {
	Request request = 1;
}

message QueryAllRequestRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRequestResponse {
	repeated Request request = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetChainRequest {
	  string chainID = 1;

}

message QueryGetChainResponse {
	Chain chain = 1;
}

message QueryAllChainRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllChainResponse {
	repeated Chain chain = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
