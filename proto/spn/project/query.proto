syntax = "proto3";
package spn.project;

import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

import "spn/project/project_chains.proto";
import "spn/project/project.proto";
import "spn/project/vesting.proto";
import "spn/project/mainnet_account.proto";
import "spn/project/params.proto";

option go_package = "github.com/tendermint/spn/x/project/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a project by id.
  rpc Project(QueryGetProjectRequest) returns (QueryGetProjectResponse) {
    option (google.api.http).get = "/tendermint/spn/project/project/{projectID}";
  }

  // Queries a list of project items.
  rpc ProjectAll(QueryAllProjectRequest) returns (QueryAllProjectResponse) {
    option (google.api.http).get = "/tendermint/spn/project/project";
  }

  // Queries a projectChains by index.
  rpc ProjectChains(QueryGetProjectChainsRequest) returns (QueryGetProjectChainsResponse) {
    option (google.api.http).get = "/tendermint/spn/project/project_chains/{projectID}";
  }

  // Queries a list of SpecialAllocationsBalance items.
  rpc SpecialAllocationsBalance(QuerySpecialAllocationsBalanceRequest)
      returns (QuerySpecialAllocationsBalanceResponse) {
    option (google.api.http).get = "/tendermint/spn/project/special_allocations_balance/{projectID}";
  }

  // Queries a mainnetAccount by index.
  rpc MainnetAccount(QueryGetMainnetAccountRequest) returns (QueryGetMainnetAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/project/mainnet_account/{projectID}/{address}";
  }

  // Queries a list of mainnetAccount items.
  rpc MainnetAccountAll(QueryAllMainnetAccountRequest) returns (QueryAllMainnetAccountResponse) {
    option (google.api.http).get = "/tendermint/spn/project/mainnet_account/{projectID}";
  }

  // Queries a mainnetAccountBalance by index.
  rpc MainnetAccountBalance(QueryGetMainnetAccountBalanceRequest) returns (QueryGetMainnetAccountBalanceResponse) {
    option (google.api.http).get = "/tendermint/spn/project/mainnet_account_balance/{projectID}/{address}";
  }

  // Queries a list of mainnetAccountBalance items.
  rpc MainnetAccountBalanceAll(QueryAllMainnetAccountBalanceRequest) returns (QueryAllMainnetAccountBalanceResponse) {
    option (google.api.http).get = "/tendermint/spn/project/mainnet_account_balance/{projectID}";
  }

  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tendermint/spn/project/params";
  }

  // Queries the TotalShares value
  rpc TotalShares(QueryTotalSharesRequest) returns (QueryTotalSharesResponse) {
    option (google.api.http).get = "/tendermint/spn/project/total_shares";
  }
}

message QueryGetProjectRequest {
  uint64 projectID = 1;
}

message QueryGetProjectResponse {
  Project project = 1 [(gogoproto.nullable) = false];
}

message QueryAllProjectRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProjectResponse {
  repeated Project                       project    = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProjectChainsRequest {
  uint64 projectID = 1;
}

message QueryGetProjectChainsResponse {
  ProjectChains projectChains = 1 [(gogoproto.nullable) = false];
}

message QuerySpecialAllocationsBalanceRequest {
  uint64 projectID = 1;
}

message QuerySpecialAllocationsBalanceResponse {
  repeated cosmos.base.v1beta1.Coin genesisDistribution = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.casttype)     = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin claimableAirdrop = 2 [
    (gogoproto.nullable)     = false,
    (gogoproto.casttype)     = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message QueryGetMainnetAccountRequest {
  uint64 projectID = 1;
  string address   = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetMainnetAccountResponse {
  MainnetAccount mainnetAccount = 1 [(gogoproto.nullable) = false];
}

message QueryAllMainnetAccountRequest {
  uint64                                projectID  = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllMainnetAccountResponse {
  repeated MainnetAccount                mainnetAccount = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryGetMainnetAccountBalanceRequest {
  uint64 projectID = 1;
  string address   = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetMainnetAccountBalanceResponse {
  MainnetAccountBalance mainnetAccountBalance = 1 [(gogoproto.nullable) = false];
}

message QueryAllMainnetAccountBalanceRequest {
  uint64                                projectID  = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllMainnetAccountBalanceResponse {
  repeated MainnetAccountBalance         mainnetAccountBalance = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryTotalSharesRequest {}

message QueryTotalSharesResponse {
  uint64 totalShares = 1;
}
