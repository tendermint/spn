// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: participation/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	AllocationPrice       AllocationPrice `protobuf:"bytes,1,opt,name=allocationPrice,proto3" json:"allocationPrice"`
	ParticipationTierList []Tier          `protobuf:"bytes,2,rep,name=participationTierList,proto3" json:"participationTierList"`
	// defines the delay in seconds after the end of an auction when allocations can be withdrawn
	WithdrawalAllocationDelay uint64 `protobuf:"varint,3,opt,name=withdrawalAllocationDelay,proto3" json:"withdrawalAllocationDelay,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1941a0f9399e39d9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAllocationPrice() AllocationPrice {
	if m != nil {
		return m.AllocationPrice
	}
	return AllocationPrice{}
}

func (m *Params) GetParticipationTierList() []Tier {
	if m != nil {
		return m.ParticipationTierList
	}
	return nil
}

func (m *Params) GetWithdrawalAllocationDelay() uint64 {
	if m != nil {
		return m.WithdrawalAllocationDelay
	}
	return 0
}

type AllocationPrice struct {
	// number of delegated tokens necessary to get one allocation
	Staking github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=staking,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staking"`
}

func (m *AllocationPrice) Reset()         { *m = AllocationPrice{} }
func (m *AllocationPrice) String() string { return proto.CompactTextString(m) }
func (*AllocationPrice) ProtoMessage()    {}
func (*AllocationPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_1941a0f9399e39d9, []int{1}
}
func (m *AllocationPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationPrice.Merge(m, src)
}
func (m *AllocationPrice) XXX_Size() int {
	return m.Size()
}
func (m *AllocationPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationPrice.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationPrice proto.InternalMessageInfo

// Matches a number of required allocations with benefits
type Tier struct {
	TierID              uint64       `protobuf:"varint,1,opt,name=tierID,proto3" json:"tierID,omitempty"`
	RequiredAllocations uint64       `protobuf:"varint,2,opt,name=requiredAllocations,proto3" json:"requiredAllocations,omitempty"`
	Benefits            TierBenefits `protobuf:"bytes,3,opt,name=benefits,proto3" json:"benefits"`
}

func (m *Tier) Reset()         { *m = Tier{} }
func (m *Tier) String() string { return proto.CompactTextString(m) }
func (*Tier) ProtoMessage()    {}
func (*Tier) Descriptor() ([]byte, []int) {
	return fileDescriptor_1941a0f9399e39d9, []int{2}
}
func (m *Tier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tier.Merge(m, src)
}
func (m *Tier) XXX_Size() int {
	return m.Size()
}
func (m *Tier) XXX_DiscardUnknown() {
	xxx_messageInfo_Tier.DiscardUnknown(m)
}

var xxx_messageInfo_Tier proto.InternalMessageInfo

func (m *Tier) GetTierID() uint64 {
	if m != nil {
		return m.TierID
	}
	return 0
}

func (m *Tier) GetRequiredAllocations() uint64 {
	if m != nil {
		return m.RequiredAllocations
	}
	return 0
}

func (m *Tier) GetBenefits() TierBenefits {
	if m != nil {
		return m.Benefits
	}
	return TierBenefits{}
}

type TierBenefits struct {
	// maximum amount an auction participant can bid
	MaxBidAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=maxBidAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"maxBidAmount"`
}

func (m *TierBenefits) Reset()         { *m = TierBenefits{} }
func (m *TierBenefits) String() string { return proto.CompactTextString(m) }
func (*TierBenefits) ProtoMessage()    {}
func (*TierBenefits) Descriptor() ([]byte, []int) {
	return fileDescriptor_1941a0f9399e39d9, []int{3}
}
func (m *TierBenefits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TierBenefits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TierBenefits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TierBenefits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierBenefits.Merge(m, src)
}
func (m *TierBenefits) XXX_Size() int {
	return m.Size()
}
func (m *TierBenefits) XXX_DiscardUnknown() {
	xxx_messageInfo_TierBenefits.DiscardUnknown(m)
}

var xxx_messageInfo_TierBenefits proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "tendermint.spn.participation.Params")
	proto.RegisterType((*AllocationPrice)(nil), "tendermint.spn.participation.AllocationPrice")
	proto.RegisterType((*Tier)(nil), "tendermint.spn.participation.Tier")
	proto.RegisterType((*TierBenefits)(nil), "tendermint.spn.participation.TierBenefits")
}

func init() { proto.RegisterFile("participation/params.proto", fileDescriptor_1941a0f9399e39d9) }

var fileDescriptor_1941a0f9399e39d9 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0xaa, 0xd3, 0x40,
	0x18, 0xc5, 0x93, 0xde, 0x50, 0x75, 0x7a, 0xe1, 0xc2, 0xf8, 0x87, 0x78, 0x91, 0xb4, 0x64, 0x21,
	0x45, 0xb8, 0x33, 0x52, 0x77, 0xe2, 0xa6, 0xa1, 0x0b, 0x0b, 0x5d, 0x94, 0xe0, 0x4a, 0x51, 0x98,
	0x24, 0x63, 0x3a, 0x34, 0x99, 0x89, 0x33, 0x53, 0xda, 0x3e, 0x83, 0x1b, 0x97, 0xae, 0xc4, 0xc7,
	0xe9, 0xb2, 0x4b, 0x71, 0x51, 0xa4, 0x7d, 0x11, 0xc9, 0x18, 0x6d, 0x53, 0x6a, 0x11, 0x57, 0x49,
	0xf8, 0xce, 0xf9, 0xe5, 0x9c, 0x8f, 0x0f, 0x5c, 0x17, 0x44, 0x6a, 0x16, 0xb3, 0x82, 0x68, 0x26,
	0x38, 0x2e, 0x88, 0x24, 0xb9, 0x42, 0x85, 0x14, 0x5a, 0xc0, 0x47, 0x9a, 0xf2, 0x84, 0xca, 0x9c,
	0x71, 0x8d, 0x54, 0xc1, 0x51, 0x4d, 0x7a, 0x7d, 0x2f, 0x15, 0xa9, 0x30, 0x42, 0x5c, 0xbe, 0xfd,
	0xf2, 0xf8, 0x1f, 0x1b, 0xa0, 0x39, 0x36, 0x10, 0xf8, 0x16, 0x5c, 0x91, 0x2c, 0x13, 0xb1, 0x91,
	0x8f, 0x25, 0x8b, 0xa9, 0x6b, 0x77, 0xec, 0x6e, 0xab, 0x77, 0x83, 0xce, 0x81, 0x51, 0xbf, 0x6e,
	0x0a, 0x9c, 0xd5, 0xa6, 0x6d, 0x85, 0xc7, 0x2c, 0xf8, 0x0e, 0xdc, 0xaf, 0xf9, 0x5e, 0x31, 0x2a,
	0x47, 0x4c, 0x69, 0xb7, 0xd1, 0xb9, 0xe8, 0xb6, 0x7a, 0xfe, 0xf9, 0x9f, 0x94, 0xea, 0x8a, 0x7c,
	0x1a, 0x03, 0x5f, 0x80, 0x87, 0x73, 0xa6, 0x27, 0x89, 0x24, 0x73, 0x92, 0xed, 0x33, 0x0d, 0x68,
	0x46, 0x96, 0xee, 0x45, 0xc7, 0xee, 0x3a, 0xe1, 0xdf, 0x05, 0xcf, 0x9d, 0xcf, 0x5f, 0xdb, 0x96,
	0xff, 0x06, 0x5c, 0x1d, 0xb5, 0x81, 0x2f, 0xc1, 0x2d, 0xa5, 0xc9, 0x94, 0xf1, 0xd4, 0x6c, 0xe3,
	0x4e, 0x80, 0xca, 0x10, 0xdf, 0x37, 0xed, 0xc7, 0x29, 0xd3, 0x93, 0x59, 0x84, 0x62, 0x91, 0xe3,
	0x58, 0xa8, 0x5c, 0xa8, 0xea, 0x71, 0xa3, 0x92, 0x29, 0xd6, 0xcb, 0x82, 0x2a, 0x34, 0xe4, 0x3a,
	0xfc, 0x6d, 0xf7, 0xbf, 0xd8, 0xc0, 0x29, 0xd3, 0xc2, 0x07, 0xa0, 0xa9, 0x19, 0x95, 0xc3, 0x81,
	0x21, 0x3a, 0x61, 0xf5, 0x05, 0x9f, 0x82, 0xbb, 0x92, 0x7e, 0x98, 0x31, 0x49, 0x93, 0x7d, 0x0a,
	0xe5, 0x36, 0x8c, 0xe8, 0xd4, 0x08, 0x8e, 0xc0, 0xed, 0x88, 0x72, 0xfa, 0x9e, 0x69, 0x65, 0x2a,
	0xb6, 0x7a, 0x4f, 0xfe, 0x61, 0x8d, 0x95, 0xa3, 0x5a, 0xe7, 0x1f, 0x82, 0x1f, 0x81, 0xcb, 0xc3,
	0x39, 0x0c, 0xc1, 0x65, 0x4e, 0x16, 0x01, 0x4b, 0xfa, 0xb9, 0x98, 0x71, 0xfd, 0x9f, 0xfd, 0x6b,
	0x8c, 0x60, 0xb8, 0xda, 0x7a, 0xf6, 0x7a, 0xeb, 0xd9, 0x3f, 0xb6, 0x9e, 0xfd, 0x69, 0xe7, 0x59,
	0xeb, 0x9d, 0x67, 0x7d, 0xdb, 0x79, 0xd6, 0x6b, 0x7c, 0xc0, 0xdb, 0x77, 0xc0, 0xaa, 0xe0, 0x78,
	0x81, 0xeb, 0x57, 0x6f, 0xe0, 0x51, 0xd3, 0x5c, 0xf0, 0xb3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x8d, 0xa3, 0x24, 0xbf, 0x13, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalAllocationDelay != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WithdrawalAllocationDelay))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ParticipationTierList) > 0 {
		for iNdEx := len(m.ParticipationTierList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipationTierList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.AllocationPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AllocationPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Staking.Size()
		i -= size
		if _, err := m.Staking.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Tier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Benefits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RequiredAllocations != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RequiredAllocations))
		i--
		dAtA[i] = 0x10
	}
	if m.TierID != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TierID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TierBenefits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TierBenefits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TierBenefits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxBidAmount.Size()
		i -= size
		if _, err := m.MaxBidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AllocationPrice.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.ParticipationTierList) > 0 {
		for _, e := range m.ParticipationTierList {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.WithdrawalAllocationDelay != 0 {
		n += 1 + sovParams(uint64(m.WithdrawalAllocationDelay))
	}
	return n
}

func (m *AllocationPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Staking.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Tier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TierID != 0 {
		n += 1 + sovParams(uint64(m.TierID))
	}
	if m.RequiredAllocations != 0 {
		n += 1 + sovParams(uint64(m.RequiredAllocations))
	}
	l = m.Benefits.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *TierBenefits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxBidAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllocationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationTierList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationTierList = append(m.ParticipationTierList, Tier{})
			if err := m.ParticipationTierList[len(m.ParticipationTierList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAllocationDelay", wireType)
			}
			m.WithdrawalAllocationDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalAllocationDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocationPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierID", wireType)
			}
			m.TierID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TierID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAllocations", wireType)
			}
			m.RequiredAllocations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredAllocations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benefits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Benefits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TierBenefits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TierBenefits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TierBenefits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
