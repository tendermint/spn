// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: participation/used_allocations.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Describes the number of allocations already used by a user for existing auctions
type UsedAllocations struct {
	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	NumAllocations uint64 `protobuf:"varint,2,opt,name=numAllocations,proto3" json:"numAllocations,omitempty"`
}

func (m *UsedAllocations) Reset()         { *m = UsedAllocations{} }
func (m *UsedAllocations) String() string { return proto.CompactTextString(m) }
func (*UsedAllocations) ProtoMessage()    {}
func (*UsedAllocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_3210f1039a9f28f1, []int{0}
}
func (m *UsedAllocations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsedAllocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsedAllocations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsedAllocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsedAllocations.Merge(m, src)
}
func (m *UsedAllocations) XXX_Size() int {
	return m.Size()
}
func (m *UsedAllocations) XXX_DiscardUnknown() {
	xxx_messageInfo_UsedAllocations.DiscardUnknown(m)
}

var xxx_messageInfo_UsedAllocations proto.InternalMessageInfo

func (m *UsedAllocations) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UsedAllocations) GetNumAllocations() uint64 {
	if m != nil {
		return m.NumAllocations
	}
	return 0
}

func init() {
	proto.RegisterType((*UsedAllocations)(nil), "tendermint.spn.participation.UsedAllocations")
}

func init() {
	proto.RegisterFile("participation/used_allocations.proto", fileDescriptor_3210f1039a9f28f1)
}

var fileDescriptor_3210f1039a9f28f1 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x48, 0x2c, 0x2a,
	0xc9, 0x4c, 0xce, 0x2c, 0x48, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x2d, 0x4e, 0x4d, 0x89, 0x4f,
	0xcc, 0xc9, 0xc9, 0x4f, 0x06, 0xf3, 0x8b, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x64, 0x4a,
	0x52, 0xf3, 0x52, 0x52, 0x8b, 0x72, 0x33, 0xf3, 0x4a, 0xf4, 0x8a, 0x0b, 0xf2, 0xf4, 0x50, 0x34,
	0x29, 0x05, 0x73, 0xf1, 0x87, 0x16, 0xa7, 0xa6, 0x38, 0x22, 0xb4, 0x09, 0x49, 0x70, 0xb1, 0x27,
	0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42,
	0x6a, 0x5c, 0x7c, 0x79, 0xa5, 0xb9, 0x48, 0x6a, 0x25, 0x98, 0x14, 0x18, 0x35, 0x58, 0x82, 0xd0,
	0x44, 0x9d, 0x3c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6,
	0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x3f, 0x3d,
	0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xe1, 0x2e, 0xfd, 0xe2, 0x82, 0x3c,
	0xfd, 0x0a, 0x7d, 0x54, 0xef, 0x94, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x3d, 0x61, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x11, 0x85, 0xfd, 0x82, 0xec, 0x00, 0x00, 0x00,
}

func (m *UsedAllocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsedAllocations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsedAllocations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumAllocations != 0 {
		i = encodeVarintUsedAllocations(dAtA, i, uint64(m.NumAllocations))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintUsedAllocations(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsedAllocations(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsedAllocations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UsedAllocations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovUsedAllocations(uint64(l))
	}
	if m.NumAllocations != 0 {
		n += 1 + sovUsedAllocations(uint64(m.NumAllocations))
	}
	return n
}

func sovUsedAllocations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsedAllocations(x uint64) (n int) {
	return sovUsedAllocations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UsedAllocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsedAllocations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsedAllocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsedAllocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsedAllocations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsedAllocations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsedAllocations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocations", wireType)
			}
			m.NumAllocations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsedAllocations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsedAllocations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsedAllocations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsedAllocations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsedAllocations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsedAllocations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsedAllocations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsedAllocations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsedAllocations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsedAllocations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsedAllocations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsedAllocations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsedAllocations = fmt.Errorf("proto: unexpected end of group")
)
