// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: participation/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetUsedAllocationsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetUsedAllocationsRequest) Reset()         { *m = QueryGetUsedAllocationsRequest{} }
func (m *QueryGetUsedAllocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUsedAllocationsRequest) ProtoMessage()    {}
func (*QueryGetUsedAllocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{2}
}
func (m *QueryGetUsedAllocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUsedAllocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUsedAllocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUsedAllocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUsedAllocationsRequest.Merge(m, src)
}
func (m *QueryGetUsedAllocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUsedAllocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUsedAllocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUsedAllocationsRequest proto.InternalMessageInfo

func (m *QueryGetUsedAllocationsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetUsedAllocationsResponse struct {
	UsedAllocations UsedAllocations `protobuf:"bytes,1,opt,name=usedAllocations,proto3" json:"usedAllocations"`
}

func (m *QueryGetUsedAllocationsResponse) Reset()         { *m = QueryGetUsedAllocationsResponse{} }
func (m *QueryGetUsedAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUsedAllocationsResponse) ProtoMessage()    {}
func (*QueryGetUsedAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{3}
}
func (m *QueryGetUsedAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUsedAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUsedAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUsedAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUsedAllocationsResponse.Merge(m, src)
}
func (m *QueryGetUsedAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUsedAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUsedAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUsedAllocationsResponse proto.InternalMessageInfo

func (m *QueryGetUsedAllocationsResponse) GetUsedAllocations() UsedAllocations {
	if m != nil {
		return m.UsedAllocations
	}
	return UsedAllocations{}
}

type QueryAllUsedAllocationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUsedAllocationsRequest) Reset()         { *m = QueryAllUsedAllocationsRequest{} }
func (m *QueryAllUsedAllocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUsedAllocationsRequest) ProtoMessage()    {}
func (*QueryAllUsedAllocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{4}
}
func (m *QueryAllUsedAllocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUsedAllocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUsedAllocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUsedAllocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUsedAllocationsRequest.Merge(m, src)
}
func (m *QueryAllUsedAllocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUsedAllocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUsedAllocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUsedAllocationsRequest proto.InternalMessageInfo

func (m *QueryAllUsedAllocationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUsedAllocationsResponse struct {
	UsedAllocations []UsedAllocations   `protobuf:"bytes,1,rep,name=usedAllocations,proto3" json:"usedAllocations"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUsedAllocationsResponse) Reset()         { *m = QueryAllUsedAllocationsResponse{} }
func (m *QueryAllUsedAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUsedAllocationsResponse) ProtoMessage()    {}
func (*QueryAllUsedAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{5}
}
func (m *QueryAllUsedAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUsedAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUsedAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUsedAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUsedAllocationsResponse.Merge(m, src)
}
func (m *QueryAllUsedAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUsedAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUsedAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUsedAllocationsResponse proto.InternalMessageInfo

func (m *QueryAllUsedAllocationsResponse) GetUsedAllocations() []UsedAllocations {
	if m != nil {
		return m.UsedAllocations
	}
	return nil
}

func (m *QueryAllUsedAllocationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAuctionUsedAllocationsRequest struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AuctionID uint64 `protobuf:"varint,2,opt,name=auctionID,proto3" json:"auctionID,omitempty"`
}

func (m *QueryGetAuctionUsedAllocationsRequest) Reset()         { *m = QueryGetAuctionUsedAllocationsRequest{} }
func (m *QueryGetAuctionUsedAllocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionUsedAllocationsRequest) ProtoMessage()    {}
func (*QueryGetAuctionUsedAllocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{6}
}
func (m *QueryGetAuctionUsedAllocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionUsedAllocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionUsedAllocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionUsedAllocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionUsedAllocationsRequest.Merge(m, src)
}
func (m *QueryGetAuctionUsedAllocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionUsedAllocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionUsedAllocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionUsedAllocationsRequest proto.InternalMessageInfo

func (m *QueryGetAuctionUsedAllocationsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetAuctionUsedAllocationsRequest) GetAuctionID() uint64 {
	if m != nil {
		return m.AuctionID
	}
	return 0
}

type QueryGetAuctionUsedAllocationsResponse struct {
	AuctionUsedAllocations AuctionUsedAllocations `protobuf:"bytes,1,opt,name=auctionUsedAllocations,proto3" json:"auctionUsedAllocations"`
}

func (m *QueryGetAuctionUsedAllocationsResponse) Reset() {
	*m = QueryGetAuctionUsedAllocationsResponse{}
}
func (m *QueryGetAuctionUsedAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionUsedAllocationsResponse) ProtoMessage()    {}
func (*QueryGetAuctionUsedAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{7}
}
func (m *QueryGetAuctionUsedAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionUsedAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionUsedAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionUsedAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionUsedAllocationsResponse.Merge(m, src)
}
func (m *QueryGetAuctionUsedAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionUsedAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionUsedAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionUsedAllocationsResponse proto.InternalMessageInfo

func (m *QueryGetAuctionUsedAllocationsResponse) GetAuctionUsedAllocations() AuctionUsedAllocations {
	if m != nil {
		return m.AuctionUsedAllocations
	}
	return AuctionUsedAllocations{}
}

type QueryAllAuctionUsedAllocationsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuctionUsedAllocationsRequest) Reset()         { *m = QueryAllAuctionUsedAllocationsRequest{} }
func (m *QueryAllAuctionUsedAllocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionUsedAllocationsRequest) ProtoMessage()    {}
func (*QueryAllAuctionUsedAllocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{8}
}
func (m *QueryAllAuctionUsedAllocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionUsedAllocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionUsedAllocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionUsedAllocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionUsedAllocationsRequest.Merge(m, src)
}
func (m *QueryAllAuctionUsedAllocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionUsedAllocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionUsedAllocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionUsedAllocationsRequest proto.InternalMessageInfo

func (m *QueryAllAuctionUsedAllocationsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAllAuctionUsedAllocationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAuctionUsedAllocationsResponse struct {
	AuctionUsedAllocations []AuctionUsedAllocations `protobuf:"bytes,1,rep,name=auctionUsedAllocations,proto3" json:"auctionUsedAllocations"`
	Pagination             *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuctionUsedAllocationsResponse) Reset() {
	*m = QueryAllAuctionUsedAllocationsResponse{}
}
func (m *QueryAllAuctionUsedAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionUsedAllocationsResponse) ProtoMessage()    {}
func (*QueryAllAuctionUsedAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{9}
}
func (m *QueryAllAuctionUsedAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionUsedAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionUsedAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionUsedAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionUsedAllocationsResponse.Merge(m, src)
}
func (m *QueryAllAuctionUsedAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionUsedAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionUsedAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionUsedAllocationsResponse proto.InternalMessageInfo

func (m *QueryAllAuctionUsedAllocationsResponse) GetAuctionUsedAllocations() []AuctionUsedAllocations {
	if m != nil {
		return m.AuctionUsedAllocations
	}
	return nil
}

func (m *QueryAllAuctionUsedAllocationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTotalAllocationRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetTotalAllocationRequest) Reset()         { *m = QueryGetTotalAllocationRequest{} }
func (m *QueryGetTotalAllocationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalAllocationRequest) ProtoMessage()    {}
func (*QueryGetTotalAllocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{10}
}
func (m *QueryGetTotalAllocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalAllocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalAllocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalAllocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalAllocationRequest.Merge(m, src)
}
func (m *QueryGetTotalAllocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalAllocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalAllocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalAllocationRequest proto.InternalMessageInfo

func (m *QueryGetTotalAllocationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTotalAllocationResponse struct {
	TotalAllocation uint64 `protobuf:"varint,1,opt,name=totalAllocation,proto3" json:"totalAllocation,omitempty"`
}

func (m *QueryGetTotalAllocationResponse) Reset()         { *m = QueryGetTotalAllocationResponse{} }
func (m *QueryGetTotalAllocationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalAllocationResponse) ProtoMessage()    {}
func (*QueryGetTotalAllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b6d9d472596bad2, []int{11}
}
func (m *QueryGetTotalAllocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalAllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalAllocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalAllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalAllocationResponse.Merge(m, src)
}
func (m *QueryGetTotalAllocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalAllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalAllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalAllocationResponse proto.InternalMessageInfo

func (m *QueryGetTotalAllocationResponse) GetTotalAllocation() uint64 {
	if m != nil {
		return m.TotalAllocation
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "tendermint.spn.participation.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "tendermint.spn.participation.QueryParamsResponse")
	proto.RegisterType((*QueryGetUsedAllocationsRequest)(nil), "tendermint.spn.participation.QueryGetUsedAllocationsRequest")
	proto.RegisterType((*QueryGetUsedAllocationsResponse)(nil), "tendermint.spn.participation.QueryGetUsedAllocationsResponse")
	proto.RegisterType((*QueryAllUsedAllocationsRequest)(nil), "tendermint.spn.participation.QueryAllUsedAllocationsRequest")
	proto.RegisterType((*QueryAllUsedAllocationsResponse)(nil), "tendermint.spn.participation.QueryAllUsedAllocationsResponse")
	proto.RegisterType((*QueryGetAuctionUsedAllocationsRequest)(nil), "tendermint.spn.participation.QueryGetAuctionUsedAllocationsRequest")
	proto.RegisterType((*QueryGetAuctionUsedAllocationsResponse)(nil), "tendermint.spn.participation.QueryGetAuctionUsedAllocationsResponse")
	proto.RegisterType((*QueryAllAuctionUsedAllocationsRequest)(nil), "tendermint.spn.participation.QueryAllAuctionUsedAllocationsRequest")
	proto.RegisterType((*QueryAllAuctionUsedAllocationsResponse)(nil), "tendermint.spn.participation.QueryAllAuctionUsedAllocationsResponse")
	proto.RegisterType((*QueryGetTotalAllocationRequest)(nil), "tendermint.spn.participation.QueryGetTotalAllocationRequest")
	proto.RegisterType((*QueryGetTotalAllocationResponse)(nil), "tendermint.spn.participation.QueryGetTotalAllocationResponse")
}

func init() { proto.RegisterFile("participation/query.proto", fileDescriptor_3b6d9d472596bad2) }

var fileDescriptor_3b6d9d472596bad2 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x4b, 0xdc, 0x4c,
	0x18, 0xde, 0x51, 0x3f, 0x3f, 0x9c, 0x1e, 0x84, 0xa9, 0x88, 0x06, 0x89, 0x25, 0x58, 0x2b, 0xc5,
	0x66, 0xd4, 0x96, 0x52, 0xa4, 0x05, 0x77, 0x15, 0xad, 0xb4, 0x14, 0x1b, 0xec, 0xa1, 0x85, 0x22,
	0xb3, 0xbb, 0x43, 0x0c, 0x64, 0x33, 0x31, 0x33, 0x29, 0x15, 0x11, 0x4a, 0x0f, 0x85, 0xde, 0x0a,
	0x3d, 0xb6, 0x7f, 0x90, 0xde, 0x84, 0x5e, 0x7a, 0x2a, 0x45, 0xdb, 0x7b, 0xaf, 0xbd, 0x95, 0x9d,
	0xcc, 0x36, 0x26, 0x26, 0xd9, 0xe8, 0xda, 0x93, 0x6e, 0xe6, 0xfd, 0xf1, 0x3c, 0xcf, 0xfb, 0xce,
	0x93, 0xc0, 0x71, 0x9f, 0x04, 0xc2, 0x69, 0x38, 0x3e, 0x11, 0x0e, 0xf3, 0xf0, 0x4e, 0x48, 0x83,
	0x5d, 0xd3, 0x0f, 0x98, 0x60, 0x68, 0x42, 0x50, 0xaf, 0x49, 0x83, 0x96, 0xe3, 0x09, 0x93, 0xfb,
	0x9e, 0x99, 0x88, 0xd4, 0x46, 0x6c, 0x66, 0x33, 0x19, 0x88, 0xdb, 0xff, 0x45, 0x39, 0xda, 0x84,
	0xcd, 0x98, 0xed, 0x52, 0x4c, 0x7c, 0x07, 0x13, 0xcf, 0x63, 0x42, 0x06, 0x73, 0x75, 0x7a, 0xb3,
	0xc1, 0x78, 0x8b, 0x71, 0x5c, 0x27, 0x9c, 0x46, 0xad, 0xf0, 0xab, 0xf9, 0x3a, 0x15, 0x64, 0x1e,
	0xfb, 0xc4, 0x76, 0x3c, 0x19, 0xac, 0x62, 0xb5, 0x24, 0x30, 0x9f, 0x04, 0xa4, 0xd5, 0xa9, 0x33,
	0x95, 0x3c, 0x0b, 0x39, 0x6d, 0x6e, 0x11, 0xd7, 0x65, 0x8d, 0x44, 0xb7, 0xd9, 0x64, 0x14, 0x09,
	0x1b, 0xed, 0xbf, 0x5b, 0xd9, 0xd1, 0xc6, 0x08, 0x44, 0x4f, 0xdb, 0x88, 0x36, 0x64, 0x23, 0x8b,
	0xee, 0x84, 0x94, 0x0b, 0xe3, 0x39, 0xbc, 0x9a, 0x78, 0xca, 0x7d, 0xe6, 0x71, 0x8a, 0x6a, 0x70,
	0x30, 0x02, 0x34, 0x06, 0xae, 0x81, 0x99, 0x2b, 0x0b, 0x53, 0x66, 0x91, 0x56, 0x66, 0x94, 0x5d,
	0x1b, 0x38, 0xf8, 0x36, 0x59, 0xb1, 0x54, 0xa6, 0xb1, 0x08, 0x75, 0x59, 0x7a, 0x8d, 0x8a, 0x67,
	0x9c, 0x36, 0xab, 0x31, 0x22, 0xd5, 0x1c, 0x8d, 0xc1, 0xff, 0x49, 0xb3, 0x19, 0x50, 0x1e, 0xb5,
	0x19, 0xb2, 0x3a, 0x3f, 0x8d, 0x37, 0x00, 0x4e, 0xe6, 0x26, 0x2b, 0x8c, 0x2f, 0xe1, 0x70, 0x98,
	0x3c, 0x52, 0x60, 0x6f, 0x15, 0x83, 0x4d, 0xd5, 0x53, 0xa8, 0xd3, 0xb5, 0x8c, 0x6d, 0x05, 0xbf,
	0xea, 0xba, 0x39, 0xf0, 0x57, 0x21, 0x8c, 0xa7, 0xaa, 0x7a, 0x4f, 0x9b, 0xd1, 0x0a, 0x98, 0xed,
	0x15, 0x30, 0xa3, 0x6d, 0x53, 0x2b, 0x60, 0x6e, 0x10, 0x9b, 0xaa, 0x5c, 0xeb, 0x54, 0xa6, 0x71,
	0xd8, 0x21, 0x9b, 0xd5, 0xaa, 0x88, 0x6c, 0xff, 0x65, 0x91, 0x45, 0x6b, 0x09, 0x2a, 0x7d, 0x92,
	0xca, 0x8d, 0xae, 0x54, 0x22, 0x6c, 0x09, 0x2e, 0x5b, 0xf0, 0x7a, 0x67, 0x6e, 0xd5, 0x68, 0x1f,
	0xcf, 0x3b, 0x7b, 0x34, 0x01, 0x87, 0xd4, 0x2a, 0xaf, 0xaf, 0x48, 0x28, 0x03, 0x56, 0xfc, 0xc0,
	0xf8, 0x0c, 0xe0, 0x74, 0xb7, 0x0e, 0x4a, 0xb3, 0x00, 0x8e, 0x92, 0xcc, 0x08, 0x35, 0xab, 0x3b,
	0xc5, 0xd2, 0x65, 0x57, 0x57, 0x0a, 0xe6, 0x54, 0x36, 0xde, 0x03, 0x25, 0x40, 0xd5, 0x75, 0x2f,
	0x2a, 0xc0, 0x6a, 0xc6, 0x30, 0x2e, 0xb2, 0x57, 0x3f, 0x3b, 0x52, 0x15, 0x60, 0x29, 0x21, 0x55,
	0xff, 0xbf, 0x91, 0xea, 0xf2, 0x76, 0xee, 0x94, 0xd1, 0x6c, 0x32, 0x41, 0xdc, 0xb8, 0x49, 0x77,
	0xa3, 0x79, 0x14, 0xfb, 0xcc, 0x99, 0x5c, 0xa5, 0xcd, 0x0c, 0x1c, 0x16, 0xc9, 0x23, 0x59, 0x64,
	0xc0, 0x4a, 0x3f, 0x5e, 0x78, 0x07, 0xe1, 0x7f, 0xb2, 0x1a, 0xfa, 0x04, 0xe0, 0x60, 0x64, 0x8a,
	0x68, 0xae, 0x58, 0xba, 0xb3, 0x9e, 0xac, 0xcd, 0x9f, 0x23, 0x23, 0xc2, 0x68, 0xcc, 0xbe, 0xfd,
	0xf2, 0xe3, 0x63, 0xdf, 0x34, 0x9a, 0xc2, 0x71, 0x2a, 0xe6, 0xbe, 0x7c, 0xad, 0x9c, 0x79, 0xc9,
	0xa0, 0x23, 0x00, 0x87, 0xd3, 0xd3, 0xb8, 0x5f, 0xa2, 0x69, 0xae, 0x93, 0x6b, 0x0f, 0x2e, 0x98,
	0xad, 0xe0, 0x2f, 0x49, 0xf8, 0x8b, 0xe8, 0x5e, 0x31, 0xfc, 0xf4, 0x9b, 0x0d, 0xef, 0xa9, 0x31,
	0xee, 0xa3, 0x43, 0x00, 0x51, 0xaa, 0x7a, 0xd5, 0x75, 0x4b, 0xb1, 0xca, 0x35, 0xf8, 0x52, 0xac,
	0xf2, 0x3d, 0xdb, 0xb8, 0x2b, 0x59, 0xcd, 0x21, 0xf3, 0x7c, 0xac, 0xd0, 0x6f, 0x00, 0x47, 0xb3,
	0x6f, 0x14, 0x5a, 0x2e, 0xa7, 0x73, 0xa1, 0xf3, 0x68, 0x2b, 0xbd, 0x15, 0x51, 0xec, 0x36, 0x25,
	0xbb, 0x27, 0xe8, 0x71, 0x31, 0xbb, 0xbc, 0xaf, 0x92, 0x78, 0x76, 0x78, 0xef, 0xaf, 0xbb, 0xef,
	0xa3, 0x5f, 0x00, 0x8e, 0x67, 0x37, 0x6e, 0x8f, 0x73, 0xb9, 0xdc, 0x40, 0x7a, 0xa7, 0xdf, 0xd5,
	0x31, 0x8d, 0x87, 0x92, 0x7e, 0x0d, 0x2d, 0xf5, 0x4a, 0x5f, 0xde, 0xc6, 0x94, 0xf7, 0x94, 0xbd,
	0x8d, 0xd9, 0x76, 0x57, 0xf6, 0x36, 0xe6, 0x18, 0x5e, 0xd9, 0xdb, 0x28, 0xdd, 0xef, 0x14, 0xa7,
	0x98, 0x52, 0x6d, 0xfd, 0xe0, 0x58, 0x07, 0x47, 0xc7, 0x3a, 0xf8, 0x7e, 0xac, 0x83, 0x0f, 0x27,
	0x7a, 0xe5, 0xe8, 0x44, 0xaf, 0x7c, 0x3d, 0xd1, 0x2b, 0x2f, 0xb0, 0xed, 0x88, 0xed, 0xb0, 0x6e,
	0x36, 0x58, 0x2b, 0x5d, 0xfd, 0x75, 0xba, 0xfe, 0xae, 0x4f, 0x79, 0x7d, 0x50, 0x7e, 0xbd, 0xde,
	0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x59, 0xc0, 0x0e, 0x3a, 0xc8, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a UsedAllocations by address.
	UsedAllocations(ctx context.Context, in *QueryGetUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryGetUsedAllocationsResponse, error)
	// Queries a list of UsedAllocations items.
	UsedAllocationsAll(ctx context.Context, in *QueryAllUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryAllUsedAllocationsResponse, error)
	// Queries a AuctionUsedAllocations by address and auctionID.
	AuctionUsedAllocations(ctx context.Context, in *QueryGetAuctionUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryGetAuctionUsedAllocationsResponse, error)
	// Queries a list of AuctionUsedAllocations items.
	AuctionUsedAllocationsAll(ctx context.Context, in *QueryAllAuctionUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryAllAuctionUsedAllocationsResponse, error)
	// Queries a TotalAllocation of address.
	TotalAllocation(ctx context.Context, in *QueryGetTotalAllocationRequest, opts ...grpc.CallOption) (*QueryGetTotalAllocationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.participation.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UsedAllocations(ctx context.Context, in *QueryGetUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryGetUsedAllocationsResponse, error) {
	out := new(QueryGetUsedAllocationsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.participation.Query/UsedAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UsedAllocationsAll(ctx context.Context, in *QueryAllUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryAllUsedAllocationsResponse, error) {
	out := new(QueryAllUsedAllocationsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.participation.Query/UsedAllocationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionUsedAllocations(ctx context.Context, in *QueryGetAuctionUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryGetAuctionUsedAllocationsResponse, error) {
	out := new(QueryGetAuctionUsedAllocationsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.participation.Query/AuctionUsedAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionUsedAllocationsAll(ctx context.Context, in *QueryAllAuctionUsedAllocationsRequest, opts ...grpc.CallOption) (*QueryAllAuctionUsedAllocationsResponse, error) {
	out := new(QueryAllAuctionUsedAllocationsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.participation.Query/AuctionUsedAllocationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalAllocation(ctx context.Context, in *QueryGetTotalAllocationRequest, opts ...grpc.CallOption) (*QueryGetTotalAllocationResponse, error) {
	out := new(QueryGetTotalAllocationResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.participation.Query/TotalAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a UsedAllocations by address.
	UsedAllocations(context.Context, *QueryGetUsedAllocationsRequest) (*QueryGetUsedAllocationsResponse, error)
	// Queries a list of UsedAllocations items.
	UsedAllocationsAll(context.Context, *QueryAllUsedAllocationsRequest) (*QueryAllUsedAllocationsResponse, error)
	// Queries a AuctionUsedAllocations by address and auctionID.
	AuctionUsedAllocations(context.Context, *QueryGetAuctionUsedAllocationsRequest) (*QueryGetAuctionUsedAllocationsResponse, error)
	// Queries a list of AuctionUsedAllocations items.
	AuctionUsedAllocationsAll(context.Context, *QueryAllAuctionUsedAllocationsRequest) (*QueryAllAuctionUsedAllocationsResponse, error)
	// Queries a TotalAllocation of address.
	TotalAllocation(context.Context, *QueryGetTotalAllocationRequest) (*QueryGetTotalAllocationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UsedAllocations(ctx context.Context, req *QueryGetUsedAllocationsRequest) (*QueryGetUsedAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsedAllocations not implemented")
}
func (*UnimplementedQueryServer) UsedAllocationsAll(ctx context.Context, req *QueryAllUsedAllocationsRequest) (*QueryAllUsedAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsedAllocationsAll not implemented")
}
func (*UnimplementedQueryServer) AuctionUsedAllocations(ctx context.Context, req *QueryGetAuctionUsedAllocationsRequest) (*QueryGetAuctionUsedAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionUsedAllocations not implemented")
}
func (*UnimplementedQueryServer) AuctionUsedAllocationsAll(ctx context.Context, req *QueryAllAuctionUsedAllocationsRequest) (*QueryAllAuctionUsedAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionUsedAllocationsAll not implemented")
}
func (*UnimplementedQueryServer) TotalAllocation(ctx context.Context, req *QueryGetTotalAllocationRequest) (*QueryGetTotalAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalAllocation not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.participation.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UsedAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUsedAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UsedAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.participation.Query/UsedAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UsedAllocations(ctx, req.(*QueryGetUsedAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UsedAllocationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUsedAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UsedAllocationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.participation.Query/UsedAllocationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UsedAllocationsAll(ctx, req.(*QueryAllUsedAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionUsedAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuctionUsedAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionUsedAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.participation.Query/AuctionUsedAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionUsedAllocations(ctx, req.(*QueryGetAuctionUsedAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionUsedAllocationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuctionUsedAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionUsedAllocationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.participation.Query/AuctionUsedAllocationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionUsedAllocationsAll(ctx, req.(*QueryAllAuctionUsedAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTotalAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.participation.Query/TotalAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalAllocation(ctx, req.(*QueryGetTotalAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.spn.participation.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UsedAllocations",
			Handler:    _Query_UsedAllocations_Handler,
		},
		{
			MethodName: "UsedAllocationsAll",
			Handler:    _Query_UsedAllocationsAll_Handler,
		},
		{
			MethodName: "AuctionUsedAllocations",
			Handler:    _Query_AuctionUsedAllocations_Handler,
		},
		{
			MethodName: "AuctionUsedAllocationsAll",
			Handler:    _Query_AuctionUsedAllocationsAll_Handler,
		},
		{
			MethodName: "TotalAllocation",
			Handler:    _Query_TotalAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "participation/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUsedAllocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUsedAllocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUsedAllocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUsedAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUsedAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUsedAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UsedAllocations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUsedAllocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUsedAllocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUsedAllocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUsedAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUsedAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUsedAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UsedAllocations) > 0 {
		for iNdEx := len(m.UsedAllocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsedAllocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionUsedAllocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionUsedAllocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionUsedAllocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionUsedAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionUsedAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionUsedAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AuctionUsedAllocations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionUsedAllocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionUsedAllocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionUsedAllocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionUsedAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionUsedAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionUsedAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuctionUsedAllocations) > 0 {
		for iNdEx := len(m.AuctionUsedAllocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuctionUsedAllocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalAllocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalAllocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalAllocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalAllocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalAllocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalAllocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalAllocation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalAllocation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUsedAllocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUsedAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UsedAllocations.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUsedAllocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUsedAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UsedAllocations) > 0 {
		for _, e := range m.UsedAllocations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionUsedAllocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AuctionID != 0 {
		n += 1 + sovQuery(uint64(m.AuctionID))
	}
	return n
}

func (m *QueryGetAuctionUsedAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AuctionUsedAllocations.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAuctionUsedAllocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuctionUsedAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuctionUsedAllocations) > 0 {
		for _, e := range m.AuctionUsedAllocations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTotalAllocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTotalAllocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalAllocation != 0 {
		n += 1 + sovQuery(uint64(m.TotalAllocation))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUsedAllocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUsedAllocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUsedAllocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUsedAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUsedAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUsedAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsedAllocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUsedAllocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUsedAllocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUsedAllocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUsedAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUsedAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUsedAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedAllocations = append(m.UsedAllocations, UsedAllocations{})
			if err := m.UsedAllocations[len(m.UsedAllocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionUsedAllocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionUsedAllocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionUsedAllocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionUsedAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionUsedAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionUsedAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionUsedAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionUsedAllocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionUsedAllocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionUsedAllocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionUsedAllocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionUsedAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionUsedAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionUsedAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionUsedAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionUsedAllocations = append(m.AuctionUsedAllocations, AuctionUsedAllocations{})
			if err := m.AuctionUsedAllocations[len(m.AuctionUsedAllocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalAllocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalAllocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalAllocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalAllocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalAllocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalAllocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocation", wireType)
			}
			m.TotalAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
