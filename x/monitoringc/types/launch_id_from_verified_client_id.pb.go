// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spn/monitoringc/launch_id_from_verified_client_id.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LaunchIDFromVerifiedClientID struct {
	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	LaunchID uint64 `protobuf:"varint,2,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (m *LaunchIDFromVerifiedClientID) Reset()         { *m = LaunchIDFromVerifiedClientID{} }
func (m *LaunchIDFromVerifiedClientID) String() string { return proto.CompactTextString(m) }
func (*LaunchIDFromVerifiedClientID) ProtoMessage()    {}
func (*LaunchIDFromVerifiedClientID) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a900beb38434ce, []int{0}
}
func (m *LaunchIDFromVerifiedClientID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LaunchIDFromVerifiedClientID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LaunchIDFromVerifiedClientID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LaunchIDFromVerifiedClientID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchIDFromVerifiedClientID.Merge(m, src)
}
func (m *LaunchIDFromVerifiedClientID) XXX_Size() int {
	return m.Size()
}
func (m *LaunchIDFromVerifiedClientID) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchIDFromVerifiedClientID.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchIDFromVerifiedClientID proto.InternalMessageInfo

func (m *LaunchIDFromVerifiedClientID) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *LaunchIDFromVerifiedClientID) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func init() {
	proto.RegisterType((*LaunchIDFromVerifiedClientID)(nil), "spn.monitoringc.LaunchIDFromVerifiedClientID")
}

func init() {
	proto.RegisterFile("spn/monitoringc/launch_id_from_verified_client_id.proto", fileDescriptor_11a900beb38434ce)
}

var fileDescriptor_11a900beb38434ce = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2f, 0x2e, 0xc8, 0xd3,
	0xcf, 0xcd, 0xcf, 0xcb, 0x2c, 0xc9, 0x2f, 0xca, 0xcc, 0x4b, 0x4f, 0xd6, 0xcf, 0x49, 0x2c, 0xcd,
	0x4b, 0xce, 0x88, 0xcf, 0x4c, 0x89, 0x4f, 0x2b, 0xca, 0xcf, 0x8d, 0x2f, 0x4b, 0x2d, 0xca, 0x4c,
	0xcb, 0x4c, 0x4d, 0x89, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x89, 0xcf, 0x4c, 0xd1, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2f, 0x2e, 0xc8, 0xd3, 0x43, 0xd2, 0xa8, 0x14, 0xc6, 0x25, 0xe3,
	0x03, 0xd6, 0xeb, 0xe9, 0xe2, 0x56, 0x94, 0x9f, 0x1b, 0x06, 0xd5, 0xe8, 0x0c, 0xd6, 0xe7, 0xe9,
	0x22, 0x24, 0xc5, 0xc5, 0x91, 0x0c, 0x65, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9,
	0x20, 0xb9, 0x1c, 0xa8, 0x5e, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x38, 0xdf, 0xc9, 0xfd,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a,
	0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x4b, 0x52, 0xf3, 0x52, 0x52, 0x8b, 0x72, 0x33, 0xf3, 0x4a,
	0xf4, 0x41, 0x3e, 0xaa, 0x40, 0xf1, 0x53, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0xd8, 0xe1,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xed, 0x48, 0x0a, 0xf3, 0x00, 0x00, 0x00,
}

func (m *LaunchIDFromVerifiedClientID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LaunchIDFromVerifiedClientID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LaunchIDFromVerifiedClientID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchID != 0 {
		i = encodeVarintLaunchIdFromVerifiedClientId(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintLaunchIdFromVerifiedClientId(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLaunchIdFromVerifiedClientId(dAtA []byte, offset int, v uint64) int {
	offset -= sovLaunchIdFromVerifiedClientId(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LaunchIDFromVerifiedClientID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovLaunchIdFromVerifiedClientId(uint64(l))
	}
	if m.LaunchID != 0 {
		n += 1 + sovLaunchIdFromVerifiedClientId(uint64(m.LaunchID))
	}
	return n
}

func sovLaunchIdFromVerifiedClientId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLaunchIdFromVerifiedClientId(x uint64) (n int) {
	return sovLaunchIdFromVerifiedClientId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LaunchIDFromVerifiedClientID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchIdFromVerifiedClientId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaunchIDFromVerifiedClientID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaunchIDFromVerifiedClientID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchIdFromVerifiedClientId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchIdFromVerifiedClientId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchIdFromVerifiedClientId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchIdFromVerifiedClientId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchIdFromVerifiedClientId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchIdFromVerifiedClientId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLaunchIdFromVerifiedClientId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLaunchIdFromVerifiedClientId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaunchIdFromVerifiedClientId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaunchIdFromVerifiedClientId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLaunchIdFromVerifiedClientId
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLaunchIdFromVerifiedClientId
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLaunchIdFromVerifiedClientId
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLaunchIdFromVerifiedClientId        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLaunchIdFromVerifiedClientId          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLaunchIdFromVerifiedClientId = fmt.Errorf("proto: unexpected end of group")
)
