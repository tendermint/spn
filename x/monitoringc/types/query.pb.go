// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: monitoringc/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryVerifiedClientIdsRequest struct {
	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (m *QueryVerifiedClientIdsRequest) Reset()         { *m = QueryVerifiedClientIdsRequest{} }
func (m *QueryVerifiedClientIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiedClientIdsRequest) ProtoMessage()    {}
func (*QueryVerifiedClientIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{2}
}
func (m *QueryVerifiedClientIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiedClientIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiedClientIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiedClientIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiedClientIdsRequest.Merge(m, src)
}
func (m *QueryVerifiedClientIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiedClientIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiedClientIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiedClientIdsRequest proto.InternalMessageInfo

func (m *QueryVerifiedClientIdsRequest) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

type QueryVerifiedClientIdsResponse struct {
	ClientIds []string `protobuf:"bytes,1,rep,name=clientIds,proto3" json:"clientIds,omitempty"`
}

func (m *QueryVerifiedClientIdsResponse) Reset()         { *m = QueryVerifiedClientIdsResponse{} }
func (m *QueryVerifiedClientIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiedClientIdsResponse) ProtoMessage()    {}
func (*QueryVerifiedClientIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{3}
}
func (m *QueryVerifiedClientIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiedClientIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiedClientIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiedClientIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiedClientIdsResponse.Merge(m, src)
}
func (m *QueryVerifiedClientIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiedClientIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiedClientIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiedClientIdsResponse proto.InternalMessageInfo

func (m *QueryVerifiedClientIdsResponse) GetClientIds() []string {
	if m != nil {
		return m.ClientIds
	}
	return nil
}

type QueryGetProviderClientIDRequest struct {
	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (m *QueryGetProviderClientIDRequest) Reset()         { *m = QueryGetProviderClientIDRequest{} }
func (m *QueryGetProviderClientIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProviderClientIDRequest) ProtoMessage()    {}
func (*QueryGetProviderClientIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{4}
}
func (m *QueryGetProviderClientIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProviderClientIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProviderClientIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProviderClientIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProviderClientIDRequest.Merge(m, src)
}
func (m *QueryGetProviderClientIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProviderClientIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProviderClientIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProviderClientIDRequest proto.InternalMessageInfo

func (m *QueryGetProviderClientIDRequest) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

type QueryGetProviderClientIDResponse struct {
	ProviderClientID ProviderClientID `protobuf:"bytes,1,opt,name=providerClientID,proto3" json:"providerClientID"`
}

func (m *QueryGetProviderClientIDResponse) Reset()         { *m = QueryGetProviderClientIDResponse{} }
func (m *QueryGetProviderClientIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProviderClientIDResponse) ProtoMessage()    {}
func (*QueryGetProviderClientIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{5}
}
func (m *QueryGetProviderClientIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProviderClientIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProviderClientIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProviderClientIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProviderClientIDResponse.Merge(m, src)
}
func (m *QueryGetProviderClientIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProviderClientIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProviderClientIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProviderClientIDResponse proto.InternalMessageInfo

func (m *QueryGetProviderClientIDResponse) GetProviderClientID() ProviderClientID {
	if m != nil {
		return m.ProviderClientID
	}
	return ProviderClientID{}
}

type QueryAllProviderClientIDRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProviderClientIDRequest) Reset()         { *m = QueryAllProviderClientIDRequest{} }
func (m *QueryAllProviderClientIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProviderClientIDRequest) ProtoMessage()    {}
func (*QueryAllProviderClientIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{6}
}
func (m *QueryAllProviderClientIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProviderClientIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProviderClientIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProviderClientIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProviderClientIDRequest.Merge(m, src)
}
func (m *QueryAllProviderClientIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProviderClientIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProviderClientIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProviderClientIDRequest proto.InternalMessageInfo

func (m *QueryAllProviderClientIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProviderClientIDResponse struct {
	ProviderClientID []ProviderClientID  `protobuf:"bytes,1,rep,name=providerClientID,proto3" json:"providerClientID"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProviderClientIDResponse) Reset()         { *m = QueryAllProviderClientIDResponse{} }
func (m *QueryAllProviderClientIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProviderClientIDResponse) ProtoMessage()    {}
func (*QueryAllProviderClientIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{7}
}
func (m *QueryAllProviderClientIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProviderClientIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProviderClientIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProviderClientIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProviderClientIDResponse.Merge(m, src)
}
func (m *QueryAllProviderClientIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProviderClientIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProviderClientIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProviderClientIDResponse proto.InternalMessageInfo

func (m *QueryAllProviderClientIDResponse) GetProviderClientID() []ProviderClientID {
	if m != nil {
		return m.ProviderClientID
	}
	return nil
}

func (m *QueryAllProviderClientIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLaunchIDFromVerifiedClientIDRequest struct {
	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) Reset() {
	*m = QueryGetLaunchIDFromVerifiedClientIDRequest{}
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLaunchIDFromVerifiedClientIDRequest) ProtoMessage() {}
func (*QueryGetLaunchIDFromVerifiedClientIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{8}
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDRequest.Merge(m, src)
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDRequest proto.InternalMessageInfo

func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type QueryGetLaunchIDFromVerifiedClientIDResponse struct {
	LaunchIDFromVerifiedClientID LaunchIDFromVerifiedClientID `protobuf:"bytes,1,opt,name=launchIDFromVerifiedClientID,proto3" json:"launchIDFromVerifiedClientID"`
}

func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) Reset() {
	*m = QueryGetLaunchIDFromVerifiedClientIDResponse{}
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLaunchIDFromVerifiedClientIDResponse) ProtoMessage() {}
func (*QueryGetLaunchIDFromVerifiedClientIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{9}
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDResponse.Merge(m, src)
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLaunchIDFromVerifiedClientIDResponse proto.InternalMessageInfo

func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) GetLaunchIDFromVerifiedClientID() LaunchIDFromVerifiedClientID {
	if m != nil {
		return m.LaunchIDFromVerifiedClientID
	}
	return LaunchIDFromVerifiedClientID{}
}

type QueryAllLaunchIDFromVerifiedClientIDRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) Reset() {
	*m = QueryAllLaunchIDFromVerifiedClientIDRequest{}
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLaunchIDFromVerifiedClientIDRequest) ProtoMessage() {}
func (*QueryAllLaunchIDFromVerifiedClientIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{10}
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDRequest.Merge(m, src)
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDRequest proto.InternalMessageInfo

func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLaunchIDFromVerifiedClientIDResponse struct {
	LaunchIDFromVerifiedClientID []LaunchIDFromVerifiedClientID `protobuf:"bytes,1,rep,name=launchIDFromVerifiedClientID,proto3" json:"launchIDFromVerifiedClientID"`
	Pagination                   *query.PageResponse            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) Reset() {
	*m = QueryAllLaunchIDFromVerifiedClientIDResponse{}
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLaunchIDFromVerifiedClientIDResponse) ProtoMessage() {}
func (*QueryAllLaunchIDFromVerifiedClientIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{11}
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDResponse.Merge(m, src)
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLaunchIDFromVerifiedClientIDResponse proto.InternalMessageInfo

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) GetLaunchIDFromVerifiedClientID() []LaunchIDFromVerifiedClientID {
	if m != nil {
		return m.LaunchIDFromVerifiedClientID
	}
	return nil
}

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLaunchIDFromChannelIDRequest struct {
	ChannelID string `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
}

func (m *QueryGetLaunchIDFromChannelIDRequest) Reset()         { *m = QueryGetLaunchIDFromChannelIDRequest{} }
func (m *QueryGetLaunchIDFromChannelIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLaunchIDFromChannelIDRequest) ProtoMessage()    {}
func (*QueryGetLaunchIDFromChannelIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{12}
}
func (m *QueryGetLaunchIDFromChannelIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLaunchIDFromChannelIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLaunchIDFromChannelIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLaunchIDFromChannelIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLaunchIDFromChannelIDRequest.Merge(m, src)
}
func (m *QueryGetLaunchIDFromChannelIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLaunchIDFromChannelIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLaunchIDFromChannelIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLaunchIDFromChannelIDRequest proto.InternalMessageInfo

func (m *QueryGetLaunchIDFromChannelIDRequest) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type QueryGetLaunchIDFromChannelIDResponse struct {
	LaunchIDFromChannelID LaunchIDFromChannelID `protobuf:"bytes,1,opt,name=launchIDFromChannelID,proto3" json:"launchIDFromChannelID"`
}

func (m *QueryGetLaunchIDFromChannelIDResponse) Reset()         { *m = QueryGetLaunchIDFromChannelIDResponse{} }
func (m *QueryGetLaunchIDFromChannelIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLaunchIDFromChannelIDResponse) ProtoMessage()    {}
func (*QueryGetLaunchIDFromChannelIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{13}
}
func (m *QueryGetLaunchIDFromChannelIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLaunchIDFromChannelIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLaunchIDFromChannelIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLaunchIDFromChannelIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLaunchIDFromChannelIDResponse.Merge(m, src)
}
func (m *QueryGetLaunchIDFromChannelIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLaunchIDFromChannelIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLaunchIDFromChannelIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLaunchIDFromChannelIDResponse proto.InternalMessageInfo

func (m *QueryGetLaunchIDFromChannelIDResponse) GetLaunchIDFromChannelID() LaunchIDFromChannelID {
	if m != nil {
		return m.LaunchIDFromChannelID
	}
	return LaunchIDFromChannelID{}
}

type QueryAllLaunchIDFromChannelIDRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLaunchIDFromChannelIDRequest) Reset()         { *m = QueryAllLaunchIDFromChannelIDRequest{} }
func (m *QueryAllLaunchIDFromChannelIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLaunchIDFromChannelIDRequest) ProtoMessage()    {}
func (*QueryAllLaunchIDFromChannelIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{14}
}
func (m *QueryAllLaunchIDFromChannelIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLaunchIDFromChannelIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLaunchIDFromChannelIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLaunchIDFromChannelIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLaunchIDFromChannelIDRequest.Merge(m, src)
}
func (m *QueryAllLaunchIDFromChannelIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLaunchIDFromChannelIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLaunchIDFromChannelIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLaunchIDFromChannelIDRequest proto.InternalMessageInfo

func (m *QueryAllLaunchIDFromChannelIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLaunchIDFromChannelIDResponse struct {
	LaunchIDFromChannelID []LaunchIDFromChannelID `protobuf:"bytes,1,rep,name=launchIDFromChannelID,proto3" json:"launchIDFromChannelID"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLaunchIDFromChannelIDResponse) Reset()         { *m = QueryAllLaunchIDFromChannelIDResponse{} }
func (m *QueryAllLaunchIDFromChannelIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLaunchIDFromChannelIDResponse) ProtoMessage()    {}
func (*QueryAllLaunchIDFromChannelIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecb4a38bab58f58d, []int{15}
}
func (m *QueryAllLaunchIDFromChannelIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLaunchIDFromChannelIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLaunchIDFromChannelIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLaunchIDFromChannelIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLaunchIDFromChannelIDResponse.Merge(m, src)
}
func (m *QueryAllLaunchIDFromChannelIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLaunchIDFromChannelIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLaunchIDFromChannelIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLaunchIDFromChannelIDResponse proto.InternalMessageInfo

func (m *QueryAllLaunchIDFromChannelIDResponse) GetLaunchIDFromChannelID() []LaunchIDFromChannelID {
	if m != nil {
		return m.LaunchIDFromChannelID
	}
	return nil
}

func (m *QueryAllLaunchIDFromChannelIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "tendermint.spn.monitoringc.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "tendermint.spn.monitoringc.QueryParamsResponse")
	proto.RegisterType((*QueryVerifiedClientIdsRequest)(nil), "tendermint.spn.monitoringc.QueryVerifiedClientIdsRequest")
	proto.RegisterType((*QueryVerifiedClientIdsResponse)(nil), "tendermint.spn.monitoringc.QueryVerifiedClientIdsResponse")
	proto.RegisterType((*QueryGetProviderClientIDRequest)(nil), "tendermint.spn.monitoringc.QueryGetProviderClientIDRequest")
	proto.RegisterType((*QueryGetProviderClientIDResponse)(nil), "tendermint.spn.monitoringc.QueryGetProviderClientIDResponse")
	proto.RegisterType((*QueryAllProviderClientIDRequest)(nil), "tendermint.spn.monitoringc.QueryAllProviderClientIDRequest")
	proto.RegisterType((*QueryAllProviderClientIDResponse)(nil), "tendermint.spn.monitoringc.QueryAllProviderClientIDResponse")
	proto.RegisterType((*QueryGetLaunchIDFromVerifiedClientIDRequest)(nil), "tendermint.spn.monitoringc.QueryGetLaunchIDFromVerifiedClientIDRequest")
	proto.RegisterType((*QueryGetLaunchIDFromVerifiedClientIDResponse)(nil), "tendermint.spn.monitoringc.QueryGetLaunchIDFromVerifiedClientIDResponse")
	proto.RegisterType((*QueryAllLaunchIDFromVerifiedClientIDRequest)(nil), "tendermint.spn.monitoringc.QueryAllLaunchIDFromVerifiedClientIDRequest")
	proto.RegisterType((*QueryAllLaunchIDFromVerifiedClientIDResponse)(nil), "tendermint.spn.monitoringc.QueryAllLaunchIDFromVerifiedClientIDResponse")
	proto.RegisterType((*QueryGetLaunchIDFromChannelIDRequest)(nil), "tendermint.spn.monitoringc.QueryGetLaunchIDFromChannelIDRequest")
	proto.RegisterType((*QueryGetLaunchIDFromChannelIDResponse)(nil), "tendermint.spn.monitoringc.QueryGetLaunchIDFromChannelIDResponse")
	proto.RegisterType((*QueryAllLaunchIDFromChannelIDRequest)(nil), "tendermint.spn.monitoringc.QueryAllLaunchIDFromChannelIDRequest")
	proto.RegisterType((*QueryAllLaunchIDFromChannelIDResponse)(nil), "tendermint.spn.monitoringc.QueryAllLaunchIDFromChannelIDResponse")
}

func init() { proto.RegisterFile("monitoringc/query.proto", fileDescriptor_ecb4a38bab58f58d) }

var fileDescriptor_ecb4a38bab58f58d = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5d, 0x4f, 0x33, 0x45,
	0x14, 0xee, 0xd0, 0x57, 0x22, 0x63, 0x4c, 0x5e, 0xe7, 0x85, 0xd8, 0x6c, 0x6a, 0x21, 0x13, 0x54,
	0x02, 0xb8, 0x2b, 0x10, 0x3f, 0xf8, 0x52, 0x0a, 0x48, 0xa9, 0xe1, 0xa2, 0xf6, 0x42, 0x13, 0x2f,
	0x6c, 0xb6, 0xdb, 0x61, 0xd9, 0x64, 0x77, 0x66, 0xd9, 0xdd, 0x12, 0x09, 0xe1, 0x06, 0xff, 0x80,
	0x89, 0xd1, 0x3f, 0xe2, 0x9f, 0x20, 0x31, 0x31, 0x24, 0xde, 0x78, 0x23, 0x1a, 0x30, 0xf1, 0x47,
	0xe8, 0x85, 0xe9, 0xec, 0x6c, 0x3f, 0x76, 0xbb, 0x1f, 0x2d, 0x7d, 0xef, 0xba, 0xb3, 0xe7, 0x39,
	0xe7, 0x3c, 0xcf, 0x39, 0x9d, 0x73, 0x16, 0xbe, 0x69, 0x31, 0x6a, 0x78, 0xcc, 0x31, 0xa8, 0xae,
	0x29, 0xe7, 0x6d, 0xe2, 0x5c, 0xca, 0xb6, 0xc3, 0x3c, 0x86, 0x24, 0x8f, 0xd0, 0x16, 0x71, 0x2c,
	0x83, 0x7a, 0xb2, 0x6b, 0x53, 0xb9, 0xcf, 0x4e, 0x9a, 0xd5, 0x99, 0xce, 0xb8, 0x99, 0xd2, 0xf9,
	0xe5, 0x23, 0xa4, 0xa2, 0xce, 0x98, 0x6e, 0x12, 0x45, 0xb5, 0x0d, 0x45, 0xa5, 0x94, 0x79, 0xaa,
	0x67, 0x30, 0xea, 0x8a, 0xb7, 0xcb, 0x1a, 0x73, 0x2d, 0xe6, 0x2a, 0x4d, 0xd5, 0x25, 0x7e, 0x20,
	0xe5, 0x62, 0xad, 0x49, 0x3c, 0x75, 0x4d, 0xb1, 0x55, 0xdd, 0xa0, 0xdc, 0x58, 0xd8, 0x16, 0xfa,
	0x93, 0xb2, 0x55, 0x47, 0xb5, 0x02, 0x2f, 0x8b, 0x03, 0x6f, 0x1c, 0x76, 0x61, 0xb4, 0x88, 0xd3,
	0xd0, 0x4c, 0x83, 0x50, 0xaf, 0x61, 0xb4, 0x84, 0xd5, 0x46, 0xbf, 0x95, 0xa9, 0xb6, 0xa9, 0x76,
	0xd6, 0x30, 0x5a, 0x8d, 0x53, 0x87, 0x59, 0x8d, 0x0b, 0xe2, 0x18, 0xa7, 0x06, 0x69, 0x45, 0x40,
	0x2b, 0x09, 0x20, 0xed, 0x4c, 0xa5, 0x94, 0x98, 0x5d, 0x63, 0x3c, 0x0b, 0xd1, 0x17, 0x1d, 0x0e,
	0x35, 0x9e, 0x5c, 0x9d, 0x9c, 0xb7, 0x89, 0xeb, 0xe1, 0xaf, 0xe0, 0x8b, 0x81, 0x53, 0xd7, 0x66,
	0xd4, 0x25, 0x68, 0x0f, 0x4e, 0xfb, 0x24, 0x0a, 0x60, 0x01, 0x2c, 0xbd, 0xb6, 0x8e, 0xe5, 0x78,
	0x6d, 0x65, 0x1f, 0xbb, 0xff, 0xec, 0xf6, 0x7e, 0x3e, 0x57, 0x17, 0x38, 0xbc, 0x0d, 0xdf, 0xe2,
	0x8e, 0xbf, 0x14, 0xc9, 0x1f, 0xf0, 0xdc, 0xab, 0xad, 0x20, 0x32, 0x92, 0xe0, 0xab, 0x7e, 0xca,
	0xd5, 0x43, 0x1e, 0xe4, 0x59, 0xbd, 0xfb, 0x8c, 0x3f, 0x81, 0xa5, 0x38, 0xb0, 0x48, 0xb0, 0x08,
	0x67, 0xb4, 0xe0, 0xb0, 0x00, 0x16, 0xf2, 0x4b, 0x33, 0xf5, 0xde, 0x01, 0xde, 0x85, 0xf3, 0x1c,
	0x5f, 0x21, 0x5e, 0x4d, 0x28, 0x2e, 0x5c, 0x1c, 0x66, 0x09, 0x7f, 0x03, 0xe0, 0x42, 0x3c, 0x5e,
	0x64, 0xf0, 0x0d, 0x7c, 0x6e, 0x87, 0xde, 0x09, 0xb1, 0x56, 0x13, 0xc5, 0x0a, 0x61, 0x84, 0x6c,
	0x11, 0x5f, 0xd8, 0x10, 0x1c, 0xca, 0xa6, 0x19, 0xc7, 0xe1, 0x08, 0xc2, 0x5e, 0x23, 0x8a, 0xe0,
	0xef, 0xc8, 0x7e, 0xd7, 0xca, 0x9d, 0xae, 0x95, 0xfd, 0xbf, 0x87, 0xe8, 0x5a, 0xb9, 0xa6, 0xea,
	0x44, 0x60, 0xeb, 0x7d, 0x48, 0xfc, 0x4b, 0xc0, 0x77, 0x68, 0xac, 0x44, 0xbe, 0xf9, 0x49, 0xf1,
	0x45, 0x95, 0x01, 0x32, 0x53, 0x9c, 0xcc, 0xbb, 0xa9, 0x64, 0xfc, 0xe4, 0x06, 0xd8, 0x54, 0xe1,
	0x4a, 0x50, 0xbc, 0x13, 0x51, 0xd1, 0x23, 0x87, 0x59, 0xa1, 0x5e, 0xea, 0x6f, 0x04, 0xad, 0xbf,
	0x7e, 0x33, 0xf5, 0xee, 0x33, 0xfe, 0x19, 0xc0, 0xd5, 0x6c, 0xbe, 0x84, 0x48, 0x37, 0x00, 0x16,
	0xcd, 0x04, 0x43, 0x51, 0xa4, 0x8f, 0x93, 0x14, 0x4b, 0x0a, 0x24, 0xd4, 0x4b, 0x8c, 0x81, 0xdb,
	0x42, 0x80, 0xb2, 0x69, 0x66, 0x11, 0x60, 0x52, 0x5d, 0xf4, 0x5f, 0x20, 0x56, 0x6a, 0xdc, 0xec,
	0x62, 0xe5, 0x5f, 0xb6, 0x58, 0x93, 0x6b, 0xbb, 0x43, 0xb8, 0x38, 0xac, 0x55, 0x0e, 0xfc, 0x7b,
	0xb8, 0x27, 0x77, 0xe7, 0xe6, 0x0a, 0xce, 0x44, 0xc3, 0xf5, 0x0e, 0xf0, 0x4f, 0x00, 0xbe, 0x9d,
	0xe2, 0x46, 0xa8, 0x67, 0xc1, 0x39, 0x73, 0x98, 0x81, 0xa8, 0xe0, 0x5a, 0x56, 0xd5, 0xba, 0x40,
	0x21, 0xd7, 0x70, 0xaf, 0x98, 0x0a, 0x7a, 0xa1, 0xe2, 0x46, 0xe8, 0x4d, 0xaa, 0x9b, 0xfe, 0x0c,
	0x84, 0x88, 0x0f, 0x98, 0x2e, 0x44, 0x7e, 0xf2, 0x42, 0x4c, 0xac, 0x61, 0xd6, 0xff, 0x78, 0x1d,
	0xbe, 0xc2, 0x19, 0xa2, 0x1f, 0x01, 0x9c, 0xf6, 0x87, 0x28, 0x92, 0x93, 0xb2, 0x8d, 0xce, 0x6f,
	0x49, 0xc9, 0x6c, 0xef, 0x67, 0x80, 0x97, 0x6f, 0x7e, 0xfb, 0xfb, 0x87, 0xa9, 0x45, 0x84, 0x95,
	0x1e, 0x50, 0x71, 0x6d, 0xaa, 0x44, 0x17, 0x18, 0xf4, 0x2b, 0x80, 0x6f, 0x44, 0x46, 0x30, 0xda,
	0x4c, 0x0d, 0x19, 0x37, 0xf3, 0xa5, 0xad, 0x71, 0xa0, 0x22, 0xf1, 0x7d, 0x9e, 0xf8, 0x0e, 0xda,
	0x4a, 0x4a, 0x3c, 0xba, 0x2a, 0xb9, 0xca, 0x55, 0x50, 0xc7, 0x6b, 0x74, 0x07, 0xe0, 0xf3, 0xf0,
	0x40, 0x42, 0xdb, 0xa9, 0x49, 0xc5, 0xaf, 0x11, 0xd2, 0xce, 0x78, 0x60, 0xc1, 0xa9, 0xcc, 0x39,
	0x6d, 0xa3, 0xcd, 0xc4, 0x62, 0x44, 0x76, 0xc6, 0x7e, 0x4a, 0xb7, 0x00, 0xbe, 0x08, 0xfb, 0x2f,
	0x9b, 0x66, 0x06, 0x56, 0xf1, 0x8b, 0x45, 0x06, 0x56, 0x09, 0x9b, 0x02, 0xfe, 0x90, 0xb3, 0x7a,
	0x1f, 0xc9, 0xa3, 0xb1, 0x42, 0xdf, 0x4d, 0xc1, 0xe2, 0x49, 0xe2, 0x5d, 0x9d, 0x45, 0xec, 0x0c,
	0x23, 0x4f, 0x3a, 0x7e, 0xba, 0x23, 0xc1, 0xb5, 0xc6, 0xb9, 0x7e, 0x8e, 0x8e, 0x93, 0xb8, 0xa6,
	0xee, 0xf3, 0xca, 0x55, 0xb0, 0x72, 0x5c, 0xa3, 0x7f, 0x01, 0x9c, 0x4f, 0x0a, 0xdd, 0x29, 0x6e,
	0x25, 0x4b, 0x7d, 0x26, 0x23, 0x44, 0xc6, 0x61, 0x8e, 0x3f, 0xe3, 0x42, 0x7c, 0x8a, 0x76, 0x9f,
	0x24, 0x04, 0xfa, 0x07, 0xc0, 0xb9, 0xa1, 0x97, 0x32, 0xda, 0x1b, 0xb5, 0x66, 0xe1, 0xd1, 0x24,
	0x95, 0x9f, 0xe0, 0x41, 0xb0, 0xac, 0x72, 0x96, 0x07, 0xa8, 0x3c, 0x02, 0xcb, 0xde, 0x97, 0x98,
	0x72, 0xd5, 0x1d, 0xf4, 0xd7, 0xe8, 0x1e, 0xc0, 0xc2, 0xd0, 0x60, 0x9d, 0x02, 0xef, 0x8d, 0x5a,
	0x97, 0x31, 0xc8, 0xa6, 0x0d, 0x56, 0xbc, 0xcb, 0xc9, 0x7e, 0x84, 0x3e, 0x18, 0x8b, 0xec, 0x7e,
	0xe5, 0xf6, 0xa1, 0x04, 0xee, 0x1e, 0x4a, 0xe0, 0xaf, 0x87, 0x12, 0xf8, 0xfe, 0xb1, 0x94, 0xbb,
	0x7b, 0x2c, 0xe5, 0x7e, 0x7f, 0x2c, 0xe5, 0xbe, 0x7e, 0x4f, 0x37, 0xbc, 0xb3, 0x76, 0x53, 0xd6,
	0x98, 0x15, 0x76, 0xfd, 0xed, 0x80, 0x73, 0xef, 0xd2, 0x26, 0x6e, 0x73, 0x9a, 0x7f, 0xc0, 0x6e,
	0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xba, 0x5a, 0xd7, 0xf9, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of VerifiedClientIds items.
	VerifiedClientIds(ctx context.Context, in *QueryVerifiedClientIdsRequest, opts ...grpc.CallOption) (*QueryVerifiedClientIdsResponse, error)
	// Queries a ProviderClientID by index.
	ProviderClientID(ctx context.Context, in *QueryGetProviderClientIDRequest, opts ...grpc.CallOption) (*QueryGetProviderClientIDResponse, error)
	// Queries a list of ProviderClientID items.
	ProviderClientIDAll(ctx context.Context, in *QueryAllProviderClientIDRequest, opts ...grpc.CallOption) (*QueryAllProviderClientIDResponse, error)
	// Queries a LaunchIDFromVerifiedClientID by index.
	LaunchIDFromVerifiedClientID(ctx context.Context, in *QueryGetLaunchIDFromVerifiedClientIDRequest, opts ...grpc.CallOption) (*QueryGetLaunchIDFromVerifiedClientIDResponse, error)
	// Queries a list of LaunchIDFromVerifiedClientID items.
	LaunchIDFromVerifiedClientIDAll(ctx context.Context, in *QueryAllLaunchIDFromVerifiedClientIDRequest, opts ...grpc.CallOption) (*QueryAllLaunchIDFromVerifiedClientIDResponse, error)
	// Queries a LaunchIDFromChannelID by index.
	LaunchIDFromChannelID(ctx context.Context, in *QueryGetLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryGetLaunchIDFromChannelIDResponse, error)
	// Queries a list of LaunchIDFromChannelID items.
	LaunchIDFromChannelIDAll(ctx context.Context, in *QueryAllLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryAllLaunchIDFromChannelIDResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifiedClientIds(ctx context.Context, in *QueryVerifiedClientIdsRequest, opts ...grpc.CallOption) (*QueryVerifiedClientIdsResponse, error) {
	out := new(QueryVerifiedClientIdsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/VerifiedClientIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderClientID(ctx context.Context, in *QueryGetProviderClientIDRequest, opts ...grpc.CallOption) (*QueryGetProviderClientIDResponse, error) {
	out := new(QueryGetProviderClientIDResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/ProviderClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderClientIDAll(ctx context.Context, in *QueryAllProviderClientIDRequest, opts ...grpc.CallOption) (*QueryAllProviderClientIDResponse, error) {
	out := new(QueryAllProviderClientIDResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/ProviderClientIDAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LaunchIDFromVerifiedClientID(ctx context.Context, in *QueryGetLaunchIDFromVerifiedClientIDRequest, opts ...grpc.CallOption) (*QueryGetLaunchIDFromVerifiedClientIDResponse, error) {
	out := new(QueryGetLaunchIDFromVerifiedClientIDResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/LaunchIDFromVerifiedClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LaunchIDFromVerifiedClientIDAll(ctx context.Context, in *QueryAllLaunchIDFromVerifiedClientIDRequest, opts ...grpc.CallOption) (*QueryAllLaunchIDFromVerifiedClientIDResponse, error) {
	out := new(QueryAllLaunchIDFromVerifiedClientIDResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/LaunchIDFromVerifiedClientIDAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LaunchIDFromChannelID(ctx context.Context, in *QueryGetLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryGetLaunchIDFromChannelIDResponse, error) {
	out := new(QueryGetLaunchIDFromChannelIDResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/LaunchIDFromChannelID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LaunchIDFromChannelIDAll(ctx context.Context, in *QueryAllLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryAllLaunchIDFromChannelIDResponse, error) {
	out := new(QueryAllLaunchIDFromChannelIDResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.monitoringc.Query/LaunchIDFromChannelIDAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of VerifiedClientIds items.
	VerifiedClientIds(context.Context, *QueryVerifiedClientIdsRequest) (*QueryVerifiedClientIdsResponse, error)
	// Queries a ProviderClientID by index.
	ProviderClientID(context.Context, *QueryGetProviderClientIDRequest) (*QueryGetProviderClientIDResponse, error)
	// Queries a list of ProviderClientID items.
	ProviderClientIDAll(context.Context, *QueryAllProviderClientIDRequest) (*QueryAllProviderClientIDResponse, error)
	// Queries a LaunchIDFromVerifiedClientID by index.
	LaunchIDFromVerifiedClientID(context.Context, *QueryGetLaunchIDFromVerifiedClientIDRequest) (*QueryGetLaunchIDFromVerifiedClientIDResponse, error)
	// Queries a list of LaunchIDFromVerifiedClientID items.
	LaunchIDFromVerifiedClientIDAll(context.Context, *QueryAllLaunchIDFromVerifiedClientIDRequest) (*QueryAllLaunchIDFromVerifiedClientIDResponse, error)
	// Queries a LaunchIDFromChannelID by index.
	LaunchIDFromChannelID(context.Context, *QueryGetLaunchIDFromChannelIDRequest) (*QueryGetLaunchIDFromChannelIDResponse, error)
	// Queries a list of LaunchIDFromChannelID items.
	LaunchIDFromChannelIDAll(context.Context, *QueryAllLaunchIDFromChannelIDRequest) (*QueryAllLaunchIDFromChannelIDResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VerifiedClientIds(ctx context.Context, req *QueryVerifiedClientIdsRequest) (*QueryVerifiedClientIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiedClientIds not implemented")
}
func (*UnimplementedQueryServer) ProviderClientID(ctx context.Context, req *QueryGetProviderClientIDRequest) (*QueryGetProviderClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderClientID not implemented")
}
func (*UnimplementedQueryServer) ProviderClientIDAll(ctx context.Context, req *QueryAllProviderClientIDRequest) (*QueryAllProviderClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderClientIDAll not implemented")
}
func (*UnimplementedQueryServer) LaunchIDFromVerifiedClientID(ctx context.Context, req *QueryGetLaunchIDFromVerifiedClientIDRequest) (*QueryGetLaunchIDFromVerifiedClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchIDFromVerifiedClientID not implemented")
}
func (*UnimplementedQueryServer) LaunchIDFromVerifiedClientIDAll(ctx context.Context, req *QueryAllLaunchIDFromVerifiedClientIDRequest) (*QueryAllLaunchIDFromVerifiedClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchIDFromVerifiedClientIDAll not implemented")
}
func (*UnimplementedQueryServer) LaunchIDFromChannelID(ctx context.Context, req *QueryGetLaunchIDFromChannelIDRequest) (*QueryGetLaunchIDFromChannelIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchIDFromChannelID not implemented")
}
func (*UnimplementedQueryServer) LaunchIDFromChannelIDAll(ctx context.Context, req *QueryAllLaunchIDFromChannelIDRequest) (*QueryAllLaunchIDFromChannelIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchIDFromChannelIDAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifiedClientIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifiedClientIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifiedClientIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/VerifiedClientIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifiedClientIds(ctx, req.(*QueryVerifiedClientIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProviderClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/ProviderClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderClientID(ctx, req.(*QueryGetProviderClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderClientIDAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProviderClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderClientIDAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/ProviderClientIDAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderClientIDAll(ctx, req.(*QueryAllProviderClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LaunchIDFromVerifiedClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLaunchIDFromVerifiedClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LaunchIDFromVerifiedClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/LaunchIDFromVerifiedClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LaunchIDFromVerifiedClientID(ctx, req.(*QueryGetLaunchIDFromVerifiedClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LaunchIDFromVerifiedClientIDAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLaunchIDFromVerifiedClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LaunchIDFromVerifiedClientIDAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/LaunchIDFromVerifiedClientIDAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LaunchIDFromVerifiedClientIDAll(ctx, req.(*QueryAllLaunchIDFromVerifiedClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LaunchIDFromChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLaunchIDFromChannelIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LaunchIDFromChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/LaunchIDFromChannelID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LaunchIDFromChannelID(ctx, req.(*QueryGetLaunchIDFromChannelIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LaunchIDFromChannelIDAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLaunchIDFromChannelIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LaunchIDFromChannelIDAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.monitoringc.Query/LaunchIDFromChannelIDAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LaunchIDFromChannelIDAll(ctx, req.(*QueryAllLaunchIDFromChannelIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.spn.monitoringc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VerifiedClientIds",
			Handler:    _Query_VerifiedClientIds_Handler,
		},
		{
			MethodName: "ProviderClientID",
			Handler:    _Query_ProviderClientID_Handler,
		},
		{
			MethodName: "ProviderClientIDAll",
			Handler:    _Query_ProviderClientIDAll_Handler,
		},
		{
			MethodName: "LaunchIDFromVerifiedClientID",
			Handler:    _Query_LaunchIDFromVerifiedClientID_Handler,
		},
		{
			MethodName: "LaunchIDFromVerifiedClientIDAll",
			Handler:    _Query_LaunchIDFromVerifiedClientIDAll_Handler,
		},
		{
			MethodName: "LaunchIDFromChannelID",
			Handler:    _Query_LaunchIDFromChannelID_Handler,
		},
		{
			MethodName: "LaunchIDFromChannelIDAll",
			Handler:    _Query_LaunchIDFromChannelIDAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoringc/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVerifiedClientIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiedClientIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiedClientIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifiedClientIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiedClientIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiedClientIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		for iNdEx := len(m.ClientIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIds[iNdEx])
			copy(dAtA[i:], m.ClientIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ClientIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProviderClientIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProviderClientIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProviderClientIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProviderClientIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProviderClientIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProviderClientIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProviderClientID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProviderClientIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProviderClientIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProviderClientIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProviderClientIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProviderClientIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProviderClientIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderClientID) > 0 {
		for iNdEx := len(m.ProviderClientID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderClientID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LaunchIDFromVerifiedClientID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LaunchIDFromVerifiedClientID) > 0 {
		for iNdEx := len(m.LaunchIDFromVerifiedClientID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LaunchIDFromVerifiedClientID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLaunchIDFromChannelIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLaunchIDFromChannelIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLaunchIDFromChannelIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLaunchIDFromChannelIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLaunchIDFromChannelIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLaunchIDFromChannelIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LaunchIDFromChannelID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLaunchIDFromChannelIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLaunchIDFromChannelIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLaunchIDFromChannelIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLaunchIDFromChannelIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLaunchIDFromChannelIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLaunchIDFromChannelIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LaunchIDFromChannelID) > 0 {
		for iNdEx := len(m.LaunchIDFromChannelID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LaunchIDFromChannelID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVerifiedClientIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovQuery(uint64(m.LaunchID))
	}
	return n
}

func (m *QueryVerifiedClientIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProviderClientIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovQuery(uint64(m.LaunchID))
	}
	return n
}

func (m *QueryGetProviderClientIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProviderClientID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProviderClientIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProviderClientIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProviderClientID) > 0 {
		for _, e := range m.ProviderClientID {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LaunchIDFromVerifiedClientID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LaunchIDFromVerifiedClientID) > 0 {
		for _, e := range m.LaunchIDFromVerifiedClientID {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLaunchIDFromChannelIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLaunchIDFromChannelIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LaunchIDFromChannelID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLaunchIDFromChannelIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLaunchIDFromChannelIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LaunchIDFromChannelID) > 0 {
		for _, e := range m.LaunchIDFromChannelID {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifiedClientIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiedClientIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiedClientIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifiedClientIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiedClientIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiedClientIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProviderClientIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProviderClientIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProviderClientIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProviderClientIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProviderClientIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProviderClientIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderClientID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderClientID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProviderClientIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProviderClientIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProviderClientIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProviderClientIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProviderClientIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProviderClientIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderClientID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderClientID = append(m.ProviderClientID, ProviderClientID{})
			if err := m.ProviderClientID[len(m.ProviderClientID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLaunchIDFromVerifiedClientIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromVerifiedClientIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromVerifiedClientIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLaunchIDFromVerifiedClientIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromVerifiedClientIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromVerifiedClientIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchIDFromVerifiedClientID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LaunchIDFromVerifiedClientID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLaunchIDFromVerifiedClientIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromVerifiedClientIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromVerifiedClientIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLaunchIDFromVerifiedClientIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromVerifiedClientIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromVerifiedClientIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchIDFromVerifiedClientID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaunchIDFromVerifiedClientID = append(m.LaunchIDFromVerifiedClientID, LaunchIDFromVerifiedClientID{})
			if err := m.LaunchIDFromVerifiedClientID[len(m.LaunchIDFromVerifiedClientID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLaunchIDFromChannelIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromChannelIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromChannelIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLaunchIDFromChannelIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromChannelIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLaunchIDFromChannelIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchIDFromChannelID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LaunchIDFromChannelID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLaunchIDFromChannelIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromChannelIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromChannelIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLaunchIDFromChannelIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromChannelIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLaunchIDFromChannelIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchIDFromChannelID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaunchIDFromChannelID = append(m.LaunchIDFromChannelID, LaunchIDFromChannelID{})
			if err := m.LaunchIDFromChannelID[len(m.LaunchIDFromChannelID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
