// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spn/reward/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventRewardPoolCreated struct {
	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *EventRewardPoolCreated) Reset()         { *m = EventRewardPoolCreated{} }
func (m *EventRewardPoolCreated) String() string { return proto.CompactTextString(m) }
func (*EventRewardPoolCreated) ProtoMessage()    {}
func (*EventRewardPoolCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_169f73667c05bc72, []int{0}
}
func (m *EventRewardPoolCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRewardPoolCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRewardPoolCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRewardPoolCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRewardPoolCreated.Merge(m, src)
}
func (m *EventRewardPoolCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventRewardPoolCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRewardPoolCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRewardPoolCreated proto.InternalMessageInfo

func (m *EventRewardPoolCreated) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func (m *EventRewardPoolCreated) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type EventRewardPoolRemoved struct {
	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (m *EventRewardPoolRemoved) Reset()         { *m = EventRewardPoolRemoved{} }
func (m *EventRewardPoolRemoved) String() string { return proto.CompactTextString(m) }
func (*EventRewardPoolRemoved) ProtoMessage()    {}
func (*EventRewardPoolRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_169f73667c05bc72, []int{1}
}
func (m *EventRewardPoolRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRewardPoolRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRewardPoolRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRewardPoolRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRewardPoolRemoved.Merge(m, src)
}
func (m *EventRewardPoolRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventRewardPoolRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRewardPoolRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventRewardPoolRemoved proto.InternalMessageInfo

func (m *EventRewardPoolRemoved) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

type EventRewardsDistributed struct {
	LaunchID uint64                                   `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Receiver string                                   `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Rewards  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=rewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *EventRewardsDistributed) Reset()         { *m = EventRewardsDistributed{} }
func (m *EventRewardsDistributed) String() string { return proto.CompactTextString(m) }
func (*EventRewardsDistributed) ProtoMessage()    {}
func (*EventRewardsDistributed) Descriptor() ([]byte, []int) {
	return fileDescriptor_169f73667c05bc72, []int{2}
}
func (m *EventRewardsDistributed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRewardsDistributed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRewardsDistributed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRewardsDistributed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRewardsDistributed.Merge(m, src)
}
func (m *EventRewardsDistributed) XXX_Size() int {
	return m.Size()
}
func (m *EventRewardsDistributed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRewardsDistributed.DiscardUnknown(m)
}

var xxx_messageInfo_EventRewardsDistributed proto.InternalMessageInfo

func (m *EventRewardsDistributed) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func (m *EventRewardsDistributed) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventRewardsDistributed) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func init() {
	proto.RegisterType((*EventRewardPoolCreated)(nil), "spn.reward.EventRewardPoolCreated")
	proto.RegisterType((*EventRewardPoolRemoved)(nil), "spn.reward.EventRewardPoolRemoved")
	proto.RegisterType((*EventRewardsDistributed)(nil), "spn.reward.EventRewardsDistributed")
}

func init() { proto.RegisterFile("spn/reward/events.proto", fileDescriptor_169f73667c05bc72) }

var fileDescriptor_169f73667c05bc72 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xed, 0x7c, 0x7c, 0xf1, 0xa7, 0xee, 0x88, 0x11, 0x24, 0x66, 0x20, 0x6c, 0xec, 0xc6, 0x99,
	0xa0, 0x3e, 0x01, 0xe0, 0xc2, 0x1d, 0xe9, 0x52, 0x17, 0xa6, 0x3f, 0x37, 0x30, 0x91, 0xce, 0x6d,
	0x66, 0x86, 0xaa, 0x6f, 0xc1, 0x73, 0xf8, 0x24, 0x2c, 0x59, 0xba, 0x42, 0x03, 0x3e, 0x85, 0x2b,
	0xd3, 0x0e, 0x60, 0x13, 0x13, 0xc3, 0xea, 0xf6, 0xf6, 0xdc, 0x73, 0xe6, 0xe4, 0x1c, 0xb7, 0xa6,
	0x53, 0xc9, 0x15, 0x3c, 0x05, 0x2a, 0xe6, 0x90, 0x81, 0x34, 0x9a, 0xa5, 0x0a, 0x0d, 0x56, 0x5d,
	0x9d, 0x4a, 0x66, 0x81, 0xc6, 0xf1, 0x10, 0x87, 0x58, 0xfc, 0xe6, 0xf9, 0x97, 0xbd, 0x68, 0x9c,
	0x95, 0xa8, 0x76, 0x3c, 0xa4, 0x88, 0xe3, 0x35, 0x4a, 0x23, 0xd4, 0x09, 0x6a, 0x1e, 0x06, 0x1a,
	0x78, 0xd6, 0x09, 0xc1, 0x04, 0x1d, 0x1e, 0xa1, 0x90, 0x16, 0x6f, 0x0f, 0xdc, 0x93, 0x9b, 0xfc,
	0x3d, 0xbf, 0x60, 0x0e, 0x10, 0xc7, 0x3d, 0x05, 0x81, 0x81, 0xb8, 0xda, 0x70, 0x0f, 0xc6, 0xc1,
	0x44, 0x46, 0xa3, 0xdb, 0x7e, 0x9d, 0xb4, 0x88, 0xf7, 0xdf, 0xdf, 0xee, 0x39, 0x96, 0x2a, 0xcc,
	0x44, 0x0c, 0xaa, 0xfe, 0xaf, 0x45, 0xbc, 0x43, 0x7f, 0xbb, 0xb7, 0xaf, 0x7f, 0x29, 0xfa, 0x90,
	0x60, 0xf6, 0xb7, 0x62, 0xfb, 0x93, 0xb8, 0xb5, 0x12, 0x4d, 0xf7, 0x85, 0x36, 0x4a, 0x84, 0x93,
	0x1d, 0x9c, 0x28, 0x88, 0x40, 0x64, 0x3f, 0x4e, 0x36, 0x7b, 0x75, 0x4a, 0xdc, 0x7d, 0x9b, 0x88,
	0xae, 0x57, 0x5a, 0x15, 0xef, 0xe8, 0xf2, 0x94, 0xd9, 0x38, 0x58, 0x1e, 0x07, 0x5b, 0xc7, 0xc1,
	0x7a, 0x28, 0x64, 0xf7, 0x7e, 0xb6, 0x68, 0x3a, 0x5f, 0x8b, 0xe6, 0xf9, 0x50, 0x98, 0xd1, 0x24,
	0x64, 0x11, 0x26, 0x7c, 0x9d, 0x9d, 0x1d, 0x17, 0x3a, 0x7e, 0xe4, 0xe6, 0x25, 0x05, 0x5d, 0x10,
	0x5e, 0xdf, 0x9b, 0xde, 0x8e, 0xa7, 0xda, 0xdf, 0xd8, 0xe8, 0x76, 0x67, 0x4b, 0x4a, 0xe6, 0x4b,
	0x4a, 0x3e, 0x96, 0x94, 0x4c, 0x57, 0xd4, 0x99, 0xaf, 0xa8, 0xf3, 0xb6, 0xa2, 0xce, 0x5d, 0x59,
	0xcc, 0x80, 0x8c, 0x41, 0x25, 0x42, 0x1a, 0x9e, 0x97, 0xfb, 0xbc, 0xa9, 0xb7, 0x90, 0x0c, 0xf7,
	0x8a, 0xe6, 0xae, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x03, 0xbc, 0xe0, 0x1c, 0x34, 0x02, 0x00,
	0x00,
}

func (m *EventRewardPoolCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRewardPoolCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRewardPoolCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRewardPoolRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRewardPoolRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRewardPoolRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRewardsDistributed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRewardsDistributed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRewardsDistributed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventRewardPoolCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovEvents(uint64(m.LaunchID))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRewardPoolRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovEvents(uint64(m.LaunchID))
	}
	return n
}

func (m *EventRewardsDistributed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovEvents(uint64(m.LaunchID))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventRewardPoolCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRewardPoolCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRewardPoolCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRewardPoolRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRewardPoolRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRewardPoolRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRewardsDistributed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRewardsDistributed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRewardsDistributed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
