// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reward/reward_pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardPool struct {
	LaunchID            uint64                                   `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Provider            string                                   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	InitialCoins        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=initialCoins,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"initialCoins"`
	CurrentCoins        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=currentCoins,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"currentCoins"`
	LastRewardHeight    uint64                                   `protobuf:"varint,5,opt,name=lastRewardHeight,proto3" json:"lastRewardHeight,omitempty"`
	CurrentRewardHeight uint64                                   `protobuf:"varint,6,opt,name=currentRewardHeight,proto3" json:"currentRewardHeight,omitempty"`
	Closed              bool                                     `protobuf:"varint,7,opt,name=closed,proto3" json:"closed,omitempty"`
}

func (m *RewardPool) Reset()         { *m = RewardPool{} }
func (m *RewardPool) String() string { return proto.CompactTextString(m) }
func (*RewardPool) ProtoMessage()    {}
func (*RewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_609e0d2ccc6b594f, []int{0}
}
func (m *RewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPool.Merge(m, src)
}
func (m *RewardPool) XXX_Size() int {
	return m.Size()
}
func (m *RewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPool proto.InternalMessageInfo

func (m *RewardPool) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func (m *RewardPool) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *RewardPool) GetInitialCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.InitialCoins
	}
	return nil
}

func (m *RewardPool) GetCurrentCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentCoins
	}
	return nil
}

func (m *RewardPool) GetLastRewardHeight() uint64 {
	if m != nil {
		return m.LastRewardHeight
	}
	return 0
}

func (m *RewardPool) GetCurrentRewardHeight() uint64 {
	if m != nil {
		return m.CurrentRewardHeight
	}
	return 0
}

func (m *RewardPool) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func init() {
	proto.RegisterType((*RewardPool)(nil), "tendermint.spn.reward.RewardPool")
}

func init() { proto.RegisterFile("reward/reward_pool.proto", fileDescriptor_609e0d2ccc6b594f) }

var fileDescriptor_609e0d2ccc6b594f = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xbf, 0x4e, 0xfb, 0x30,
	0x10, 0xc7, 0xe3, 0x5f, 0xfb, 0x2b, 0xc5, 0x30, 0xa0, 0xf0, 0x47, 0xa1, 0x43, 0x1a, 0xb1, 0x10,
	0x21, 0x61, 0x53, 0x78, 0x83, 0xc2, 0x00, 0x1b, 0xca, 0x08, 0x03, 0xca, 0x1f, 0x2b, 0xb5, 0x48,
	0x7d, 0x91, 0xed, 0x16, 0x78, 0x0b, 0x66, 0x1e, 0x81, 0x27, 0xe9, 0xd8, 0x91, 0xa9, 0xa0, 0xf6,
	0x15, 0x98, 0x98, 0x50, 0xe2, 0xa8, 0xb4, 0x82, 0x81, 0x8d, 0xe9, 0x72, 0xb9, 0xcf, 0xf9, 0xbe,
	0x67, 0x7f, 0xb1, 0x23, 0xd9, 0x5d, 0x28, 0x13, 0x6a, 0xc2, 0x4d, 0x0e, 0x90, 0x91, 0x5c, 0x82,
	0x06, 0x7b, 0x5b, 0x33, 0x91, 0x30, 0xd9, 0xe7, 0x42, 0x13, 0x95, 0x0b, 0x62, 0x88, 0xd6, 0x56,
	0x0a, 0x29, 0x94, 0x04, 0x2d, 0xbe, 0x0c, 0xdc, 0x72, 0x63, 0x50, 0x7d, 0x50, 0x34, 0x0a, 0x15,
	0xa3, 0xc3, 0x4e, 0xc4, 0x74, 0xd8, 0xa1, 0x31, 0x70, 0x61, 0xea, 0x7b, 0xef, 0x35, 0x8c, 0x83,
	0xf2, 0x80, 0x4b, 0x80, 0xcc, 0x6e, 0xe1, 0x66, 0x16, 0x0e, 0x44, 0xdc, 0xbb, 0x38, 0x73, 0x90,
	0x87, 0xfc, 0x7a, 0x30, 0xcf, 0x8b, 0x5a, 0x2e, 0x61, 0xc8, 0x13, 0x26, 0x9d, 0x7f, 0x1e, 0xf2,
	0x57, 0x83, 0x79, 0x6e, 0x3f, 0x21, 0xbc, 0xce, 0x05, 0xd7, 0x3c, 0xcc, 0x4e, 0x81, 0x0b, 0xe5,
	0xd4, 0xbc, 0x9a, 0xbf, 0x76, 0xbc, 0x4b, 0xcc, 0x78, 0x52, 0x8c, 0x27, 0xd5, 0x78, 0x52, 0x10,
	0xdd, 0xeb, 0xd1, 0xa4, 0x6d, 0x7d, 0x4c, 0xda, 0xfb, 0x29, 0xd7, 0xbd, 0x41, 0x44, 0x62, 0xe8,
	0xd3, 0x4a, 0xab, 0x09, 0x87, 0x2a, 0xb9, 0xa5, 0xfa, 0x21, 0x67, 0xaa, 0x6c, 0x78, 0x7e, 0x6d,
	0xfb, 0xbf, 0x44, 0x55, 0xb0, 0xa4, 0xa5, 0x14, 0x17, 0x0f, 0xa4, 0x64, 0x42, 0x1b, 0x71, 0xf5,
	0xbf, 0x15, 0xb7, 0xa8, 0xc5, 0x3e, 0xc0, 0x1b, 0x59, 0xa8, 0xb4, 0x79, 0x83, 0x73, 0xc6, 0xd3,
	0x9e, 0x76, 0xfe, 0x97, 0x37, 0xff, 0xed, 0xbf, 0x7d, 0x84, 0x37, 0xab, 0xde, 0x25, 0xbc, 0x51,
	0xe2, 0x3f, 0x95, 0xec, 0x1d, 0xdc, 0x88, 0x33, 0x50, 0x2c, 0x71, 0x56, 0x3c, 0xe4, 0x37, 0x83,
	0x2a, 0xeb, 0x76, 0x47, 0x53, 0x17, 0x8d, 0xa7, 0x2e, 0x7a, 0x9b, 0xba, 0xe8, 0x71, 0xe6, 0x5a,
	0xe3, 0x99, 0x6b, 0xbd, 0xcc, 0x5c, 0xeb, 0x6a, 0x71, 0x8f, 0x2f, 0xa3, 0x51, 0x95, 0x0b, 0x7a,
	0x5f, 0x99, 0xd1, 0x6c, 0x13, 0x35, 0x4a, 0x07, 0x9d, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd6,
	0xf1, 0x9f, 0xe0, 0xaa, 0x02, 0x00, 0x00,
}

func (m *RewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Closed {
		i--
		if m.Closed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CurrentRewardHeight != 0 {
		i = encodeVarintRewardPool(dAtA, i, uint64(m.CurrentRewardHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.LastRewardHeight != 0 {
		i = encodeVarintRewardPool(dAtA, i, uint64(m.LastRewardHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CurrentCoins) > 0 {
		for iNdEx := len(m.CurrentCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewardPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InitialCoins) > 0 {
		for iNdEx := len(m.InitialCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewardPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintRewardPool(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchID != 0 {
		i = encodeVarintRewardPool(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewardPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewardPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovRewardPool(uint64(m.LaunchID))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovRewardPool(uint64(l))
	}
	if len(m.InitialCoins) > 0 {
		for _, e := range m.InitialCoins {
			l = e.Size()
			n += 1 + l + sovRewardPool(uint64(l))
		}
	}
	if len(m.CurrentCoins) > 0 {
		for _, e := range m.CurrentCoins {
			l = e.Size()
			n += 1 + l + sovRewardPool(uint64(l))
		}
	}
	if m.LastRewardHeight != 0 {
		n += 1 + sovRewardPool(uint64(m.LastRewardHeight))
	}
	if m.CurrentRewardHeight != 0 {
		n += 1 + sovRewardPool(uint64(m.CurrentRewardHeight))
	}
	if m.Closed {
		n += 2
	}
	return n
}

func sovRewardPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewardPool(x uint64) (n int) {
	return sovRewardPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewardPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewardPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewardPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewardPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewardPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialCoins = append(m.InitialCoins, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.InitialCoins[len(m.InitialCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewardPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewardPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCoins = append(m.CurrentCoins, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.CurrentCoins[len(m.CurrentCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardHeight", wireType)
			}
			m.LastRewardHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRewardHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewardHeight", wireType)
			}
			m.CurrentRewardHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRewardHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Closed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRewardPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewardPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewardPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewardPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewardPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewardPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewardPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewardPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewardPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewardPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewardPool = fmt.Errorf("proto: unexpected end of group")
)
