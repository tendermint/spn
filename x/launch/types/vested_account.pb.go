// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: launch/vested_account.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestedAccount struct {
	ChainID         string                                   `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Address         string                                   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StartingBalance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=startingBalance,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"startingBalance"`
	VestingOptions  *types1.Any                              `protobuf:"bytes,4,opt,name=vestingOptions,proto3" json:"vestingOptions,omitempty"`
}

func (m *VestedAccount) Reset()         { *m = VestedAccount{} }
func (m *VestedAccount) String() string { return proto.CompactTextString(m) }
func (*VestedAccount) ProtoMessage()    {}
func (*VestedAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_80a0c7d22a81a581, []int{0}
}
func (m *VestedAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestedAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestedAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestedAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestedAccount.Merge(m, src)
}
func (m *VestedAccount) XXX_Size() int {
	return m.Size()
}
func (m *VestedAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_VestedAccount.DiscardUnknown(m)
}

var xxx_messageInfo_VestedAccount proto.InternalMessageInfo

func (m *VestedAccount) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *VestedAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VestedAccount) GetStartingBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.StartingBalance
	}
	return nil
}

func (m *VestedAccount) GetVestingOptions() *types1.Any {
	if m != nil {
		return m.VestingOptions
	}
	return nil
}

// DelayedVesting represents options for delayed vesting
// Delayed vesting is the type of vesting where all vesting coins are vested once end time is reached
type DelayedVesting struct {
	Vesting github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=vesting,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"vesting"`
	EndTime int64                                    `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *DelayedVesting) Reset()         { *m = DelayedVesting{} }
func (m *DelayedVesting) String() string { return proto.CompactTextString(m) }
func (*DelayedVesting) ProtoMessage()    {}
func (*DelayedVesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_80a0c7d22a81a581, []int{1}
}
func (m *DelayedVesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelayedVesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelayedVesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelayedVesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayedVesting.Merge(m, src)
}
func (m *DelayedVesting) XXX_Size() int {
	return m.Size()
}
func (m *DelayedVesting) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayedVesting.DiscardUnknown(m)
}

var xxx_messageInfo_DelayedVesting proto.InternalMessageInfo

func (m *DelayedVesting) GetVesting() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Vesting
	}
	return nil
}

func (m *DelayedVesting) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*VestedAccount)(nil), "tendermint.spn.launch.VestedAccount")
	proto.RegisterType((*DelayedVesting)(nil), "tendermint.spn.launch.DelayedVesting")
}

func init() { proto.RegisterFile("launch/vested_account.proto", fileDescriptor_80a0c7d22a81a581) }

var fileDescriptor_80a0c7d22a81a581 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0x15, 0xed, 0xa2, 0x46, 0xe5, 0xd6, 0x45, 0x05, 0x17, 0x50, 0x5d, 0x40, 0x36, 0xbc, 0x54,
	0x4b, 0x49, 0xc0, 0x5d, 0xbb, 0x58, 0xf5, 0xd2, 0xa9, 0x80, 0x50, 0x78, 0x68, 0x87, 0x82, 0xa6,
	0x58, 0x99, 0xa8, 0x74, 0x14, 0x44, 0xaa, 0xa8, 0xe6, 0xfe, 0x40, 0x80, 0x0c, 0xf9, 0x87, 0x4c,
	0xf9, 0x0c, 0x8f, 0x1e, 0x33, 0x39, 0x81, 0xfd, 0x17, 0x99, 0x02, 0x89, 0x52, 0x12, 0x78, 0xca,
	0x94, 0x89, 0x77, 0xf7, 0xde, 0xe1, 0x1d, 0xdf, 0x9d, 0xfd, 0x3e, 0xa1, 0x05, 0xb0, 0x35, 0xf9,
	0xcb, 0x95, 0xe6, 0xd1, 0x2f, 0xca, 0x98, 0x2c, 0x40, 0xe3, 0x2c, 0x97, 0x5a, 0x3a, 0x6f, 0x35,
	0x87, 0x88, 0xe7, 0xa9, 0x00, 0x8d, 0x55, 0x06, 0xd8, 0x70, 0x47, 0xef, 0x62, 0x29, 0xe3, 0x84,
	0x93, 0x9a, 0xb4, 0x2a, 0x7e, 0x13, 0x0a, 0xa5, 0xe9, 0x18, 0x0d, 0x63, 0x19, 0xcb, 0x3a, 0x24,
	0x55, 0xd4, 0x54, 0xdf, 0x30, 0xa9, 0x52, 0xa9, 0x08, 0x93, 0x02, 0x4c, 0x69, 0x7a, 0xd6, 0xb1,
	0x5f, 0x2d, 0x6b, 0xcd, 0xb9, 0x91, 0x74, 0x5c, 0xbb, 0xc7, 0xd6, 0x54, 0xc0, 0xd7, 0x85, 0x8b,
	0x26, 0xc8, 0x7f, 0x11, 0xb6, 0x69, 0x85, 0xd0, 0x28, 0xca, 0xb9, 0x52, 0x6e, 0xc7, 0x20, 0x4d,
	0xea, 0x9c, 0x22, 0xfb, 0xb5, 0xd2, 0x34, 0xd7, 0x02, 0xe2, 0x80, 0x26, 0x14, 0x18, 0x77, 0xbb,
	0x93, 0xae, 0xdf, 0x9f, 0xbd, 0xc4, 0x46, 0x13, 0x7f, 0x91, 0x02, 0x82, 0x9f, 0x9b, 0xdd, 0xd8,
	0xba, 0xd9, 0x8d, 0x3f, 0xc4, 0x42, 0xaf, 0x8b, 0x15, 0x66, 0x32, 0x25, 0x77, 0x33, 0x55, 0xcf,
	0x47, 0x15, 0xfd, 0x21, 0xba, 0xcc, 0xb8, 0x69, 0x38, 0xbf, 0x1a, 0xfb, 0x8f, 0xa4, 0xaa, 0xf0,
	0x78, 0x02, 0xe7, 0xb3, 0x3d, 0xa8, 0xec, 0x14, 0x10, 0x7f, 0xcb, 0xb4, 0x90, 0xa0, 0xdc, 0x67,
	0x13, 0xe4, 0xf7, 0x67, 0x43, 0x6c, 0x8c, 0xc3, 0xad, 0x71, 0x78, 0x0e, 0x65, 0x78, 0xc4, 0x9d,
	0x5e, 0x20, 0x7b, 0xb0, 0xe0, 0x09, 0x2d, 0x79, 0xb4, 0x34, 0x88, 0xf3, 0x1f, 0xd9, 0xbd, 0x86,
	0xf5, 0xf4, 0xdf, 0x6b, 0x95, 0xab, 0x35, 0x70, 0x88, 0xbe, 0x8b, 0x94, 0xd7, 0x0b, 0xea, 0x86,
	0x6d, 0x1a, 0x04, 0x9b, 0xbd, 0x87, 0xb6, 0x7b, 0x0f, 0x5d, 0xef, 0x3d, 0x74, 0x72, 0xf0, 0xac,
	0xed, 0xc1, 0xb3, 0x2e, 0x0f, 0x9e, 0xf5, 0xe3, 0xa1, 0xcc, 0xfd, 0x31, 0x11, 0x95, 0x01, 0xf9,
	0x47, 0x9a, 0xd3, 0xab, 0xc5, 0x56, 0xcf, 0x6b, 0x53, 0x3e, 0xdd, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x3d, 0xa7, 0x27, 0x93, 0x91, 0x02, 0x00, 0x00,
}

func (m *VestedAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestedAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestedAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingOptions != nil {
		{
			size, err := m.VestingOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVestedAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartingBalance) > 0 {
		for iNdEx := len(m.StartingBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StartingBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestedAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVestedAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintVestedAccount(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelayedVesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelayedVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelayedVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vesting) > 0 {
		for iNdEx := len(m.Vesting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vesting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestedAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EndTime != 0 {
		i = encodeVarintVestedAccount(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestedAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestedAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestedAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovVestedAccount(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVestedAccount(uint64(l))
	}
	if len(m.StartingBalance) > 0 {
		for _, e := range m.StartingBalance {
			l = e.Size()
			n += 1 + l + sovVestedAccount(uint64(l))
		}
	}
	if m.VestingOptions != nil {
		l = m.VestingOptions.Size()
		n += 1 + l + sovVestedAccount(uint64(l))
	}
	return n
}

func (m *DelayedVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovVestedAccount(uint64(m.EndTime))
	}
	if len(m.Vesting) > 0 {
		for _, e := range m.Vesting {
			l = e.Size()
			n += 1 + l + sovVestedAccount(uint64(l))
		}
	}
	return n
}

func sovVestedAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestedAccount(x uint64) (n int) {
	return sovVestedAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestedAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestedAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestedAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestedAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestedAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestedAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestedAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartingBalance = append(m.StartingBalance, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.StartingBalance[len(m.StartingBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestedAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VestingOptions == nil {
				m.VestingOptions = &types1.Any{}
			}
			if err := m.VestingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestedAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelayedVesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestedAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelayedVesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelayedVesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestedAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vesting = append(m.Vesting, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Vesting[len(m.Vesting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestedAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestedAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestedAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestedAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestedAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestedAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestedAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestedAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestedAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestedAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestedAccount = fmt.Errorf("proto: unexpected end of group")
)
