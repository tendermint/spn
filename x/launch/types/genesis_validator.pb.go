// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: launch/genesis_validator.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisValidator struct {
	LaunchID       uint64     `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Address        string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	GenTx          []byte     `protobuf:"bytes,3,opt,name=genTx,proto3" json:"genTx,omitempty"`
	ConsPubKey     []byte     `protobuf:"bytes,4,opt,name=consPubKey,proto3" json:"consPubKey,omitempty"`
	SelfDelegation types.Coin `protobuf:"bytes,5,opt,name=selfDelegation,proto3" json:"selfDelegation"`
	Peer           string     `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *GenesisValidator) Reset()         { *m = GenesisValidator{} }
func (m *GenesisValidator) String() string { return proto.CompactTextString(m) }
func (*GenesisValidator) ProtoMessage()    {}
func (*GenesisValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7a6c7c23ebd0c1, []int{0}
}
func (m *GenesisValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisValidator.Merge(m, src)
}
func (m *GenesisValidator) XXX_Size() int {
	return m.Size()
}
func (m *GenesisValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisValidator.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisValidator proto.InternalMessageInfo

func (m *GenesisValidator) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func (m *GenesisValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GenesisValidator) GetGenTx() []byte {
	if m != nil {
		return m.GenTx
	}
	return nil
}

func (m *GenesisValidator) GetConsPubKey() []byte {
	if m != nil {
		return m.ConsPubKey
	}
	return nil
}

func (m *GenesisValidator) GetSelfDelegation() types.Coin {
	if m != nil {
		return m.SelfDelegation
	}
	return types.Coin{}
}

func (m *GenesisValidator) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisValidator)(nil), "tendermint.spn.launch.GenesisValidator")
}

func init() { proto.RegisterFile("launch/genesis_validator.proto", fileDescriptor_da7a6c7c23ebd0c1) }

var fileDescriptor_da7a6c7c23ebd0c1 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x1b, 0xed, 0xa6, 0x46, 0x11, 0x09, 0x13, 0xe2, 0x0e, 0xb1, 0x78, 0xea, 0x29, 0x61,
	0xfa, 0x06, 0x73, 0x30, 0xc4, 0x8b, 0x14, 0xf1, 0xe0, 0x45, 0xd2, 0xf6, 0x6f, 0x17, 0xe8, 0x92,
	0xd2, 0x64, 0x63, 0x7b, 0x0b, 0x1f, 0x6b, 0xc7, 0x1d, 0x05, 0x41, 0x64, 0x7b, 0x11, 0x59, 0xb3,
	0xa9, 0x78, 0xfb, 0x7f, 0xf9, 0x7f, 0xc9, 0xf7, 0xe3, 0x0b, 0x66, 0xa5, 0x9c, 0xe8, 0x6c, 0x24,
	0x0a, 0xd0, 0x60, 0x95, 0x7d, 0x99, 0xca, 0x52, 0xe5, 0xd2, 0x99, 0x9a, 0x57, 0xb5, 0x71, 0x86,
	0x9c, 0x3b, 0xd0, 0x39, 0xd4, 0x63, 0xa5, 0x1d, 0xb7, 0x95, 0xe6, 0xde, 0xde, 0xed, 0x14, 0xa6,
	0x30, 0x8d, 0x43, 0x6c, 0x26, 0x6f, 0xee, 0xb2, 0xcc, 0xd8, 0xb1, 0xb1, 0x22, 0x95, 0x16, 0xc4,
	0xb4, 0x97, 0x82, 0x93, 0x3d, 0x91, 0x19, 0xa5, 0xfd, 0xfe, 0xea, 0x03, 0xe1, 0xb3, 0xa1, 0x0f,
	0x7a, 0xda, 0xe5, 0x90, 0x2e, 0x3e, 0xf4, 0x8f, 0xde, 0x0d, 0x28, 0x8a, 0x50, 0x1c, 0x26, 0x3f,
	0x9a, 0x50, 0x7c, 0x20, 0xf3, 0xbc, 0x06, 0x6b, 0xe9, 0x5e, 0x84, 0xe2, 0xa3, 0x64, 0x27, 0x49,
	0x07, 0xb7, 0x0a, 0xd0, 0x8f, 0x33, 0xba, 0x1f, 0xa1, 0xf8, 0x24, 0xf1, 0x82, 0x30, 0x8c, 0x33,
	0xa3, 0xed, 0xc3, 0x24, 0xbd, 0x87, 0x39, 0x0d, 0x9b, 0xd5, 0x9f, 0x13, 0x32, 0xc4, 0xa7, 0x16,
	0xca, 0xd7, 0x01, 0x94, 0x50, 0x48, 0xa7, 0x8c, 0xa6, 0xad, 0x08, 0xc5, 0xc7, 0xd7, 0x17, 0xdc,
	0x93, 0xf3, 0x0d, 0x39, 0xdf, 0x92, 0xf3, 0x5b, 0xa3, 0x74, 0x3f, 0x5c, 0x7c, 0x5e, 0x06, 0xc9,
	0xbf, 0x6b, 0x84, 0xe0, 0xb0, 0x02, 0xa8, 0x69, 0xbb, 0xa1, 0x6a, 0xe6, 0x7e, 0x7f, 0xb1, 0x62,
	0x68, 0xb9, 0x62, 0xe8, 0x6b, 0xc5, 0xd0, 0xdb, 0x9a, 0x05, 0xcb, 0x35, 0x0b, 0xde, 0xd7, 0x2c,
	0x78, 0x8e, 0x0b, 0xe5, 0x46, 0x93, 0x94, 0x67, 0x66, 0x2c, 0x7e, 0xfb, 0x14, 0xb6, 0xd2, 0x62,
	0x26, 0xb6, 0x1f, 0xe0, 0xe6, 0x15, 0xd8, 0xb4, 0xdd, 0x14, 0x75, 0xf3, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x9d, 0xa7, 0xbb, 0x5d, 0x97, 0x01, 0x00, 0x00,
}

func (m *GenesisValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintGenesisValidator(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.SelfDelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesisValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ConsPubKey) > 0 {
		i -= len(m.ConsPubKey)
		copy(dAtA[i:], m.ConsPubKey)
		i = encodeVarintGenesisValidator(dAtA, i, uint64(len(m.ConsPubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GenTx) > 0 {
		i -= len(m.GenTx)
		copy(dAtA[i:], m.GenTx)
		i = encodeVarintGenesisValidator(dAtA, i, uint64(len(m.GenTx)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesisValidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchID != 0 {
		i = encodeVarintGenesisValidator(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesisValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesisValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovGenesisValidator(uint64(m.LaunchID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesisValidator(uint64(l))
	}
	l = len(m.GenTx)
	if l > 0 {
		n += 1 + l + sovGenesisValidator(uint64(l))
	}
	l = len(m.ConsPubKey)
	if l > 0 {
		n += 1 + l + sovGenesisValidator(uint64(l))
	}
	l = m.SelfDelegation.Size()
	n += 1 + l + sovGenesisValidator(uint64(l))
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovGenesisValidator(uint64(l))
	}
	return n
}

func sovGenesisValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesisValidator(x uint64) (n int) {
	return sovGenesisValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesisValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTx = append(m.GenTx[:0], dAtA[iNdEx:postIndex]...)
			if m.GenTx == nil {
				m.GenTx = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsPubKey = append(m.ConsPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsPubKey == nil {
				m.ConsPubKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesisValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesisValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesisValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesisValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesisValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesisValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesisValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesisValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesisValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesisValidator = fmt.Errorf("proto: unexpected end of group")
)
