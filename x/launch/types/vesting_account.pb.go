// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spn/launch/vesting_account.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestingAccount struct {
	LaunchID       uint64         `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Address        string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	VestingOptions VestingOptions `protobuf:"bytes,3,opt,name=vestingOptions,proto3" json:"vestingOptions"`
}

func (m *VestingAccount) Reset()         { *m = VestingAccount{} }
func (m *VestingAccount) String() string { return proto.CompactTextString(m) }
func (*VestingAccount) ProtoMessage()    {}
func (*VestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19ff708781896c, []int{0}
}
func (m *VestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingAccount.Merge(m, src)
}
func (m *VestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *VestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_VestingAccount proto.InternalMessageInfo

func (m *VestingAccount) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func (m *VestingAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VestingAccount) GetVestingOptions() VestingOptions {
	if m != nil {
		return m.VestingOptions
	}
	return VestingOptions{}
}

type VestingOptions struct {
	// Types that are valid to be assigned to Options:
	//
	//	*VestingOptions_DelayedVesting
	Options isVestingOptions_Options `protobuf_oneof:"options"`
}

func (m *VestingOptions) Reset()         { *m = VestingOptions{} }
func (m *VestingOptions) String() string { return proto.CompactTextString(m) }
func (*VestingOptions) ProtoMessage()    {}
func (*VestingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19ff708781896c, []int{1}
}
func (m *VestingOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingOptions.Merge(m, src)
}
func (m *VestingOptions) XXX_Size() int {
	return m.Size()
}
func (m *VestingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VestingOptions proto.InternalMessageInfo

type isVestingOptions_Options interface {
	isVestingOptions_Options()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VestingOptions_DelayedVesting struct {
	DelayedVesting *DelayedVesting `protobuf:"bytes,1,opt,name=delayedVesting,proto3,oneof" json:"delayedVesting,omitempty"`
}

func (*VestingOptions_DelayedVesting) isVestingOptions_Options() {}

func (m *VestingOptions) GetOptions() isVestingOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *VestingOptions) GetDelayedVesting() *DelayedVesting {
	if x, ok := m.GetOptions().(*VestingOptions_DelayedVesting); ok {
		return x.DelayedVesting
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VestingOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VestingOptions_DelayedVesting)(nil),
	}
}

// DelayedVesting represents options for delayed vesting
// Delayed vesting is the type of vesting where all vesting coins are vested
// once end time is reached
type DelayedVesting struct {
	TotalBalance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=totalBalance,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"totalBalance"`
	Vesting      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=vesting,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"vesting"`
	EndTime      time.Time                                `protobuf:"bytes,3,opt,name=endTime,proto3,stdtime" json:"endTime"`
}

func (m *DelayedVesting) Reset()         { *m = DelayedVesting{} }
func (m *DelayedVesting) String() string { return proto.CompactTextString(m) }
func (*DelayedVesting) ProtoMessage()    {}
func (*DelayedVesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19ff708781896c, []int{2}
}
func (m *DelayedVesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelayedVesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelayedVesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelayedVesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayedVesting.Merge(m, src)
}
func (m *DelayedVesting) XXX_Size() int {
	return m.Size()
}
func (m *DelayedVesting) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayedVesting.DiscardUnknown(m)
}

var xxx_messageInfo_DelayedVesting proto.InternalMessageInfo

func (m *DelayedVesting) GetTotalBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalBalance
	}
	return nil
}

func (m *DelayedVesting) GetVesting() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Vesting
	}
	return nil
}

func (m *DelayedVesting) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*VestingAccount)(nil), "spn.launch.VestingAccount")
	proto.RegisterType((*VestingOptions)(nil), "spn.launch.VestingOptions")
	proto.RegisterType((*DelayedVesting)(nil), "spn.launch.DelayedVesting")
}

func init() { proto.RegisterFile("spn/launch/vesting_account.proto", fileDescriptor_db19ff708781896c) }

var fileDescriptor_db19ff708781896c = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0xe3, 0x5e, 0xc5, 0xb5, 0x2e, 0xba, 0xc1, 0xea, 0x90, 0xde, 0x90, 0x44, 0x5d, 0xc8,
	0x52, 0x5b, 0x3d, 0x76, 0xa4, 0x9a, 0x1b, 0xca, 0x84, 0x14, 0xaa, 0x0e, 0x30, 0x54, 0x4e, 0x62,
	0x52, 0x8b, 0xc4, 0x8e, 0xce, 0x4e, 0x45, 0x37, 0x3e, 0xc2, 0xcd, 0x7c, 0x84, 0xce, 0x7c, 0x88,
	0x8e, 0x15, 0x13, 0x53, 0x8b, 0xee, 0xbe, 0x05, 0x13, 0x4a, 0xec, 0x1c, 0xe4, 0x26, 0x36, 0xa6,
	0xe4, 0xf9, 0xfd, 0xff, 0x79, 0xbf, 0x97, 0xf7, 0x0c, 0x23, 0x5d, 0x4b, 0x52, 0xb2, 0x46, 0x66,
	0xd7, 0xe4, 0x86, 0x6b, 0x23, 0x64, 0x71, 0xc5, 0xb2, 0x4c, 0x35, 0xd2, 0xe0, 0x7a, 0xa1, 0x8c,
	0x42, 0x50, 0xd7, 0x12, 0x5b, 0xc5, 0xf4, 0xb0, 0x50, 0x85, 0xea, 0x8e, 0x49, 0xfb, 0x66, 0x15,
	0xd3, 0x20, 0x53, 0xba, 0x52, 0x9a, 0xa4, 0x4c, 0x73, 0x72, 0x73, 0x9a, 0x72, 0xc3, 0x4e, 0x49,
	0xa6, 0x84, 0x74, 0xf9, 0x23, 0x9b, 0xbf, 0xb2, 0x46, 0x1b, 0xb8, 0x54, 0x58, 0x28, 0x55, 0x94,
	0x9c, 0x74, 0x51, 0xda, 0x7c, 0x24, 0x46, 0x54, 0x5c, 0x1b, 0x56, 0xd5, 0x56, 0x70, 0x7c, 0x07,
	0xe0, 0xe4, 0xd2, 0x72, 0x9d, 0x59, 0x2c, 0x34, 0x85, 0x7b, 0x16, 0xe7, 0xcd, 0xdc, 0x07, 0x11,
	0x88, 0x77, 0x93, 0x4d, 0x8c, 0x66, 0x70, 0xcc, 0xf2, 0x7c, 0xc1, 0xb5, 0xf6, 0x77, 0x22, 0x10,
	0xef, 0x53, 0xff, 0xfb, 0xb7, 0x93, 0x43, 0x57, 0xf2, 0xcc, 0x66, 0xde, 0x99, 0x85, 0x90, 0x45,
	0xd2, 0x0b, 0xd1, 0x39, 0x9c, 0xb8, 0xce, 0xdf, 0xd6, 0x46, 0x28, 0xa9, 0xfd, 0x51, 0x04, 0xe2,
	0x83, 0xd9, 0x14, 0xff, 0xe9, 0x1c, 0x5f, 0x0e, 0x14, 0x74, 0xf7, 0xfe, 0x31, 0xf4, 0x92, 0x2d,
	0xdf, 0x31, 0xdb, 0xb0, 0xba, 0x13, 0x34, 0x87, 0x93, 0x9c, 0x97, 0xec, 0x96, 0xe7, 0x2e, 0xd1,
	0x11, 0x6f, 0x7d, 0x7b, 0x3e, 0x50, 0x9c, 0x7b, 0xc9, 0x96, 0x87, 0xee, 0xc3, 0xb1, 0x72, 0x25,
	0xbe, 0x8c, 0xe0, 0x64, 0xa8, 0x47, 0x5f, 0x01, 0x7c, 0x6e, 0x94, 0x61, 0x25, 0x65, 0x25, 0x93,
	0x19, 0xf7, 0x41, 0x34, 0x8a, 0x0f, 0x66, 0x47, 0xd8, 0xb5, 0xdd, 0x8e, 0x05, 0xbb, 0xb1, 0xe0,
	0xd7, 0x4a, 0x48, 0xfa, 0xa1, 0xa5, 0xff, 0xf5, 0x18, 0xbe, 0x28, 0x84, 0xb9, 0x6e, 0x52, 0x9c,
	0xa9, 0xca, 0x8d, 0xc5, 0x3d, 0x4e, 0x74, 0xfe, 0x89, 0x98, 0xdb, 0x9a, 0xeb, 0xce, 0x70, 0xf7,
	0x14, 0xc6, 0xff, 0x28, 0xd5, 0xc9, 0x80, 0x05, 0x2d, 0x01, 0x1c, 0xbb, 0xbf, 0xe4, 0xef, 0xfc,
	0x57, 0xae, 0x1e, 0x03, 0xbd, 0x82, 0x63, 0x2e, 0xf3, 0x0b, 0x51, 0xf1, 0xcd, 0xa0, 0xed, 0x16,
	0xe2, 0x7e, 0x0b, 0xf1, 0x45, 0xbf, 0x85, 0x74, 0xaf, 0x45, 0x5a, 0x3e, 0x85, 0x20, 0xe9, 0x4d,
	0x94, 0xde, 0xaf, 0x02, 0xf0, 0xb0, 0x0a, 0xc0, 0xcf, 0x55, 0x00, 0x96, 0xeb, 0xc0, 0x7b, 0x58,
	0x07, 0xde, 0x8f, 0x75, 0xe0, 0xbd, 0xff, 0x1b, 0xc6, 0x70, 0x99, 0xf3, 0x45, 0x25, 0xa4, 0x21,
	0xed, 0x15, 0xfb, 0xdc, 0x5f, 0xb2, 0x0e, 0x29, 0x7d, 0xd6, 0x95, 0x7a, 0xf9, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x52, 0x5f, 0x8e, 0xbc, 0x7f, 0x03, 0x00, 0x00,
}

func (m *VestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VestingOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVestingAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVestingAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchID != 0 {
		i = encodeVarintVestingAccount(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VestingOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VestingOptions_DelayedVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingOptions_DelayedVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DelayedVesting != nil {
		{
			size, err := m.DelayedVesting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVestingAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DelayedVesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelayedVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelayedVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintVestingAccount(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if len(m.Vesting) > 0 {
		for iNdEx := len(m.Vesting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vesting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TotalBalance) > 0 {
		for iNdEx := len(m.TotalBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovVestingAccount(uint64(m.LaunchID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVestingAccount(uint64(l))
	}
	l = m.VestingOptions.Size()
	n += 1 + l + sovVestingAccount(uint64(l))
	return n
}

func (m *VestingOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *VestingOptions_DelayedVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelayedVesting != nil {
		l = m.DelayedVesting.Size()
		n += 1 + l + sovVestingAccount(uint64(l))
	}
	return n
}
func (m *DelayedVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalBalance) > 0 {
		for _, e := range m.TotalBalance {
			l = e.Size()
			n += 1 + l + sovVestingAccount(uint64(l))
		}
	}
	if len(m.Vesting) > 0 {
		for _, e := range m.Vesting {
			l = e.Size()
			n += 1 + l + sovVestingAccount(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovVestingAccount(uint64(l))
	return n
}

func sovVestingAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingAccount(x uint64) (n int) {
	return sovVestingAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedVesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DelayedVesting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &VestingOptions_DelayedVesting{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelayedVesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelayedVesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelayedVesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBalance = append(m.TotalBalance, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.TotalBalance[len(m.TotalBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vesting = append(m.Vesting, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Vesting[len(m.Vesting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingAccount = fmt.Errorf("proto: unexpected end of group")
)
