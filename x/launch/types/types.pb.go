// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: launch/v1beta/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalType int32

const (
	ProposalType_ANY_TYPE      ProposalType = 0
	ProposalType_ADD_ACCOUNT   ProposalType = 1
	ProposalType_ADD_VALIDATOR ProposalType = 2
)

var ProposalType_name = map[int32]string{
	0: "ANY_TYPE",
	1: "ADD_ACCOUNT",
	2: "ADD_VALIDATOR",
}

var ProposalType_value = map[string]int32{
	"ANY_TYPE":      0,
	"ADD_ACCOUNT":   1,
	"ADD_VALIDATOR": 2,
}

func (x ProposalType) String() string {
	return proto.EnumName(ProposalType_name, int32(x))
}

func (ProposalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{0}
}

type ProposalStatus int32

const (
	ProposalStatus_ANY_STATUS ProposalStatus = 0
	ProposalStatus_APPROVED   ProposalStatus = 1
	ProposalStatus_PENDING    ProposalStatus = 2
	ProposalStatus_REJECTED   ProposalStatus = 3
)

var ProposalStatus_name = map[int32]string{
	0: "ANY_STATUS",
	1: "APPROVED",
	2: "PENDING",
	3: "REJECTED",
}

var ProposalStatus_value = map[string]int32{
	"ANY_STATUS": 0,
	"APPROVED":   1,
	"PENDING":    2,
	"REJECTED":   3,
}

func (x ProposalStatus) String() string {
	return proto.EnumName(ProposalStatus_name, int32(x))
}

func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{1}
}

type Chain struct {
	ChainID    string   `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Creator    string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Peers      []string `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	SourceURL  string   `protobuf:"bytes,4,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	SourceHash string   `protobuf:"bytes,5,opt,name=sourceHash,proto3" json:"sourceHash,omitempty"`
	CreatedAt  int64    `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Final      bool     `protobuf:"varint,7,opt,name=final,proto3" json:"final,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *Chain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Chain) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Chain) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *Chain) GetSourceHash() string {
	if m != nil {
		return m.SourceHash
	}
	return ""
}

func (m *Chain) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Chain) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

type LaunchInformation struct {
	Accounts []*ProposalAddAccountPayload `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	GenTxs   [][]byte                     `protobuf:"bytes,3,rep,name=genTxs,proto3" json:"genTxs,omitempty"`
	Peers    []string                     `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *LaunchInformation) Reset()         { *m = LaunchInformation{} }
func (m *LaunchInformation) String() string { return proto.CompactTextString(m) }
func (*LaunchInformation) ProtoMessage()    {}
func (*LaunchInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{1}
}
func (m *LaunchInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LaunchInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LaunchInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LaunchInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchInformation.Merge(m, src)
}
func (m *LaunchInformation) XXX_Size() int {
	return m.Size()
}
func (m *LaunchInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchInformation.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchInformation proto.InternalMessageInfo

func (m *LaunchInformation) GetAccounts() []*ProposalAddAccountPayload {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *LaunchInformation) GetGenTxs() [][]byte {
	if m != nil {
		return m.GenTxs
	}
	return nil
}

func (m *LaunchInformation) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Proposal struct {
	ProposalInformation *ProposalInformation `protobuf:"bytes,1,opt,name=proposalInformation,proto3" json:"proposalInformation,omitempty"`
	ProposalState       *ProposalState       `protobuf:"bytes,2,opt,name=proposalState,proto3" json:"proposalState,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Proposal_ChangePayload
	//	*Proposal_AddAccountPayload
	//	*Proposal_AddValidatorPayload
	Payload isProposal_Payload `protobuf_oneof:"payload"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{2}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

type isProposal_Payload interface {
	isProposal_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Proposal_ChangePayload struct {
	ChangePayload *ProposalChangePayload `protobuf:"bytes,3,opt,name=changePayload,proto3,oneof" json:"changePayload,omitempty"`
}
type Proposal_AddAccountPayload struct {
	AddAccountPayload *ProposalAddAccountPayload `protobuf:"bytes,4,opt,name=addAccountPayload,proto3,oneof" json:"addAccountPayload,omitempty"`
}
type Proposal_AddValidatorPayload struct {
	AddValidatorPayload *ProposalAddValidatorPayload `protobuf:"bytes,5,opt,name=addValidatorPayload,proto3,oneof" json:"addValidatorPayload,omitempty"`
}

func (*Proposal_ChangePayload) isProposal_Payload()       {}
func (*Proposal_AddAccountPayload) isProposal_Payload()   {}
func (*Proposal_AddValidatorPayload) isProposal_Payload() {}

func (m *Proposal) GetPayload() isProposal_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Proposal) GetProposalInformation() *ProposalInformation {
	if m != nil {
		return m.ProposalInformation
	}
	return nil
}

func (m *Proposal) GetProposalState() *ProposalState {
	if m != nil {
		return m.ProposalState
	}
	return nil
}

func (m *Proposal) GetChangePayload() *ProposalChangePayload {
	if x, ok := m.GetPayload().(*Proposal_ChangePayload); ok {
		return x.ChangePayload
	}
	return nil
}

func (m *Proposal) GetAddAccountPayload() *ProposalAddAccountPayload {
	if x, ok := m.GetPayload().(*Proposal_AddAccountPayload); ok {
		return x.AddAccountPayload
	}
	return nil
}

func (m *Proposal) GetAddValidatorPayload() *ProposalAddValidatorPayload {
	if x, ok := m.GetPayload().(*Proposal_AddValidatorPayload); ok {
		return x.AddValidatorPayload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Proposal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Proposal_ChangePayload)(nil),
		(*Proposal_AddAccountPayload)(nil),
		(*Proposal_AddValidatorPayload)(nil),
	}
}

type ProposalInformation struct {
	ChainID    string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	ProposalID int32  `protobuf:"varint,2,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
	Creator    string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt  int64  `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *ProposalInformation) Reset()         { *m = ProposalInformation{} }
func (m *ProposalInformation) String() string { return proto.CompactTextString(m) }
func (*ProposalInformation) ProtoMessage()    {}
func (*ProposalInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{3}
}
func (m *ProposalInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInformation.Merge(m, src)
}
func (m *ProposalInformation) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInformation.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInformation proto.InternalMessageInfo

func (m *ProposalInformation) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ProposalInformation) GetProposalID() int32 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *ProposalInformation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ProposalInformation) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ProposalState struct {
	Status ProposalStatus `protobuf:"varint,1,opt,name=status,proto3,enum=spn.launch.v1beta1.ProposalStatus" json:"status,omitempty"`
}

func (m *ProposalState) Reset()         { *m = ProposalState{} }
func (m *ProposalState) String() string { return proto.CompactTextString(m) }
func (*ProposalState) ProtoMessage()    {}
func (*ProposalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{4}
}
func (m *ProposalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState.Merge(m, src)
}
func (m *ProposalState) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState proto.InternalMessageInfo

func (m *ProposalState) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus_ANY_STATUS
}

type ProposalList struct {
	ProposalIDs []int32 `protobuf:"varint,1,rep,packed,name=proposalIDs,proto3" json:"proposalIDs,omitempty"`
}

func (m *ProposalList) Reset()         { *m = ProposalList{} }
func (m *ProposalList) String() string { return proto.CompactTextString(m) }
func (*ProposalList) ProtoMessage()    {}
func (*ProposalList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{5}
}
func (m *ProposalList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalList.Merge(m, src)
}
func (m *ProposalList) XXX_Size() int {
	return m.Size()
}
func (m *ProposalList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalList.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalList proto.InternalMessageInfo

func (m *ProposalList) GetProposalIDs() []int32 {
	if m != nil {
		return m.ProposalIDs
	}
	return nil
}

type ProposalChangePayload struct {
	ChangePath []string `protobuf:"bytes,1,rep,name=changePath,proto3" json:"changePath,omitempty"`
	NewValue   string   `protobuf:"bytes,2,opt,name=newValue,proto3" json:"newValue,omitempty"`
}

func (m *ProposalChangePayload) Reset()         { *m = ProposalChangePayload{} }
func (m *ProposalChangePayload) String() string { return proto.CompactTextString(m) }
func (*ProposalChangePayload) ProtoMessage()    {}
func (*ProposalChangePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{6}
}
func (m *ProposalChangePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalChangePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalChangePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalChangePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalChangePayload.Merge(m, src)
}
func (m *ProposalChangePayload) XXX_Size() int {
	return m.Size()
}
func (m *ProposalChangePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalChangePayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalChangePayload proto.InternalMessageInfo

func (m *ProposalChangePayload) GetChangePath() []string {
	if m != nil {
		return m.ChangePath
	}
	return nil
}

func (m *ProposalChangePayload) GetNewValue() string {
	if m != nil {
		return m.NewValue
	}
	return ""
}

type ProposalAddAccountPayload struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Coins   github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,2,rep,name=coins,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *ProposalAddAccountPayload) Reset()         { *m = ProposalAddAccountPayload{} }
func (m *ProposalAddAccountPayload) String() string { return proto.CompactTextString(m) }
func (*ProposalAddAccountPayload) ProtoMessage()    {}
func (*ProposalAddAccountPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{7}
}
func (m *ProposalAddAccountPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddAccountPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddAccountPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddAccountPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddAccountPayload.Merge(m, src)
}
func (m *ProposalAddAccountPayload) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddAccountPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddAccountPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddAccountPayload proto.InternalMessageInfo

func (m *ProposalAddAccountPayload) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ProposalAddAccountPayload) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type ProposalAddValidatorPayload struct {
	GenTx            []byte                                        `protobuf:"bytes,1,opt,name=genTx,proto3" json:"genTx,omitempty"`
	ValidatorAddress github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,2,opt,name=validatorAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validatorAddress,omitempty"`
	SelfDelegation   *types.Coin                                   `protobuf:"bytes,3,opt,name=selfDelegation,proto3" json:"selfDelegation,omitempty"`
	Peer             string                                        `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *ProposalAddValidatorPayload) Reset()         { *m = ProposalAddValidatorPayload{} }
func (m *ProposalAddValidatorPayload) String() string { return proto.CompactTextString(m) }
func (*ProposalAddValidatorPayload) ProtoMessage()    {}
func (*ProposalAddValidatorPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71a209f7c748440, []int{8}
}
func (m *ProposalAddValidatorPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddValidatorPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddValidatorPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddValidatorPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddValidatorPayload.Merge(m, src)
}
func (m *ProposalAddValidatorPayload) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddValidatorPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddValidatorPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddValidatorPayload proto.InternalMessageInfo

func (m *ProposalAddValidatorPayload) GetGenTx() []byte {
	if m != nil {
		return m.GenTx
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetValidatorAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetSelfDelegation() *types.Coin {
	if m != nil {
		return m.SelfDelegation
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func init() {
	proto.RegisterEnum("spn.launch.v1beta1.ProposalType", ProposalType_name, ProposalType_value)
	proto.RegisterEnum("spn.launch.v1beta1.ProposalStatus", ProposalStatus_name, ProposalStatus_value)
	proto.RegisterType((*Chain)(nil), "spn.launch.v1beta1.Chain")
	proto.RegisterType((*LaunchInformation)(nil), "spn.launch.v1beta1.LaunchInformation")
	proto.RegisterType((*Proposal)(nil), "spn.launch.v1beta1.Proposal")
	proto.RegisterType((*ProposalInformation)(nil), "spn.launch.v1beta1.ProposalInformation")
	proto.RegisterType((*ProposalState)(nil), "spn.launch.v1beta1.ProposalState")
	proto.RegisterType((*ProposalList)(nil), "spn.launch.v1beta1.ProposalList")
	proto.RegisterType((*ProposalChangePayload)(nil), "spn.launch.v1beta1.ProposalChangePayload")
	proto.RegisterType((*ProposalAddAccountPayload)(nil), "spn.launch.v1beta1.ProposalAddAccountPayload")
	proto.RegisterType((*ProposalAddValidatorPayload)(nil), "spn.launch.v1beta1.ProposalAddValidatorPayload")
}

func init() { proto.RegisterFile("launch/v1beta/types.proto", fileDescriptor_b71a209f7c748440) }

var fileDescriptor_b71a209f7c748440 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x4f, 0xe3, 0x46,
	0x14, 0xb7, 0x31, 0x21, 0xc9, 0x0b, 0xd0, 0x30, 0x6c, 0x2b, 0x43, 0x2b, 0x93, 0xfa, 0xb2, 0xe9,
	0x4a, 0xc4, 0x85, 0xde, 0x7a, 0xaa, 0x13, 0x47, 0x4b, 0xba, 0x08, 0xd2, 0x21, 0x44, 0xa2, 0xd5,
	0x6a, 0x35, 0xd8, 0x43, 0x62, 0xd5, 0x78, 0x2c, 0x8f, 0xb3, 0x5d, 0x3e, 0x41, 0x2f, 0x7b, 0xe8,
	0xe7, 0xe8, 0xd7, 0xe8, 0x65, 0x8f, 0x1c, 0x7b, 0xa2, 0x15, 0x9c, 0xfa, 0x09, 0x2a, 0xed, 0xa9,
	0xf2, 0x8c, 0x4d, 0x1c, 0x60, 0xb3, 0xf4, 0xe4, 0x79, 0xef, 0xcd, 0xef, 0x37, 0xf3, 0xfe, 0xcc,
	0xcf, 0xb0, 0x11, 0x90, 0x49, 0xe8, 0x8e, 0xad, 0xd7, 0x3b, 0xa7, 0x34, 0x21, 0x56, 0x72, 0x11,
	0x51, 0xde, 0x8a, 0x62, 0x96, 0x30, 0x84, 0x78, 0x14, 0xb6, 0x64, 0xb8, 0x25, 0xc3, 0x3b, 0x9b,
	0x86, 0xcb, 0xf8, 0x39, 0xe3, 0xd6, 0x29, 0xe1, 0x34, 0xc3, 0xec, 0x58, 0x2e, 0xf3, 0x43, 0x89,
	0xd9, 0x7c, 0x32, 0x62, 0x23, 0x26, 0x96, 0x56, 0xba, 0x92, 0x5e, 0xf3, 0x0f, 0x15, 0x4a, 0x9d,
	0x31, 0xf1, 0x43, 0xa4, 0x43, 0xd9, 0x4d, 0x17, 0x3d, 0x47, 0x57, 0x1b, 0x6a, 0xb3, 0x8a, 0x73,
	0x53, 0x44, 0x62, 0x4a, 0x12, 0x16, 0xeb, 0x0b, 0x59, 0x44, 0x9a, 0xe8, 0x09, 0x94, 0x22, 0x4a,
	0x63, 0xae, 0x6b, 0x0d, 0xad, 0x59, 0xc5, 0xd2, 0x40, 0x5f, 0x40, 0x95, 0xb3, 0x49, 0xec, 0xd2,
	0x63, 0xbc, 0xaf, 0x2f, 0x0a, 0xc4, 0xd4, 0x81, 0x0c, 0x00, 0x69, 0xec, 0x11, 0x3e, 0xd6, 0x4b,
	0x22, 0x5c, 0xf0, 0xa4, 0x68, 0x41, 0x4f, 0x3d, 0x3b, 0xd1, 0x97, 0x1a, 0x6a, 0x53, 0xc3, 0x53,
	0x47, 0x7a, 0xe2, 0x99, 0x1f, 0x92, 0x40, 0x2f, 0x37, 0xd4, 0x66, 0x05, 0x4b, 0xc3, 0x7c, 0xab,
	0xc2, 0xda, 0xbe, 0x28, 0x47, 0x2f, 0x3c, 0x63, 0xf1, 0x39, 0x49, 0x7c, 0x16, 0xa2, 0x1e, 0x54,
	0x88, 0xeb, 0xb2, 0x49, 0x98, 0x70, 0x7d, 0xa1, 0xa1, 0x35, 0x6b, 0xbb, 0xdb, 0xad, 0xfb, 0x85,
	0x6b, 0xf5, 0x63, 0x16, 0x31, 0x4e, 0x02, 0xdb, 0xf3, 0x6c, 0xb9, 0xbd, 0x4f, 0x2e, 0x02, 0x46,
	0x3c, 0x7c, 0x0b, 0x47, 0x9f, 0xc1, 0xd2, 0x88, 0x86, 0x83, 0x37, 0x32, 0xd3, 0x65, 0x9c, 0x59,
	0xd3, 0x02, 0x2c, 0x16, 0x0a, 0x60, 0x5e, 0x6a, 0x50, 0xc9, 0x59, 0xd1, 0x09, 0xac, 0x47, 0xd9,
	0xba, 0x70, 0x39, 0x51, 0xe3, 0xda, 0xee, 0xd3, 0x79, 0x17, 0x2a, 0x6c, 0xc7, 0x0f, 0x71, 0xa0,
	0xe7, 0xb0, 0x92, 0xbb, 0x8f, 0x12, 0x92, 0x50, 0xd1, 0x9e, 0xda, 0xee, 0x97, 0xf3, 0x48, 0xc5,
	0x46, 0x3c, 0x8b, 0x43, 0x3f, 0xc0, 0x8a, 0x3b, 0x26, 0xe1, 0x88, 0x66, 0x99, 0xeb, 0x9a, 0x20,
	0xfa, 0x6a, 0x1e, 0x51, 0xa7, 0x08, 0xd8, 0x53, 0xf0, 0x2c, 0x03, 0x7a, 0x09, 0x6b, 0xe4, 0x6e,
	0x41, 0xc5, 0x30, 0xfc, 0xdf, 0x2e, 0xec, 0x29, 0xf8, 0x3e, 0x13, 0x72, 0x61, 0x9d, 0x78, 0xde,
	0x90, 0x04, 0xbe, 0x97, 0x4e, 0x62, 0x7e, 0x40, 0x49, 0x1c, 0x60, 0x7d, 0xe4, 0x80, 0xbb, 0xb0,
	0x3d, 0x05, 0x3f, 0xc4, 0xd6, 0xae, 0x42, 0x39, 0x92, 0x4b, 0xf3, 0x57, 0x15, 0xd6, 0x1f, 0xe8,
	0xcb, 0x9c, 0x57, 0x63, 0x00, 0xdc, 0xf6, 0xcc, 0x11, 0x9d, 0x29, 0xe1, 0x82, 0xa7, 0xf8, 0xaa,
	0xb4, 0xd9, 0x57, 0x35, 0xf3, 0x02, 0x16, 0xef, 0xbc, 0x00, 0xf3, 0x05, 0xac, 0xcc, 0xf4, 0x12,
	0x7d, 0x0b, 0x4b, 0x3c, 0x21, 0xc9, 0x84, 0x8b, 0x1b, 0xac, 0xee, 0x9a, 0x1f, 0x6b, 0xff, 0x84,
	0xe3, 0x0c, 0x61, 0x7e, 0x0d, 0xcb, 0x79, 0x64, 0xdf, 0xe7, 0x09, 0x6a, 0x40, 0x6d, 0x7a, 0xc5,
	0x94, 0x50, 0x6b, 0x96, 0x70, 0xd1, 0x65, 0x1e, 0xc1, 0xa7, 0x0f, 0x4e, 0x40, 0x9a, 0x6f, 0x3e,
	0x01, 0xc9, 0x58, 0x20, 0xab, 0xb8, 0xe0, 0x41, 0x9b, 0x50, 0x09, 0xe9, 0x2f, 0x43, 0x12, 0x4c,
	0x68, 0x26, 0x23, 0xb7, 0xb6, 0xf9, 0xaf, 0x0a, 0x1b, 0x1f, 0x1c, 0x00, 0xf4, 0x02, 0xca, 0xc4,
	0xf3, 0x62, 0xca, 0x65, 0x86, 0xcb, 0xed, 0x9d, 0xf7, 0x57, 0x5b, 0xdb, 0x23, 0x3f, 0x19, 0x4f,
	0x4e, 0x5b, 0x2e, 0x3b, 0xb7, 0x32, 0xe5, 0x93, 0x9f, 0x6d, 0xee, 0xfd, 0x9c, 0x89, 0xa5, 0xed,
	0xba, 0xb6, 0x04, 0xe2, 0x9c, 0x01, 0xbd, 0x55, 0xa1, 0x94, 0xaa, 0x62, 0x2e, 0x09, 0x1b, 0x2d,
	0x09, 0x6b, 0xa5, 0xba, 0x79, 0x5b, 0xae, 0x0e, 0xf3, 0xc3, 0xf6, 0x4f, 0xef, 0xae, 0xb6, 0x94,
	0xf7, 0x57, 0x5b, 0x4f, 0x1f, 0x71, 0x54, 0x0a, 0xf8, 0xfd, 0xaf, 0xad, 0xe6, 0x23, 0xb7, 0x72,
	0x2c, 0x2f, 0x61, 0xfe, 0xa3, 0xc2, 0xe7, 0x73, 0x26, 0x33, 0x15, 0x18, 0x21, 0x35, 0x32, 0x73,
	0x2c, 0x0d, 0xf4, 0x12, 0xea, 0xaf, 0xf3, 0x9d, 0x59, 0x86, 0xa2, 0xa6, 0x8f, 0x2f, 0xcd, 0x50,
	0x1c, 0x27, 0x4a, 0x73, 0x8f, 0x0a, 0xd9, 0xb0, 0xca, 0x69, 0x70, 0xe6, 0xd0, 0x80, 0x8e, 0xa4,
	0x5a, 0x49, 0x3d, 0xf8, 0x70, 0xad, 0xf0, 0x1d, 0x00, 0x42, 0xb0, 0x98, 0x6a, 0x61, 0x26, 0xff,
	0x62, 0xfd, 0xec, 0xbb, 0xe9, 0xb0, 0x0d, 0x2e, 0x22, 0x8a, 0x96, 0xa1, 0x62, 0x1f, 0x9c, 0xbc,
	0x1a, 0x9c, 0xf4, 0xbb, 0x75, 0x05, 0x7d, 0x02, 0x35, 0xdb, 0x71, 0x5e, 0xd9, 0x9d, 0xce, 0xe1,
	0xf1, 0xc1, 0xa0, 0xae, 0xa2, 0x35, 0x58, 0x49, 0x1d, 0x43, 0x7b, 0xbf, 0xe7, 0xd8, 0x83, 0x43,
	0x5c, 0x5f, 0x78, 0xd6, 0x83, 0xd5, 0xd9, 0x41, 0x46, 0xab, 0x00, 0x29, 0xc7, 0xd1, 0xc0, 0x1e,
	0x1c, 0x1f, 0xd5, 0x15, 0xc1, 0xd9, 0xef, 0xe3, 0xc3, 0x61, 0xd7, 0xa9, 0xab, 0xa8, 0x06, 0xe5,
	0x7e, 0xf7, 0xc0, 0xe9, 0x1d, 0x3c, 0xaf, 0x2f, 0xa4, 0x21, 0xdc, 0xfd, 0xbe, 0xdb, 0x19, 0x74,
	0x9d, 0xba, 0xd6, 0x6e, 0xbf, 0xbb, 0x36, 0xd4, 0xcb, 0x6b, 0x43, 0xfd, 0xfb, 0xda, 0x50, 0x7f,
	0xbb, 0x31, 0x94, 0xcb, 0x1b, 0x43, 0xf9, 0xf3, 0xc6, 0x50, 0x7e, 0x2c, 0xf6, 0x30, 0xa1, 0xa1,
	0x47, 0xe3, 0x73, 0x3f, 0x4c, 0x2c, 0x1e, 0x85, 0xd6, 0x1b, 0x2b, 0xfb, 0x27, 0x8b, 0x22, 0x9e,
	0x2e, 0x89, 0x7f, 0xe8, 0x37, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x5f, 0xe6, 0xfd, 0xaa,
	0x07, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SourceHash) > 0 {
		i -= len(m.SourceHash)
		copy(dAtA[i:], m.SourceHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceURL) > 0 {
		i -= len(m.SourceURL)
		copy(dAtA[i:], m.SourceURL)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Peers[iNdEx])
			copy(dAtA[i:], m.Peers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Peers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LaunchInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LaunchInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LaunchInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Peers[iNdEx])
			copy(dAtA[i:], m.Peers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Peers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GenTxs) > 0 {
		for iNdEx := len(m.GenTxs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GenTxs[iNdEx])
			copy(dAtA[i:], m.GenTxs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.GenTxs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ProposalState != nil {
		{
			size, err := m.ProposalState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalInformation != nil {
		{
			size, err := m.ProposalInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_ChangePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_ChangePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangePayload != nil {
		{
			size, err := m.ChangePayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_AddAccountPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_AddAccountPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddAccountPayload != nil {
		{
			size, err := m.AddAccountPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_AddValidatorPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_AddValidatorPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddValidatorPayload != nil {
		{
			size, err := m.AddValidatorPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProposalInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposalID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProposalID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalIDs) > 0 {
		dAtA7 := make([]byte, len(m.ProposalIDs)*10)
		var j6 int
		for _, num1 := range m.ProposalIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTypes(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalChangePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalChangePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalChangePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewValue) > 0 {
		i -= len(m.NewValue)
		copy(dAtA[i:], m.NewValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NewValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChangePath) > 0 {
		for iNdEx := len(m.ChangePath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChangePath[iNdEx])
			copy(dAtA[i:], m.ChangePath[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ChangePath[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddAccountPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddAccountPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddAccountPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddValidatorPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddValidatorPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddValidatorPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x22
	}
	if m.SelfDelegation != nil {
		{
			size, err := m.SelfDelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GenTx) > 0 {
		i -= len(m.GenTx)
		copy(dAtA[i:], m.GenTx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GenTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, s := range m.Peers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.SourceURL)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SourceHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTypes(uint64(m.CreatedAt))
	}
	if m.Final {
		n += 2
	}
	return n
}

func (m *LaunchInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.GenTxs) > 0 {
		for _, b := range m.GenTxs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Peers) > 0 {
		for _, s := range m.Peers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalInformation != nil {
		l = m.ProposalInformation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalState != nil {
		l = m.ProposalState.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Proposal_ChangePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangePayload != nil {
		l = m.ChangePayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Proposal_AddAccountPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddAccountPayload != nil {
		l = m.AddAccountPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Proposal_AddValidatorPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddValidatorPayload != nil {
		l = m.AddValidatorPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProposalInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalID != 0 {
		n += 1 + sovTypes(uint64(m.ProposalID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTypes(uint64(m.CreatedAt))
	}
	return n
}

func (m *ProposalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *ProposalList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposalIDs) > 0 {
		l = 0
		for _, e := range m.ProposalIDs {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *ProposalChangePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChangePath) > 0 {
		for _, s := range m.ChangePath {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.NewValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalAddAccountPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ProposalAddValidatorPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenTx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SelfDelegation != nil {
		l = m.SelfDelegation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LaunchInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaunchInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaunchInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &ProposalAddAccountPayload{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTxs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTxs = append(m.GenTxs, make([]byte, postIndex-iNdEx))
			copy(m.GenTxs[len(m.GenTxs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalInformation == nil {
				m.ProposalInformation = &ProposalInformation{}
			}
			if err := m.ProposalInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalState == nil {
				m.ProposalState = &ProposalState{}
			}
			if err := m.ProposalState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalChangePayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_ChangePayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddAccountPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalAddAccountPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_AddAccountPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddValidatorPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalAddValidatorPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_AddValidatorPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProposalIDs = append(m.ProposalIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProposalIDs) == 0 {
					m.ProposalIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProposalIDs = append(m.ProposalIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalChangePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalChangePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalChangePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangePath = append(m.ChangePath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddAccountPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAddAccountPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAddAccountPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddValidatorPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAddValidatorPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAddValidatorPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTx = append(m.GenTx[:0], dAtA[iNdEx:postIndex]...)
			if m.GenTx == nil {
				m.GenTx = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfDelegation == nil {
				m.SelfDelegation = &types.Coin{}
			}
			if err := m.SelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
