// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: profile/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetConsensusKeyNonceRequest struct {
	ConsAddress string `protobuf:"bytes,1,opt,name=consAddress,proto3" json:"consAddress,omitempty"`
}

func (m *QueryGetConsensusKeyNonceRequest) Reset()         { *m = QueryGetConsensusKeyNonceRequest{} }
func (m *QueryGetConsensusKeyNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetConsensusKeyNonceRequest) ProtoMessage()    {}
func (*QueryGetConsensusKeyNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{0}
}
func (m *QueryGetConsensusKeyNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConsensusKeyNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConsensusKeyNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConsensusKeyNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConsensusKeyNonceRequest.Merge(m, src)
}
func (m *QueryGetConsensusKeyNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConsensusKeyNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConsensusKeyNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConsensusKeyNonceRequest proto.InternalMessageInfo

func (m *QueryGetConsensusKeyNonceRequest) GetConsAddress() string {
	if m != nil {
		return m.ConsAddress
	}
	return ""
}

type QueryGetConsensusKeyNonceResponse struct {
	ConsensusKeyNonce *ConsensusKeyNonce `protobuf:"bytes,1,opt,name=consensusKeyNonce,proto3" json:"consensusKeyNonce,omitempty"`
}

func (m *QueryGetConsensusKeyNonceResponse) Reset()         { *m = QueryGetConsensusKeyNonceResponse{} }
func (m *QueryGetConsensusKeyNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetConsensusKeyNonceResponse) ProtoMessage()    {}
func (*QueryGetConsensusKeyNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{1}
}
func (m *QueryGetConsensusKeyNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConsensusKeyNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConsensusKeyNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConsensusKeyNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConsensusKeyNonceResponse.Merge(m, src)
}
func (m *QueryGetConsensusKeyNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConsensusKeyNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConsensusKeyNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConsensusKeyNonceResponse proto.InternalMessageInfo

func (m *QueryGetConsensusKeyNonceResponse) GetConsensusKeyNonce() *ConsensusKeyNonce {
	if m != nil {
		return m.ConsensusKeyNonce
	}
	return nil
}

type QueryGetValidatorByConsAddressRequest struct {
	ConsAddress string `protobuf:"bytes,1,opt,name=consAddress,proto3" json:"consAddress,omitempty"`
}

func (m *QueryGetValidatorByConsAddressRequest) Reset()         { *m = QueryGetValidatorByConsAddressRequest{} }
func (m *QueryGetValidatorByConsAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorByConsAddressRequest) ProtoMessage()    {}
func (*QueryGetValidatorByConsAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{2}
}
func (m *QueryGetValidatorByConsAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorByConsAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorByConsAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorByConsAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorByConsAddressRequest.Merge(m, src)
}
func (m *QueryGetValidatorByConsAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorByConsAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorByConsAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorByConsAddressRequest proto.InternalMessageInfo

func (m *QueryGetValidatorByConsAddressRequest) GetConsAddress() string {
	if m != nil {
		return m.ConsAddress
	}
	return ""
}

type QueryGetValidatorByConsAddressResponse struct {
	ValidatorByConsAddress *ValidatorByConsAddress `protobuf:"bytes,1,opt,name=validatorByConsAddress,proto3" json:"validatorByConsAddress,omitempty"`
}

func (m *QueryGetValidatorByConsAddressResponse) Reset() {
	*m = QueryGetValidatorByConsAddressResponse{}
}
func (m *QueryGetValidatorByConsAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorByConsAddressResponse) ProtoMessage()    {}
func (*QueryGetValidatorByConsAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{3}
}
func (m *QueryGetValidatorByConsAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorByConsAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorByConsAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorByConsAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorByConsAddressResponse.Merge(m, src)
}
func (m *QueryGetValidatorByConsAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorByConsAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorByConsAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorByConsAddressResponse proto.InternalMessageInfo

func (m *QueryGetValidatorByConsAddressResponse) GetValidatorByConsAddress() *ValidatorByConsAddress {
	if m != nil {
		return m.ValidatorByConsAddress
	}
	return nil
}

type QueryGetValidatorByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetValidatorByAddressRequest) Reset()         { *m = QueryGetValidatorByAddressRequest{} }
func (m *QueryGetValidatorByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorByAddressRequest) ProtoMessage()    {}
func (*QueryGetValidatorByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{4}
}
func (m *QueryGetValidatorByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorByAddressRequest.Merge(m, src)
}
func (m *QueryGetValidatorByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorByAddressRequest proto.InternalMessageInfo

func (m *QueryGetValidatorByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetValidatorByAddressResponse struct {
	ValidatorByAddress *ValidatorByAddress `protobuf:"bytes,1,opt,name=validatorByAddress,proto3" json:"validatorByAddress,omitempty"`
}

func (m *QueryGetValidatorByAddressResponse) Reset()         { *m = QueryGetValidatorByAddressResponse{} }
func (m *QueryGetValidatorByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorByAddressResponse) ProtoMessage()    {}
func (*QueryGetValidatorByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{5}
}
func (m *QueryGetValidatorByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorByAddressResponse.Merge(m, src)
}
func (m *QueryGetValidatorByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorByAddressResponse proto.InternalMessageInfo

func (m *QueryGetValidatorByAddressResponse) GetValidatorByAddress() *ValidatorByAddress {
	if m != nil {
		return m.ValidatorByAddress
	}
	return nil
}

type QueryAllValidatorByAddressRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorByAddressRequest) Reset()         { *m = QueryAllValidatorByAddressRequest{} }
func (m *QueryAllValidatorByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorByAddressRequest) ProtoMessage()    {}
func (*QueryAllValidatorByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{6}
}
func (m *QueryAllValidatorByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorByAddressRequest.Merge(m, src)
}
func (m *QueryAllValidatorByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorByAddressRequest proto.InternalMessageInfo

func (m *QueryAllValidatorByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidatorByAddressResponse struct {
	ValidatorByAddress []*ValidatorByAddress `protobuf:"bytes,1,rep,name=validatorByAddress,proto3" json:"validatorByAddress,omitempty"`
	Pagination         *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorByAddressResponse) Reset()         { *m = QueryAllValidatorByAddressResponse{} }
func (m *QueryAllValidatorByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorByAddressResponse) ProtoMessage()    {}
func (*QueryAllValidatorByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{7}
}
func (m *QueryAllValidatorByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorByAddressResponse.Merge(m, src)
}
func (m *QueryAllValidatorByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorByAddressResponse proto.InternalMessageInfo

func (m *QueryAllValidatorByAddressResponse) GetValidatorByAddress() []*ValidatorByAddress {
	if m != nil {
		return m.ValidatorByAddress
	}
	return nil
}

func (m *QueryAllValidatorByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCoordinatorByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetCoordinatorByAddressRequest) Reset()         { *m = QueryGetCoordinatorByAddressRequest{} }
func (m *QueryGetCoordinatorByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoordinatorByAddressRequest) ProtoMessage()    {}
func (*QueryGetCoordinatorByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{8}
}
func (m *QueryGetCoordinatorByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoordinatorByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoordinatorByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoordinatorByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoordinatorByAddressRequest.Merge(m, src)
}
func (m *QueryGetCoordinatorByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoordinatorByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoordinatorByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoordinatorByAddressRequest proto.InternalMessageInfo

func (m *QueryGetCoordinatorByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetCoordinatorByAddressResponse struct {
	CoordinatorByAddress *CoordinatorByAddress `protobuf:"bytes,1,opt,name=coordinatorByAddress,proto3" json:"coordinatorByAddress,omitempty"`
}

func (m *QueryGetCoordinatorByAddressResponse) Reset()         { *m = QueryGetCoordinatorByAddressResponse{} }
func (m *QueryGetCoordinatorByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoordinatorByAddressResponse) ProtoMessage()    {}
func (*QueryGetCoordinatorByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{9}
}
func (m *QueryGetCoordinatorByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoordinatorByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoordinatorByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoordinatorByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoordinatorByAddressResponse.Merge(m, src)
}
func (m *QueryGetCoordinatorByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoordinatorByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoordinatorByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoordinatorByAddressResponse proto.InternalMessageInfo

func (m *QueryGetCoordinatorByAddressResponse) GetCoordinatorByAddress() *CoordinatorByAddress {
	if m != nil {
		return m.CoordinatorByAddress
	}
	return nil
}

type QueryAllCoordinatorByAddressRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoordinatorByAddressRequest) Reset()         { *m = QueryAllCoordinatorByAddressRequest{} }
func (m *QueryAllCoordinatorByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoordinatorByAddressRequest) ProtoMessage()    {}
func (*QueryAllCoordinatorByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{10}
}
func (m *QueryAllCoordinatorByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoordinatorByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoordinatorByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoordinatorByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoordinatorByAddressRequest.Merge(m, src)
}
func (m *QueryAllCoordinatorByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoordinatorByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoordinatorByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoordinatorByAddressRequest proto.InternalMessageInfo

func (m *QueryAllCoordinatorByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoordinatorByAddressResponse struct {
	CoordinatorByAddress []*CoordinatorByAddress `protobuf:"bytes,1,rep,name=coordinatorByAddress,proto3" json:"coordinatorByAddress,omitempty"`
	Pagination           *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoordinatorByAddressResponse) Reset()         { *m = QueryAllCoordinatorByAddressResponse{} }
func (m *QueryAllCoordinatorByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoordinatorByAddressResponse) ProtoMessage()    {}
func (*QueryAllCoordinatorByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{11}
}
func (m *QueryAllCoordinatorByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoordinatorByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoordinatorByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoordinatorByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoordinatorByAddressResponse.Merge(m, src)
}
func (m *QueryAllCoordinatorByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoordinatorByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoordinatorByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoordinatorByAddressResponse proto.InternalMessageInfo

func (m *QueryAllCoordinatorByAddressResponse) GetCoordinatorByAddress() []*CoordinatorByAddress {
	if m != nil {
		return m.CoordinatorByAddress
	}
	return nil
}

func (m *QueryAllCoordinatorByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCoordinatorRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCoordinatorRequest) Reset()         { *m = QueryGetCoordinatorRequest{} }
func (m *QueryGetCoordinatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoordinatorRequest) ProtoMessage()    {}
func (*QueryGetCoordinatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{12}
}
func (m *QueryGetCoordinatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoordinatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoordinatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoordinatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoordinatorRequest.Merge(m, src)
}
func (m *QueryGetCoordinatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoordinatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoordinatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoordinatorRequest proto.InternalMessageInfo

func (m *QueryGetCoordinatorRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCoordinatorResponse struct {
	Coordinator *Coordinator `protobuf:"bytes,1,opt,name=Coordinator,proto3" json:"Coordinator,omitempty"`
}

func (m *QueryGetCoordinatorResponse) Reset()         { *m = QueryGetCoordinatorResponse{} }
func (m *QueryGetCoordinatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoordinatorResponse) ProtoMessage()    {}
func (*QueryGetCoordinatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{13}
}
func (m *QueryGetCoordinatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoordinatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoordinatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoordinatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoordinatorResponse.Merge(m, src)
}
func (m *QueryGetCoordinatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoordinatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoordinatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoordinatorResponse proto.InternalMessageInfo

func (m *QueryGetCoordinatorResponse) GetCoordinator() *Coordinator {
	if m != nil {
		return m.Coordinator
	}
	return nil
}

type QueryAllCoordinatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoordinatorRequest) Reset()         { *m = QueryAllCoordinatorRequest{} }
func (m *QueryAllCoordinatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoordinatorRequest) ProtoMessage()    {}
func (*QueryAllCoordinatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{14}
}
func (m *QueryAllCoordinatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoordinatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoordinatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoordinatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoordinatorRequest.Merge(m, src)
}
func (m *QueryAllCoordinatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoordinatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoordinatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoordinatorRequest proto.InternalMessageInfo

func (m *QueryAllCoordinatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoordinatorResponse struct {
	Coordinator []*Coordinator      `protobuf:"bytes,1,rep,name=Coordinator,proto3" json:"Coordinator,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoordinatorResponse) Reset()         { *m = QueryAllCoordinatorResponse{} }
func (m *QueryAllCoordinatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoordinatorResponse) ProtoMessage()    {}
func (*QueryAllCoordinatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_882bdd73bbc62204, []int{15}
}
func (m *QueryAllCoordinatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoordinatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoordinatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoordinatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoordinatorResponse.Merge(m, src)
}
func (m *QueryAllCoordinatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoordinatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoordinatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoordinatorResponse proto.InternalMessageInfo

func (m *QueryAllCoordinatorResponse) GetCoordinator() []*Coordinator {
	if m != nil {
		return m.Coordinator
	}
	return nil
}

func (m *QueryAllCoordinatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetConsensusKeyNonceRequest)(nil), "tendermint.spn.profile.QueryGetConsensusKeyNonceRequest")
	proto.RegisterType((*QueryGetConsensusKeyNonceResponse)(nil), "tendermint.spn.profile.QueryGetConsensusKeyNonceResponse")
	proto.RegisterType((*QueryGetValidatorByConsAddressRequest)(nil), "tendermint.spn.profile.QueryGetValidatorByConsAddressRequest")
	proto.RegisterType((*QueryGetValidatorByConsAddressResponse)(nil), "tendermint.spn.profile.QueryGetValidatorByConsAddressResponse")
	proto.RegisterType((*QueryGetValidatorByAddressRequest)(nil), "tendermint.spn.profile.QueryGetValidatorByAddressRequest")
	proto.RegisterType((*QueryGetValidatorByAddressResponse)(nil), "tendermint.spn.profile.QueryGetValidatorByAddressResponse")
	proto.RegisterType((*QueryAllValidatorByAddressRequest)(nil), "tendermint.spn.profile.QueryAllValidatorByAddressRequest")
	proto.RegisterType((*QueryAllValidatorByAddressResponse)(nil), "tendermint.spn.profile.QueryAllValidatorByAddressResponse")
	proto.RegisterType((*QueryGetCoordinatorByAddressRequest)(nil), "tendermint.spn.profile.QueryGetCoordinatorByAddressRequest")
	proto.RegisterType((*QueryGetCoordinatorByAddressResponse)(nil), "tendermint.spn.profile.QueryGetCoordinatorByAddressResponse")
	proto.RegisterType((*QueryAllCoordinatorByAddressRequest)(nil), "tendermint.spn.profile.QueryAllCoordinatorByAddressRequest")
	proto.RegisterType((*QueryAllCoordinatorByAddressResponse)(nil), "tendermint.spn.profile.QueryAllCoordinatorByAddressResponse")
	proto.RegisterType((*QueryGetCoordinatorRequest)(nil), "tendermint.spn.profile.QueryGetCoordinatorRequest")
	proto.RegisterType((*QueryGetCoordinatorResponse)(nil), "tendermint.spn.profile.QueryGetCoordinatorResponse")
	proto.RegisterType((*QueryAllCoordinatorRequest)(nil), "tendermint.spn.profile.QueryAllCoordinatorRequest")
	proto.RegisterType((*QueryAllCoordinatorResponse)(nil), "tendermint.spn.profile.QueryAllCoordinatorResponse")
}

func init() { proto.RegisterFile("profile/query.proto", fileDescriptor_882bdd73bbc62204) }

var fileDescriptor_882bdd73bbc62204 = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x99, 0xf2, 0xfb, 0x13, 0x1f, 0x12, 0x12, 0x46, 0x44, 0xac, 0xa6, 0xc1, 0x41, 0x10,
	0x2a, 0xd9, 0x95, 0x62, 0x10, 0x94, 0x3f, 0xa9, 0xa0, 0xc4, 0x98, 0x18, 0xed, 0x41, 0x13, 0x4e,
	0x6e, 0xbb, 0x43, 0xdd, 0xb8, 0xdd, 0x59, 0x3a, 0xdb, 0xc6, 0x06, 0x49, 0x8c, 0x27, 0x8f, 0x24,
	0xbe, 0x07, 0xe3, 0xc5, 0x37, 0xe1, 0x49, 0x6e, 0x10, 0x2f, 0x5e, 0x4c, 0x0c, 0x78, 0xf4, 0x45,
	0x98, 0x6e, 0x67, 0xe9, 0x76, 0xff, 0xb7, 0xf6, 0xc8, 0xce, 0x3c, 0xdf, 0xf9, 0x7e, 0x9e, 0x79,
	0x9e, 0x79, 0x28, 0x9c, 0x37, 0xab, 0x6c, 0x47, 0xd3, 0xa9, 0xbc, 0x5b, 0xa3, 0xd5, 0x86, 0x64,
	0x56, 0x99, 0xc5, 0xf0, 0x98, 0x45, 0x0d, 0x95, 0x56, 0x2b, 0x9a, 0x61, 0x49, 0xdc, 0x34, 0x24,
	0xb1, 0x27, 0x7d, 0xa5, 0xcc, 0x58, 0x59, 0xa7, 0xb2, 0x62, 0x6a, 0xb2, 0x62, 0x18, 0xcc, 0x52,
	0x2c, 0x8d, 0x19, 0xbc, 0x15, 0x95, 0xce, 0x96, 0x18, 0xaf, 0x30, 0x2e, 0x17, 0x15, 0x2e, 0xe4,
	0xe4, 0xfa, 0x7c, 0x91, 0x5a, 0xca, 0xbc, 0x6c, 0x2a, 0x65, 0xcd, 0xb0, 0x37, 0x8b, 0xbd, 0x17,
	0x9d, 0x63, 0xeb, 0x8a, 0xae, 0xa9, 0x8a, 0xc5, 0xaa, 0x62, 0xe1, 0x92, 0xb3, 0x50, 0x62, 0xac,
	0xaa, 0x36, 0x83, 0x9c, 0x25, 0xb2, 0x09, 0x13, 0x4f, 0x9b, 0xaa, 0x5b, 0xd4, 0xda, 0x60, 0x06,
	0xa7, 0x06, 0xaf, 0xf1, 0x47, 0xb4, 0xf1, 0x98, 0x19, 0x25, 0x5a, 0xa0, 0xbb, 0x35, 0xca, 0x2d,
	0x3c, 0x01, 0x43, 0x25, 0x66, 0xf0, 0xbc, 0xaa, 0x56, 0x29, 0xe7, 0xe3, 0x68, 0x02, 0xcd, 0x9c,
	0x2b, 0xb8, 0x3f, 0x91, 0x37, 0x70, 0x35, 0x42, 0x85, 0x9b, 0xcd, 0x6f, 0xf8, 0x39, 0x8c, 0x94,
	0xbc, 0x8b, 0xb6, 0xd8, 0x50, 0x6e, 0x56, 0x0a, 0x4e, 0x8e, 0xe4, 0x57, 0xf3, 0x6b, 0x90, 0x87,
	0x30, 0xe5, 0x9c, 0xfe, 0xcc, 0x21, 0xbf, 0xd7, 0xd8, 0x68, 0xfb, 0x4b, 0x0e, 0x72, 0x80, 0x60,
	0x3a, 0x4e, 0x4b, 0xe0, 0xec, 0xc0, 0x58, 0x3d, 0x70, 0x87, 0x60, 0x92, 0xc2, 0x98, 0x42, 0x74,
	0x43, 0xd4, 0xc8, 0x6a, 0x3b, 0xb7, 0xae, 0x48, 0x0f, 0xd9, 0x38, 0xfc, 0xaf, 0x74, 0x50, 0x39,
	0x7f, 0x92, 0xb7, 0x08, 0x48, 0x54, 0xbc, 0xa0, 0xd9, 0x06, 0x5c, 0xf7, 0xad, 0x0a, 0x92, 0x6c,
	0x02, 0x12, 0x47, 0x2f, 0x40, 0x85, 0xbc, 0x12, 0x04, 0x79, 0x5d, 0x0f, 0x27, 0x78, 0x00, 0xd0,
	0x2e, 0x68, 0x71, 0xf0, 0xb4, 0xd4, 0xaa, 0x7e, 0xa9, 0x59, 0xfd, 0x52, 0xab, 0x99, 0x44, 0xf5,
	0x4b, 0x4f, 0x94, 0xb2, 0x53, 0xa0, 0x05, 0x57, 0x24, 0x39, 0x74, 0x78, 0x43, 0x4e, 0x8b, 0xe1,
	0x1d, 0xfc, 0x7b, 0x5e, 0xbc, 0xd5, 0x81, 0x92, 0xb2, 0x51, 0xae, 0xc7, 0xa2, 0xb4, 0x8c, 0x75,
	0xb0, 0xac, 0xc3, 0x64, 0xbb, 0xad, 0xce, 0x3a, 0xb7, 0x8b, 0xcb, 0x7f, 0x8f, 0xe0, 0x5a, 0xb4,
	0x82, 0x48, 0xc7, 0x0b, 0x18, 0x2d, 0x05, 0xac, 0x8b, 0x7b, 0x98, 0x0b, 0x6f, 0xcf, 0x00, 0xcd,
	0x40, 0x25, 0x52, 0x11, 0x2c, 0x79, 0x5d, 0x8f, 0x62, 0xe9, 0x57, 0x19, 0x1c, 0x3b, 0xe4, 0xa1,
	0xe7, 0xc5, 0x92, 0x0f, 0xf6, 0x87, 0xbc, 0x7f, 0xe5, 0x30, 0x07, 0xe9, 0x80, 0xcb, 0x74, 0x32,
	0x37, 0x0c, 0x29, 0x4d, 0xb5, 0x33, 0xf6, 0x4f, 0x21, 0xa5, 0xa9, 0x44, 0x85, 0xcb, 0x81, 0xbb,
	0x05, 0xf7, 0x7d, 0x18, 0x72, 0x7d, 0x16, 0x99, 0x9e, 0x4c, 0x80, 0x5b, 0x70, 0xc7, 0x11, 0x55,
	0x78, 0xea, 0x4c, 0x73, 0xbf, 0x6f, 0xf3, 0x33, 0x12, 0x30, 0xde, 0x63, 0xc2, 0x60, 0x06, 0x7b,
	0x81, 0xe9, 0xdb, 0x4d, 0xe5, 0x7e, 0x03, 0xfc, 0x6b, 0xfb, 0xc5, 0x87, 0x08, 0x46, 0x7c, 0x43,
	0x0c, 0x2f, 0x85, 0x59, 0x8b, 0x9b, 0xc5, 0xe9, 0xe5, 0x1e, 0x22, 0x5b, 0x06, 0xc9, 0xfa, 0xbb,
	0x6f, 0xbf, 0x3e, 0xa4, 0x96, 0xf1, 0x6d, 0xb9, 0x2d, 0x21, 0x73, 0xd3, 0x90, 0xdb, 0xff, 0x1d,
	0x78, 0x42, 0xe5, 0x3d, 0xd7, 0x6c, 0xdc, 0xc7, 0x3f, 0x10, 0x8c, 0x05, 0x0f, 0x2f, 0xbc, 0x1a,
	0x67, 0x2b, 0x72, 0x30, 0xa7, 0xd7, 0x7a, 0x0d, 0x17, 0x68, 0x9b, 0x36, 0xda, 0x1a, 0x5e, 0x09,
	0x43, 0x0b, 0x9e, 0xad, 0x1e, 0xbe, 0x43, 0x04, 0xd8, 0xff, 0xc4, 0xe3, 0xe5, 0x2e, 0xcc, 0x79,
	0xb8, 0xee, 0xf4, 0x12, 0x2a, 0x98, 0x56, 0x6c, 0xa6, 0x45, 0x7c, 0x2b, 0x01, 0xd3, 0x19, 0x8f,
	0xe2, 0xb0, 0x7c, 0x41, 0x70, 0xc1, 0x2f, 0x9e, 0xd7, 0xf5, 0x18, 0x9c, 0xa8, 0x19, 0x1d, 0x83,
	0x13, 0x39, 0x70, 0x49, 0xce, 0xc6, 0x99, 0xc3, 0xd9, 0xe4, 0x38, 0xf8, 0x18, 0xc1, 0x68, 0xd0,
	0x43, 0x8b, 0xef, 0xc6, 0x77, 0x41, 0xe8, 0x88, 0x49, 0xaf, 0xf4, 0x16, 0x2c, 0x38, 0xd6, 0x6c,
	0x8e, 0x25, 0xbc, 0x18, 0xde, 0x45, 0xfe, 0x68, 0xd7, 0xc5, 0x7c, 0x42, 0x1d, 0x6f, 0x15, 0xce,
	0x75, 0xe1, 0xc6, 0x21, 0x58, 0xe8, 0x2a, 0x46, 0x18, 0xbf, 0x69, 0x1b, 0xcf, 0xe2, 0x99, 0x04,
	0xc6, 0xe5, 0x3d, 0x4d, 0xdd, 0xc7, 0x1f, 0x11, 0x0c, 0xbb, 0x94, 0x9a, 0xc5, 0x93, 0x8b, 0xab,
	0x80, 0xae, 0xdd, 0x06, 0xbf, 0xe8, 0xe4, 0x86, 0xed, 0x76, 0x0a, 0x4f, 0x26, 0x49, 0xf3, 0xc6,
	0xd7, 0x93, 0x0c, 0x3a, 0x3a, 0xc9, 0xa0, 0x9f, 0x27, 0x19, 0x74, 0x70, 0x9a, 0x19, 0x38, 0x3a,
	0xcd, 0x0c, 0x7c, 0x3f, 0xcd, 0x0c, 0x6c, 0xcf, 0x96, 0x35, 0xeb, 0x65, 0xad, 0x28, 0x95, 0x58,
	0xc5, 0x2b, 0xf4, 0xfa, 0x4c, 0xca, 0x6a, 0x98, 0x94, 0x17, 0xff, 0xb3, 0x7f, 0x10, 0x2d, 0xfc,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xea, 0x40, 0xf6, 0x5b, 0xbd, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a consensusKeyNonce by index.
	ConsensusKeyNonce(ctx context.Context, in *QueryGetConsensusKeyNonceRequest, opts ...grpc.CallOption) (*QueryGetConsensusKeyNonceResponse, error)
	// Queries a validatorByConsAddress by index.
	ValidatorByConsAddress(ctx context.Context, in *QueryGetValidatorByConsAddressRequest, opts ...grpc.CallOption) (*QueryGetValidatorByConsAddressResponse, error)
	// Queries a validatorByAddress by index.
	ValidatorByAddress(ctx context.Context, in *QueryGetValidatorByAddressRequest, opts ...grpc.CallOption) (*QueryGetValidatorByAddressResponse, error)
	// Queries a list of validatorByAddress items.
	ValidatorByAddressAll(ctx context.Context, in *QueryAllValidatorByAddressRequest, opts ...grpc.CallOption) (*QueryAllValidatorByAddressResponse, error)
	// Queries a coordinatorByAddress by index.
	CoordinatorByAddress(ctx context.Context, in *QueryGetCoordinatorByAddressRequest, opts ...grpc.CallOption) (*QueryGetCoordinatorByAddressResponse, error)
	// Queries a coordinator by id.
	Coordinator(ctx context.Context, in *QueryGetCoordinatorRequest, opts ...grpc.CallOption) (*QueryGetCoordinatorResponse, error)
	// Queries a list of coordinator items.
	CoordinatorAll(ctx context.Context, in *QueryAllCoordinatorRequest, opts ...grpc.CallOption) (*QueryAllCoordinatorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ConsensusKeyNonce(ctx context.Context, in *QueryGetConsensusKeyNonceRequest, opts ...grpc.CallOption) (*QueryGetConsensusKeyNonceResponse, error) {
	out := new(QueryGetConsensusKeyNonceResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/ConsensusKeyNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorByConsAddress(ctx context.Context, in *QueryGetValidatorByConsAddressRequest, opts ...grpc.CallOption) (*QueryGetValidatorByConsAddressResponse, error) {
	out := new(QueryGetValidatorByConsAddressResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/ValidatorByConsAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorByAddress(ctx context.Context, in *QueryGetValidatorByAddressRequest, opts ...grpc.CallOption) (*QueryGetValidatorByAddressResponse, error) {
	out := new(QueryGetValidatorByAddressResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/ValidatorByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorByAddressAll(ctx context.Context, in *QueryAllValidatorByAddressRequest, opts ...grpc.CallOption) (*QueryAllValidatorByAddressResponse, error) {
	out := new(QueryAllValidatorByAddressResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/ValidatorByAddressAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoordinatorByAddress(ctx context.Context, in *QueryGetCoordinatorByAddressRequest, opts ...grpc.CallOption) (*QueryGetCoordinatorByAddressResponse, error) {
	out := new(QueryGetCoordinatorByAddressResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/CoordinatorByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Coordinator(ctx context.Context, in *QueryGetCoordinatorRequest, opts ...grpc.CallOption) (*QueryGetCoordinatorResponse, error) {
	out := new(QueryGetCoordinatorResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/Coordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoordinatorAll(ctx context.Context, in *QueryAllCoordinatorRequest, opts ...grpc.CallOption) (*QueryAllCoordinatorResponse, error) {
	out := new(QueryAllCoordinatorResponse)
	err := c.cc.Invoke(ctx, "/tendermint.spn.profile.Query/CoordinatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a consensusKeyNonce by index.
	ConsensusKeyNonce(context.Context, *QueryGetConsensusKeyNonceRequest) (*QueryGetConsensusKeyNonceResponse, error)
	// Queries a validatorByConsAddress by index.
	ValidatorByConsAddress(context.Context, *QueryGetValidatorByConsAddressRequest) (*QueryGetValidatorByConsAddressResponse, error)
	// Queries a validatorByAddress by index.
	ValidatorByAddress(context.Context, *QueryGetValidatorByAddressRequest) (*QueryGetValidatorByAddressResponse, error)
	// Queries a list of validatorByAddress items.
	ValidatorByAddressAll(context.Context, *QueryAllValidatorByAddressRequest) (*QueryAllValidatorByAddressResponse, error)
	// Queries a coordinatorByAddress by index.
	CoordinatorByAddress(context.Context, *QueryGetCoordinatorByAddressRequest) (*QueryGetCoordinatorByAddressResponse, error)
	// Queries a coordinator by id.
	Coordinator(context.Context, *QueryGetCoordinatorRequest) (*QueryGetCoordinatorResponse, error)
	// Queries a list of coordinator items.
	CoordinatorAll(context.Context, *QueryAllCoordinatorRequest) (*QueryAllCoordinatorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ConsensusKeyNonce(ctx context.Context, req *QueryGetConsensusKeyNonceRequest) (*QueryGetConsensusKeyNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusKeyNonce not implemented")
}
func (*UnimplementedQueryServer) ValidatorByConsAddress(ctx context.Context, req *QueryGetValidatorByConsAddressRequest) (*QueryGetValidatorByConsAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorByConsAddress not implemented")
}
func (*UnimplementedQueryServer) ValidatorByAddress(ctx context.Context, req *QueryGetValidatorByAddressRequest) (*QueryGetValidatorByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorByAddress not implemented")
}
func (*UnimplementedQueryServer) ValidatorByAddressAll(ctx context.Context, req *QueryAllValidatorByAddressRequest) (*QueryAllValidatorByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorByAddressAll not implemented")
}
func (*UnimplementedQueryServer) CoordinatorByAddress(ctx context.Context, req *QueryGetCoordinatorByAddressRequest) (*QueryGetCoordinatorByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorByAddress not implemented")
}
func (*UnimplementedQueryServer) Coordinator(ctx context.Context, req *QueryGetCoordinatorRequest) (*QueryGetCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coordinator not implemented")
}
func (*UnimplementedQueryServer) CoordinatorAll(ctx context.Context, req *QueryAllCoordinatorRequest) (*QueryAllCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ConsensusKeyNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetConsensusKeyNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsensusKeyNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/ConsensusKeyNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsensusKeyNonce(ctx, req.(*QueryGetConsensusKeyNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorByConsAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorByConsAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorByConsAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/ValidatorByConsAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorByConsAddress(ctx, req.(*QueryGetValidatorByConsAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/ValidatorByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorByAddress(ctx, req.(*QueryGetValidatorByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorByAddressAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidatorByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorByAddressAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/ValidatorByAddressAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorByAddressAll(ctx, req.(*QueryAllValidatorByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoordinatorByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoordinatorByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoordinatorByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/CoordinatorByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoordinatorByAddress(ctx, req.(*QueryGetCoordinatorByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Coordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoordinatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Coordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/Coordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Coordinator(ctx, req.(*QueryGetCoordinatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoordinatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCoordinatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoordinatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.spn.profile.Query/CoordinatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoordinatorAll(ctx, req.(*QueryAllCoordinatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.spn.profile.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsensusKeyNonce",
			Handler:    _Query_ConsensusKeyNonce_Handler,
		},
		{
			MethodName: "ValidatorByConsAddress",
			Handler:    _Query_ValidatorByConsAddress_Handler,
		},
		{
			MethodName: "ValidatorByAddress",
			Handler:    _Query_ValidatorByAddress_Handler,
		},
		{
			MethodName: "ValidatorByAddressAll",
			Handler:    _Query_ValidatorByAddressAll_Handler,
		},
		{
			MethodName: "CoordinatorByAddress",
			Handler:    _Query_CoordinatorByAddress_Handler,
		},
		{
			MethodName: "Coordinator",
			Handler:    _Query_Coordinator_Handler,
		},
		{
			MethodName: "CoordinatorAll",
			Handler:    _Query_CoordinatorAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile/query.proto",
}

func (m *QueryGetConsensusKeyNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConsensusKeyNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConsensusKeyNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsAddress) > 0 {
		i -= len(m.ConsAddress)
		copy(dAtA[i:], m.ConsAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetConsensusKeyNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConsensusKeyNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConsensusKeyNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusKeyNonce != nil {
		{
			size, err := m.ConsensusKeyNonce.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorByConsAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorByConsAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorByConsAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsAddress) > 0 {
		i -= len(m.ConsAddress)
		copy(dAtA[i:], m.ConsAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorByConsAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorByConsAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorByConsAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorByConsAddress != nil {
		{
			size, err := m.ValidatorByConsAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorByAddress != nil {
		{
			size, err := m.ValidatorByAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorByAddress) > 0 {
		for iNdEx := len(m.ValidatorByAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorByAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoordinatorByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoordinatorByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoordinatorByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoordinatorByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoordinatorByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoordinatorByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoordinatorByAddress != nil {
		{
			size, err := m.CoordinatorByAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoordinatorByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoordinatorByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoordinatorByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoordinatorByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoordinatorByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoordinatorByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoordinatorByAddress) > 0 {
		for iNdEx := len(m.CoordinatorByAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoordinatorByAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoordinatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoordinatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoordinatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoordinatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoordinatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoordinatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coordinator != nil {
		{
			size, err := m.Coordinator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoordinatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoordinatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoordinatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoordinatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoordinatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoordinatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Coordinator) > 0 {
		for iNdEx := len(m.Coordinator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coordinator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetConsensusKeyNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetConsensusKeyNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsensusKeyNonce != nil {
		l = m.ConsensusKeyNonce.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorByConsAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorByConsAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorByConsAddress != nil {
		l = m.ValidatorByConsAddress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorByAddress != nil {
		l = m.ValidatorByAddress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidatorByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidatorByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorByAddress) > 0 {
		for _, e := range m.ValidatorByAddress {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoordinatorByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoordinatorByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoordinatorByAddress != nil {
		l = m.CoordinatorByAddress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoordinatorByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoordinatorByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoordinatorByAddress) > 0 {
		for _, e := range m.CoordinatorByAddress {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoordinatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCoordinatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coordinator != nil {
		l = m.Coordinator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoordinatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoordinatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coordinator) > 0 {
		for _, e := range m.Coordinator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetConsensusKeyNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConsensusKeyNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConsensusKeyNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConsensusKeyNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConsensusKeyNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConsensusKeyNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusKeyNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusKeyNonce == nil {
				m.ConsensusKeyNonce = &ConsensusKeyNonce{}
			}
			if err := m.ConsensusKeyNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorByConsAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorByConsAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorByConsAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorByConsAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorByConsAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorByConsAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorByConsAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorByConsAddress == nil {
				m.ValidatorByConsAddress = &ValidatorByConsAddress{}
			}
			if err := m.ValidatorByConsAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorByAddress == nil {
				m.ValidatorByAddress = &ValidatorByAddress{}
			}
			if err := m.ValidatorByAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorByAddress = append(m.ValidatorByAddress, &ValidatorByAddress{})
			if err := m.ValidatorByAddress[len(m.ValidatorByAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoordinatorByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoordinatorByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoordinatorByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoordinatorByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoordinatorByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoordinatorByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoordinatorByAddress == nil {
				m.CoordinatorByAddress = &CoordinatorByAddress{}
			}
			if err := m.CoordinatorByAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoordinatorByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoordinatorByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoordinatorByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoordinatorByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoordinatorByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoordinatorByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorByAddress = append(m.CoordinatorByAddress, &CoordinatorByAddress{})
			if err := m.CoordinatorByAddress[len(m.CoordinatorByAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoordinatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoordinatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoordinatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoordinatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoordinatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoordinatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinator == nil {
				m.Coordinator = &Coordinator{}
			}
			if err := m.Coordinator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoordinatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoordinatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoordinatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoordinatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoordinatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoordinatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coordinator = append(m.Coordinator, &Coordinator{})
			if err := m.Coordinator[len(m.Coordinator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
