// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: genesis/v1beta/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalInformation_Status int32

const (
	ProposalInformation_APPROVED ProposalInformation_Status = 0
	ProposalInformation_REJECTED ProposalInformation_Status = 1
	ProposalInformation_PENDING  ProposalInformation_Status = 2
)

var ProposalInformation_Status_name = map[int32]string{
	0: "APPROVED",
	1: "REJECTED",
	2: "PENDING",
}

var ProposalInformation_Status_value = map[string]int32{
	"APPROVED": 0,
	"REJECTED": 1,
	"PENDING":  2,
}

func (x ProposalInformation_Status) String() string {
	return proto.EnumName(ProposalInformation_Status_name, int32(x))
}

func (ProposalInformation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{5, 0}
}

type Vote_Value int32

const (
	Vote_APPROVE Vote_Value = 0
	Vote_REJECT  Vote_Value = 1
)

var Vote_Value_name = map[int32]string{
	0: "APPROVE",
	1: "REJECT",
}

var Vote_Value_value = map[string]int32{
	"APPROVE": 0,
	"REJECT":  1,
}

func (x Vote_Value) String() string {
	return proto.EnumName(Vote_Value_name, int32(x))
}

func (Vote_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{6, 0}
}

type Chain struct {
	ChainID        string   `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Creator        string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Peers          []string `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	SourceURL      string   `protobuf:"bytes,4,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	SourceHash     string   `protobuf:"bytes,5,opt,name=sourceHash,proto3" json:"sourceHash,omitempty"`
	CreatedAt      int64    `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	InitialGenesis []byte   `protobuf:"bytes,7,opt,name=initialGenesis,proto3" json:"initialGenesis,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *Chain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Chain) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Chain) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *Chain) GetSourceHash() string {
	if m != nil {
		return m.SourceHash
	}
	return ""
}

func (m *Chain) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Chain) GetInitialGenesis() []byte {
	if m != nil {
		return m.InitialGenesis
	}
	return nil
}

type Proposal struct {
	ProposalInformation *ProposalInformation `protobuf:"bytes,1,opt,name=proposalInformation,proto3" json:"proposalInformation,omitempty"`
	ProposalPayload     *types.Any           `protobuf:"bytes,2,opt,name=proposalPayload,proto3" json:"proposalPayload,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{1}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetProposalInformation() *ProposalInformation {
	if m != nil {
		return m.ProposalInformation
	}
	return nil
}

func (m *Proposal) GetProposalPayload() *types.Any {
	if m != nil {
		return m.ProposalPayload
	}
	return nil
}

type ProposalChange struct {
	ProposalInformation *ProposalInformation   `protobuf:"bytes,1,opt,name=proposalInformation,proto3" json:"proposalInformation,omitempty"`
	ProposalPayload     *ProposalChangePayload `protobuf:"bytes,2,opt,name=proposalPayload,proto3" json:"proposalPayload,omitempty"`
}

func (m *ProposalChange) Reset()         { *m = ProposalChange{} }
func (m *ProposalChange) String() string { return proto.CompactTextString(m) }
func (*ProposalChange) ProtoMessage()    {}
func (*ProposalChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{2}
}
func (m *ProposalChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalChange.Merge(m, src)
}
func (m *ProposalChange) XXX_Size() int {
	return m.Size()
}
func (m *ProposalChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalChange.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalChange proto.InternalMessageInfo

func (m *ProposalChange) GetProposalInformation() *ProposalInformation {
	if m != nil {
		return m.ProposalInformation
	}
	return nil
}

func (m *ProposalChange) GetProposalPayload() *ProposalChangePayload {
	if m != nil {
		return m.ProposalPayload
	}
	return nil
}

type ProposalAddAccount struct {
	ProposalInformation *ProposalInformation       `protobuf:"bytes,1,opt,name=proposalInformation,proto3" json:"proposalInformation,omitempty"`
	ProposalPayload     *ProposalAddAccountPayload `protobuf:"bytes,2,opt,name=proposalPayload,proto3" json:"proposalPayload,omitempty"`
}

func (m *ProposalAddAccount) Reset()         { *m = ProposalAddAccount{} }
func (m *ProposalAddAccount) String() string { return proto.CompactTextString(m) }
func (*ProposalAddAccount) ProtoMessage()    {}
func (*ProposalAddAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{3}
}
func (m *ProposalAddAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddAccount.Merge(m, src)
}
func (m *ProposalAddAccount) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddAccount proto.InternalMessageInfo

func (m *ProposalAddAccount) GetProposalInformation() *ProposalInformation {
	if m != nil {
		return m.ProposalInformation
	}
	return nil
}

func (m *ProposalAddAccount) GetProposalPayload() *ProposalAddAccountPayload {
	if m != nil {
		return m.ProposalPayload
	}
	return nil
}

type ProposalAddValidator struct {
	ProposalInformation *ProposalInformation         `protobuf:"bytes,1,opt,name=proposalInformation,proto3" json:"proposalInformation,omitempty"`
	ProposalPayload     *ProposalAddValidatorPayload `protobuf:"bytes,2,opt,name=proposalPayload,proto3" json:"proposalPayload,omitempty"`
}

func (m *ProposalAddValidator) Reset()         { *m = ProposalAddValidator{} }
func (m *ProposalAddValidator) String() string { return proto.CompactTextString(m) }
func (*ProposalAddValidator) ProtoMessage()    {}
func (*ProposalAddValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{4}
}
func (m *ProposalAddValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddValidator.Merge(m, src)
}
func (m *ProposalAddValidator) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddValidator.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddValidator proto.InternalMessageInfo

func (m *ProposalAddValidator) GetProposalInformation() *ProposalInformation {
	if m != nil {
		return m.ProposalInformation
	}
	return nil
}

func (m *ProposalAddValidator) GetProposalPayload() *ProposalAddValidatorPayload {
	if m != nil {
		return m.ProposalPayload
	}
	return nil
}

type ProposalInformation struct {
	ProposalID int32                      `protobuf:"varint,1,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
	Creator    string                     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt  int64                      `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Status     ProposalInformation_Status `protobuf:"varint,4,opt,name=status,proto3,enum=spn.genesis.v1beta1.ProposalInformation_Status" json:"status,omitempty"`
	Votes      []*Vote                    `protobuf:"bytes,5,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (m *ProposalInformation) Reset()         { *m = ProposalInformation{} }
func (m *ProposalInformation) String() string { return proto.CompactTextString(m) }
func (*ProposalInformation) ProtoMessage()    {}
func (*ProposalInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{5}
}
func (m *ProposalInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInformation.Merge(m, src)
}
func (m *ProposalInformation) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInformation.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInformation proto.InternalMessageInfo

func (m *ProposalInformation) GetProposalID() int32 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *ProposalInformation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ProposalInformation) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ProposalInformation) GetStatus() ProposalInformation_Status {
	if m != nil {
		return m.Status
	}
	return ProposalInformation_APPROVED
}

func (m *ProposalInformation) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type Vote struct {
	VoteID    int32      `protobuf:"varint,1,opt,name=voteID,proto3" json:"voteID,omitempty"`
	Creator   string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt int64      `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Value     Vote_Value `protobuf:"varint,4,opt,name=value,proto3,enum=spn.genesis.v1beta1.Vote_Value" json:"value,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{6}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoteID() int32 {
	if m != nil {
		return m.VoteID
	}
	return 0
}

func (m *Vote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Vote) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Vote) GetValue() Vote_Value {
	if m != nil {
		return m.Value
	}
	return Vote_APPROVE
}

type ProposalChangePayload struct {
	ChangePath string `protobuf:"bytes,2,opt,name=changePath,proto3" json:"changePath,omitempty"`
	NewValue   string `protobuf:"bytes,3,opt,name=newValue,proto3" json:"newValue,omitempty"`
}

func (m *ProposalChangePayload) Reset()         { *m = ProposalChangePayload{} }
func (m *ProposalChangePayload) String() string { return proto.CompactTextString(m) }
func (*ProposalChangePayload) ProtoMessage()    {}
func (*ProposalChangePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{7}
}
func (m *ProposalChangePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalChangePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalChangePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalChangePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalChangePayload.Merge(m, src)
}
func (m *ProposalChangePayload) XXX_Size() int {
	return m.Size()
}
func (m *ProposalChangePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalChangePayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalChangePayload proto.InternalMessageInfo

func (m *ProposalChangePayload) GetChangePath() string {
	if m != nil {
		return m.ChangePath
	}
	return ""
}

func (m *ProposalChangePayload) GetNewValue() string {
	if m != nil {
		return m.NewValue
	}
	return ""
}

type ProposalAddAccountPayload struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Coins   []*Coin                                       `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (m *ProposalAddAccountPayload) Reset()         { *m = ProposalAddAccountPayload{} }
func (m *ProposalAddAccountPayload) String() string { return proto.CompactTextString(m) }
func (*ProposalAddAccountPayload) ProtoMessage()    {}
func (*ProposalAddAccountPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{8}
}
func (m *ProposalAddAccountPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddAccountPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddAccountPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddAccountPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddAccountPayload.Merge(m, src)
}
func (m *ProposalAddAccountPayload) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddAccountPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddAccountPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddAccountPayload proto.InternalMessageInfo

func (m *ProposalAddAccountPayload) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ProposalAddAccountPayload) GetCoins() []*Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

type ProposalAddValidatorPayload struct {
	OperatorAddress github_com_cosmos_cosmos_sdk_types.ValAddress  `protobuf:"bytes,2,opt,name=operatorAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"operatorAddress,omitempty"`
	ConsensusPubKey github_com_cosmos_cosmos_sdk_types.ConsAddress `protobuf:"bytes,3,opt,name=consensusPubKey,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ConsAddress" json:"consensusPubKey,omitempty"`
	Description     *ProposalAddValidatorPayload_Description       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Commission      *ProposalAddValidatorPayload_Comission         `protobuf:"bytes,5,opt,name=commission,proto3" json:"commission,omitempty"`
	SelfDelegation  *Coin                                          `protobuf:"bytes,6,opt,name=selfDelegation,proto3" json:"selfDelegation,omitempty"`
	GenTx           []byte                                         `protobuf:"bytes,7,opt,name=genTx,proto3" json:"genTx,omitempty"`
}

func (m *ProposalAddValidatorPayload) Reset()         { *m = ProposalAddValidatorPayload{} }
func (m *ProposalAddValidatorPayload) String() string { return proto.CompactTextString(m) }
func (*ProposalAddValidatorPayload) ProtoMessage()    {}
func (*ProposalAddValidatorPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{9}
}
func (m *ProposalAddValidatorPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddValidatorPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddValidatorPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddValidatorPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddValidatorPayload.Merge(m, src)
}
func (m *ProposalAddValidatorPayload) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddValidatorPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddValidatorPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddValidatorPayload proto.InternalMessageInfo

func (m *ProposalAddValidatorPayload) GetOperatorAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.OperatorAddress
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetConsensusPubKey() github_com_cosmos_cosmos_sdk_types.ConsAddress {
	if m != nil {
		return m.ConsensusPubKey
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetDescription() *ProposalAddValidatorPayload_Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetCommission() *ProposalAddValidatorPayload_Comission {
	if m != nil {
		return m.Commission
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetSelfDelegation() *Coin {
	if m != nil {
		return m.SelfDelegation
	}
	return nil
}

func (m *ProposalAddValidatorPayload) GetGenTx() []byte {
	if m != nil {
		return m.GenTx
	}
	return nil
}

type ProposalAddValidatorPayload_Description struct {
	Moniker         string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Identity        string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Website         string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	Details         string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *ProposalAddValidatorPayload_Description) Reset() {
	*m = ProposalAddValidatorPayload_Description{}
}
func (m *ProposalAddValidatorPayload_Description) String() string { return proto.CompactTextString(m) }
func (*ProposalAddValidatorPayload_Description) ProtoMessage()    {}
func (*ProposalAddValidatorPayload_Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{9, 0}
}
func (m *ProposalAddValidatorPayload_Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddValidatorPayload_Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddValidatorPayload_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddValidatorPayload_Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddValidatorPayload_Description.Merge(m, src)
}
func (m *ProposalAddValidatorPayload_Description) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddValidatorPayload_Description) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddValidatorPayload_Description.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddValidatorPayload_Description proto.InternalMessageInfo

func (m *ProposalAddValidatorPayload_Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *ProposalAddValidatorPayload_Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ProposalAddValidatorPayload_Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *ProposalAddValidatorPayload_Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *ProposalAddValidatorPayload_Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type ProposalAddValidatorPayload_Comission struct {
	CommissionMaxChangeRate string `protobuf:"bytes,1,opt,name=commissionMaxChangeRate,proto3" json:"commissionMaxChangeRate,omitempty"`
	CommissionMaxRate       string `protobuf:"bytes,2,opt,name=commissionMaxRate,proto3" json:"commissionMaxRate,omitempty"`
	CommissionRate          string `protobuf:"bytes,3,opt,name=commissionRate,proto3" json:"commissionRate,omitempty"`
}

func (m *ProposalAddValidatorPayload_Comission) Reset()         { *m = ProposalAddValidatorPayload_Comission{} }
func (m *ProposalAddValidatorPayload_Comission) String() string { return proto.CompactTextString(m) }
func (*ProposalAddValidatorPayload_Comission) ProtoMessage()    {}
func (*ProposalAddValidatorPayload_Comission) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{9, 1}
}
func (m *ProposalAddValidatorPayload_Comission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAddValidatorPayload_Comission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAddValidatorPayload_Comission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAddValidatorPayload_Comission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAddValidatorPayload_Comission.Merge(m, src)
}
func (m *ProposalAddValidatorPayload_Comission) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAddValidatorPayload_Comission) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAddValidatorPayload_Comission.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAddValidatorPayload_Comission proto.InternalMessageInfo

func (m *ProposalAddValidatorPayload_Comission) GetCommissionMaxChangeRate() string {
	if m != nil {
		return m.CommissionMaxChangeRate
	}
	return ""
}

func (m *ProposalAddValidatorPayload_Comission) GetCommissionMaxRate() string {
	if m != nil {
		return m.CommissionMaxRate
	}
	return ""
}

func (m *ProposalAddValidatorPayload_Comission) GetCommissionRate() string {
	if m != nil {
		return m.CommissionRate
	}
	return ""
}

type Coin struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Coin) Reset()         { *m = Coin{} }
func (m *Coin) String() string { return proto.CompactTextString(m) }
func (*Coin) ProtoMessage()    {}
func (*Coin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9557ffb24779ee, []int{10}
}
func (m *Coin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coin.Merge(m, src)
}
func (m *Coin) XXX_Size() int {
	return m.Size()
}
func (m *Coin) XXX_DiscardUnknown() {
	xxx_messageInfo_Coin.DiscardUnknown(m)
}

var xxx_messageInfo_Coin proto.InternalMessageInfo

func (m *Coin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Coin) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterEnum("spn.genesis.v1beta1.ProposalInformation_Status", ProposalInformation_Status_name, ProposalInformation_Status_value)
	proto.RegisterEnum("spn.genesis.v1beta1.Vote_Value", Vote_Value_name, Vote_Value_value)
	proto.RegisterType((*Chain)(nil), "spn.genesis.v1beta1.Chain")
	proto.RegisterType((*Proposal)(nil), "spn.genesis.v1beta1.Proposal")
	proto.RegisterType((*ProposalChange)(nil), "spn.genesis.v1beta1.ProposalChange")
	proto.RegisterType((*ProposalAddAccount)(nil), "spn.genesis.v1beta1.ProposalAddAccount")
	proto.RegisterType((*ProposalAddValidator)(nil), "spn.genesis.v1beta1.ProposalAddValidator")
	proto.RegisterType((*ProposalInformation)(nil), "spn.genesis.v1beta1.ProposalInformation")
	proto.RegisterType((*Vote)(nil), "spn.genesis.v1beta1.Vote")
	proto.RegisterType((*ProposalChangePayload)(nil), "spn.genesis.v1beta1.ProposalChangePayload")
	proto.RegisterType((*ProposalAddAccountPayload)(nil), "spn.genesis.v1beta1.ProposalAddAccountPayload")
	proto.RegisterType((*ProposalAddValidatorPayload)(nil), "spn.genesis.v1beta1.ProposalAddValidatorPayload")
	proto.RegisterType((*ProposalAddValidatorPayload_Description)(nil), "spn.genesis.v1beta1.ProposalAddValidatorPayload.Description")
	proto.RegisterType((*ProposalAddValidatorPayload_Comission)(nil), "spn.genesis.v1beta1.ProposalAddValidatorPayload.Comission")
	proto.RegisterType((*Coin)(nil), "spn.genesis.v1beta1.Coin")
}

func init() { proto.RegisterFile("genesis/v1beta/types.proto", fileDescriptor_ff9557ffb24779ee) }

var fileDescriptor_ff9557ffb24779ee = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x23, 0xc5,
	0x13, 0xcd, 0x24, 0xb1, 0x13, 0x97, 0xa3, 0xc4, 0xbf, 0x4e, 0x7e, 0xe0, 0x18, 0xe4, 0x58, 0x73,
	0x40, 0x5e, 0xc4, 0xce, 0x10, 0x03, 0x12, 0x42, 0x08, 0xc9, 0xb1, 0xad, 0x10, 0x16, 0x16, 0x6b,
	0x36, 0x58, 0x28, 0x20, 0x50, 0x7b, 0xa6, 0x63, 0xb7, 0xd6, 0xee, 0xb6, 0xa6, 0xdb, 0xd9, 0xf8,
	0x5b, 0x70, 0x05, 0x6e, 0x1c, 0xb8, 0xc2, 0x67, 0xe0, 0x84, 0x38, 0xa0, 0xbd, 0x20, 0x71, 0x5a,
	0xa1, 0xe4, 0x5b, 0xec, 0x09, 0xf5, 0x9f, 0xb1, 0xbd, 0x8e, 0x6d, 0x76, 0x57, 0xca, 0xc9, 0xf3,
	0xaa, 0xab, 0x9e, 0xdf, 0xab, 0xee, 0x9a, 0x69, 0x28, 0x74, 0x08, 0x23, 0x82, 0x0a, 0xff, 0xe2,
	0xb0, 0x4d, 0x24, 0xf6, 0xe5, 0x68, 0x40, 0x84, 0x37, 0x88, 0xb9, 0xe4, 0x68, 0x57, 0x0c, 0x98,
	0x67, 0xd7, 0x3d, 0xb3, 0x7e, 0x58, 0xd8, 0xef, 0x70, 0xde, 0xe9, 0x11, 0x5f, 0xa7, 0xb4, 0x87,
	0xe7, 0x3e, 0x66, 0x23, 0x93, 0x5f, 0xd8, 0xeb, 0xf0, 0x0e, 0xd7, 0x8f, 0xbe, 0x7a, 0x32, 0x51,
	0xf7, 0x2f, 0x07, 0x52, 0xb5, 0x2e, 0xa6, 0x0c, 0xe5, 0x61, 0x23, 0x54, 0x0f, 0x27, 0xf5, 0xbc,
	0x53, 0x72, 0xca, 0x99, 0x20, 0x81, 0x7a, 0x25, 0x26, 0x58, 0xf2, 0x38, 0xbf, 0x6a, 0x57, 0x0c,
	0x44, 0x7b, 0x90, 0x1a, 0x10, 0x12, 0x8b, 0xfc, 0x5a, 0x69, 0xad, 0x9c, 0x09, 0x0c, 0x40, 0xaf,
	0x43, 0x46, 0xf0, 0x61, 0x1c, 0x92, 0x2f, 0x82, 0x4f, 0xf3, 0xeb, 0xba, 0x62, 0x12, 0x40, 0x45,
	0x00, 0x03, 0x3e, 0xc6, 0xa2, 0x9b, 0x4f, 0xe9, 0xe5, 0xa9, 0x88, 0xaa, 0xd6, 0xf4, 0x24, 0xaa,
	0xca, 0x7c, 0xba, 0xe4, 0x94, 0xd7, 0x82, 0x49, 0x00, 0xbd, 0x01, 0xdb, 0x94, 0x51, 0x49, 0x71,
	0xef, 0xd8, 0x58, 0xcf, 0x6f, 0x94, 0x9c, 0xf2, 0x56, 0x30, 0x13, 0x75, 0x7f, 0x76, 0x60, 0xb3,
	0x19, 0xf3, 0x01, 0x17, 0xb8, 0x87, 0xce, 0x60, 0x77, 0x60, 0x9f, 0x4f, 0xd8, 0x39, 0x8f, 0xfb,
	0x58, 0x52, 0xce, 0xb4, 0xcd, 0x6c, 0xa5, 0xec, 0xcd, 0x69, 0xa4, 0xd7, 0xbc, 0x99, 0x1f, 0xcc,
	0x23, 0x41, 0x1f, 0xc1, 0x4e, 0x12, 0x6e, 0xe2, 0x51, 0x8f, 0xe3, 0x48, 0x37, 0x29, 0x5b, 0xd9,
	0xf3, 0xcc, 0x5e, 0x78, 0xc9, 0x5e, 0x78, 0x55, 0x36, 0x0a, 0x66, 0x93, 0xdd, 0xdf, 0x1c, 0xd8,
	0x4e, 0xfe, 0xac, 0xd6, 0xc5, 0xac, 0x43, 0x6e, 0x55, 0xee, 0xe9, 0x22, 0xb9, 0x6f, 0x2e, 0xe5,
	0x35, 0xca, 0x6c, 0xc5, 0x4d, 0x13, 0x7f, 0x38, 0x80, 0x92, 0xd4, 0x6a, 0x14, 0x55, 0xc3, 0x90,
	0x0f, 0x99, 0xbc, 0x55, 0x23, 0x5f, 0x2e, 0x32, 0xe2, 0x2d, 0xe5, 0x9d, 0xa8, 0x5b, 0x68, 0xe6,
	0x4f, 0x07, 0xf6, 0xa6, 0xd2, 0x5b, 0xb8, 0x47, 0x23, 0x7d, 0xda, 0x6f, 0xd3, 0xce, 0xd9, 0x22,
	0x3b, 0x6f, 0xff, 0x97, 0x9d, 0xb1, 0xbe, 0x85, 0x86, 0x7e, 0x58, 0x85, 0xdd, 0x39, 0x42, 0xd4,
	0x24, 0x8e, 0xa5, 0x98, 0xa1, 0x4f, 0x05, 0x53, 0x91, 0x25, 0x73, 0xff, 0xcc, 0x8c, 0xae, 0xcd,
	0xce, 0xe8, 0x31, 0xa4, 0x85, 0xc4, 0x72, 0x28, 0xf4, 0xf0, 0x6f, 0x57, 0xfc, 0xe7, 0x6d, 0x8d,
	0xf7, 0x40, 0x97, 0x05, 0xb6, 0x1c, 0xf9, 0x90, 0xba, 0xe0, 0x92, 0x88, 0x7c, 0xaa, 0xb4, 0x56,
	0xce, 0x56, 0xf6, 0xe7, 0xf2, 0xb4, 0xb8, 0x24, 0x81, 0xc9, 0x73, 0x0f, 0x21, 0x6d, 0x28, 0xd0,
	0x16, 0x6c, 0x56, 0x9b, 0xcd, 0xe0, 0xf3, 0x56, 0xa3, 0x9e, 0x5b, 0x51, 0x28, 0x68, 0x7c, 0xd2,
	0xa8, 0x9d, 0x36, 0xea, 0x39, 0x07, 0x65, 0x61, 0xa3, 0xd9, 0xb8, 0x5f, 0x3f, 0xb9, 0x7f, 0x9c,
	0x5b, 0x75, 0x7f, 0x71, 0x60, 0x5d, 0x51, 0xa0, 0x57, 0x20, 0xad, 0x48, 0xc6, 0x9d, 0xb0, 0xe8,
	0xa5, 0xbb, 0xf0, 0x1e, 0xa4, 0x2e, 0x70, 0x6f, 0x48, 0x6c, 0x13, 0x0e, 0x16, 0x8a, 0xf7, 0x5a,
	0x2a, 0x2d, 0x30, 0xd9, 0x6e, 0x09, 0x52, 0x1a, 0x2b, 0x95, 0xd6, 0x41, 0x6e, 0x05, 0x01, 0xa4,
	0x8d, 0x81, 0x9c, 0xe3, 0x3e, 0x80, 0xff, 0xcf, 0x1d, 0x4b, 0xb5, 0x9f, 0xa1, 0x0d, 0xc8, 0xae,
	0x15, 0x3b, 0x15, 0x41, 0x05, 0xd8, 0x64, 0xe4, 0x91, 0x66, 0xd7, 0x72, 0x33, 0xc1, 0x18, 0xbb,
	0xdf, 0x3b, 0xb0, 0xbf, 0x70, 0x46, 0xd0, 0x3d, 0xd8, 0xc0, 0x51, 0x14, 0x13, 0x21, 0x34, 0xed,
	0xd6, 0xd1, 0xe1, 0xd3, 0x27, 0x07, 0x77, 0x3b, 0x54, 0x76, 0x87, 0x6d, 0x2f, 0xe4, 0x7d, 0x3f,
	0xe4, 0xa2, 0xcf, 0x85, 0xfd, 0xb9, 0x2b, 0xa2, 0x87, 0xf6, 0x53, 0x55, 0x0d, 0xc3, 0xaa, 0x29,
	0x0c, 0x12, 0x06, 0xb5, 0xab, 0x21, 0xa7, 0xcc, 0x7c, 0x34, 0x16, 0xed, 0x6a, 0x8d, 0x53, 0x16,
	0x98, 0x3c, 0xf7, 0xd7, 0x34, 0xbc, 0xb6, 0xe4, 0xc0, 0xa3, 0xaf, 0x60, 0x87, 0x0f, 0x48, 0xac,
	0x42, 0xd5, 0x97, 0x52, 0xd9, 0xd2, 0xbc, 0x5a, 0xe5, 0x2c, 0x13, 0xfa, 0x1a, 0x76, 0x42, 0xce,
	0x04, 0x61, 0x62, 0x28, 0x9a, 0xc3, 0xf6, 0x3d, 0x32, 0xd2, 0xbd, 0xdb, 0x3a, 0xaa, 0x3c, 0x7d,
	0x72, 0xe0, 0x3d, 0x07, 0x79, 0x8d, 0x33, 0x31, 0x66, 0x9f, 0xa1, 0x42, 0xdf, 0x40, 0x36, 0x22,
	0x22, 0x8c, 0xe9, 0x40, 0xbf, 0x4a, 0xd6, 0xf5, 0xc8, 0x7f, 0xf8, 0xa2, 0x23, 0xef, 0xd5, 0x27,
	0x1c, 0xc1, 0x34, 0x21, 0x3a, 0x03, 0x08, 0x79, 0xbf, 0x4f, 0x85, 0x50, 0xf4, 0x29, 0x4d, 0xff,
	0xc1, 0x0b, 0xd3, 0xd7, 0xb8, 0x65, 0x08, 0xa6, 0xd8, 0x50, 0x15, 0xb6, 0x05, 0xe9, 0x9d, 0xd7,
	0x49, 0x8f, 0x74, 0xcc, 0x9b, 0x30, 0xad, 0xf9, 0x97, 0x6c, 0xe8, 0x4c, 0x81, 0xba, 0x3f, 0x74,
	0x08, 0x3b, 0xbd, 0xb4, 0x1f, 0x71, 0x03, 0x0a, 0x3f, 0x39, 0x90, 0x9d, 0x72, 0xa4, 0x26, 0xb0,
	0xcf, 0x19, 0x7d, 0x48, 0xe2, 0xe4, 0x66, 0x62, 0xa1, 0x3a, 0xd1, 0x34, 0x22, 0x4c, 0x52, 0x39,
	0xb2, 0xe7, 0x7d, 0x8c, 0x55, 0xd5, 0x23, 0xd2, 0x16, 0x54, 0x26, 0x87, 0x3d, 0x81, 0xe8, 0x0e,
	0xe4, 0x04, 0x09, 0x87, 0x31, 0x95, 0xa3, 0x6f, 0x43, 0xce, 0x24, 0x0e, 0xa5, 0xbd, 0xa6, 0xec,
	0x24, 0xf1, 0x9a, 0x09, 0x2b, 0x92, 0x88, 0x48, 0x4c, 0x7b, 0xc2, 0xde, 0x54, 0x12, 0x58, 0xf8,
	0xd1, 0x81, 0xcc, 0xb8, 0x2f, 0xe8, 0x7d, 0x78, 0x75, 0xd2, 0x99, 0xcf, 0xf0, 0xa5, 0x19, 0xcc,
	0x00, 0x4b, 0x62, 0x25, 0x2f, 0x5a, 0x46, 0x6f, 0xc1, 0xff, 0x9e, 0x59, 0xd2, 0x35, 0xc6, 0xcb,
	0xcd, 0x05, 0x75, 0xfd, 0x99, 0x04, 0x75, 0xaa, 0xf1, 0x36, 0x13, 0x75, 0xdf, 0x85, 0x75, 0xd5,
	0x70, 0xd5, 0xe0, 0x88, 0x30, 0xde, 0xb7, 0x2a, 0x0c, 0x50, 0xaf, 0x3a, 0xdc, 0x57, 0xf3, 0x6d,
	0xff, 0xc8, 0xa2, 0xa3, 0xda, 0xef, 0x57, 0x45, 0xe7, 0xf1, 0x55, 0xd1, 0xf9, 0xe7, 0xaa, 0xe8,
	0x7c, 0x77, 0x5d, 0x5c, 0x79, 0x7c, 0x5d, 0x5c, 0xf9, 0xfb, 0xba, 0xb8, 0x72, 0x76, 0x67, 0xea,
	0xa0, 0x4b, 0xc2, 0x22, 0x12, 0xf7, 0x29, 0x93, 0xbe, 0x18, 0x30, 0xff, 0xd2, 0x4f, 0x2e, 0xa9,
	0xfa, 0xbc, 0xb7, 0xd3, 0xfa, 0xbe, 0xf3, 0xce, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xcd,
	0xc5, 0x44, 0xbc, 0x0a, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialGenesis) > 0 {
		i -= len(m.InitialGenesis)
		copy(dAtA[i:], m.InitialGenesis)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InitialGenesis)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SourceHash) > 0 {
		i -= len(m.SourceHash)
		copy(dAtA[i:], m.SourceHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceURL) > 0 {
		i -= len(m.SourceURL)
		copy(dAtA[i:], m.SourceURL)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Peers[iNdEx])
			copy(dAtA[i:], m.Peers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Peers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalPayload != nil {
		{
			size, err := m.ProposalPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalInformation != nil {
		{
			size, err := m.ProposalInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalPayload != nil {
		{
			size, err := m.ProposalPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalInformation != nil {
		{
			size, err := m.ProposalInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalPayload != nil {
		{
			size, err := m.ProposalPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalInformation != nil {
		{
			size, err := m.ProposalInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalPayload != nil {
		{
			size, err := m.ProposalPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalInformation != nil {
		{
			size, err := m.ProposalInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProposalID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.VoteID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VoteID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalChangePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalChangePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalChangePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewValue) > 0 {
		i -= len(m.NewValue)
		copy(dAtA[i:], m.NewValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NewValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChangePath) > 0 {
		i -= len(m.ChangePath)
		copy(dAtA[i:], m.ChangePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChangePath)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddAccountPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddAccountPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddAccountPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddValidatorPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddValidatorPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddValidatorPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GenTx) > 0 {
		i -= len(m.GenTx)
		copy(dAtA[i:], m.GenTx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GenTx)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SelfDelegation != nil {
		{
			size, err := m.SelfDelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Commission != nil {
		{
			size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsensusPubKey) > 0 {
		i -= len(m.ConsensusPubKey)
		copy(dAtA[i:], m.ConsensusPubKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ConsensusPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddValidatorPayload_Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddValidatorPayload_Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddValidatorPayload_Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalAddValidatorPayload_Comission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAddValidatorPayload_Comission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAddValidatorPayload_Comission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionRate) > 0 {
		i -= len(m.CommissionRate)
		copy(dAtA[i:], m.CommissionRate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CommissionRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CommissionMaxRate) > 0 {
		i -= len(m.CommissionMaxRate)
		copy(dAtA[i:], m.CommissionMaxRate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CommissionMaxRate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommissionMaxChangeRate) > 0 {
		i -= len(m.CommissionMaxChangeRate)
		copy(dAtA[i:], m.CommissionMaxChangeRate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CommissionMaxChangeRate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Coin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, s := range m.Peers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.SourceURL)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SourceHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTypes(uint64(m.CreatedAt))
	}
	l = len(m.InitialGenesis)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalInformation != nil {
		l = m.ProposalInformation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalPayload != nil {
		l = m.ProposalPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalInformation != nil {
		l = m.ProposalInformation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalPayload != nil {
		l = m.ProposalPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalAddAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalInformation != nil {
		l = m.ProposalInformation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalPayload != nil {
		l = m.ProposalPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalAddValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalInformation != nil {
		l = m.ProposalInformation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalPayload != nil {
		l = m.ProposalPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalID != 0 {
		n += 1 + sovTypes(uint64(m.ProposalID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTypes(uint64(m.CreatedAt))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteID != 0 {
		n += 1 + sovTypes(uint64(m.VoteID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTypes(uint64(m.CreatedAt))
	}
	if m.Value != 0 {
		n += 1 + sovTypes(uint64(m.Value))
	}
	return n
}

func (m *ProposalChangePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NewValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalAddAccountPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ProposalAddValidatorPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ConsensusPubKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SelfDelegation != nil {
		l = m.SelfDelegation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GenTx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalAddValidatorPayload_Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProposalAddValidatorPayload_Comission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommissionMaxChangeRate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CommissionMaxRate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CommissionRate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Coin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialGenesis", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialGenesis = append(m.InitialGenesis[:0], dAtA[iNdEx:postIndex]...)
			if m.InitialGenesis == nil {
				m.InitialGenesis = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalInformation == nil {
				m.ProposalInformation = &ProposalInformation{}
			}
			if err := m.ProposalInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalPayload == nil {
				m.ProposalPayload = &types.Any{}
			}
			if err := m.ProposalPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalInformation == nil {
				m.ProposalInformation = &ProposalInformation{}
			}
			if err := m.ProposalInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalPayload == nil {
				m.ProposalPayload = &ProposalChangePayload{}
			}
			if err := m.ProposalPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAddAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAddAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalInformation == nil {
				m.ProposalInformation = &ProposalInformation{}
			}
			if err := m.ProposalInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalPayload == nil {
				m.ProposalPayload = &ProposalAddAccountPayload{}
			}
			if err := m.ProposalPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAddValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAddValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalInformation == nil {
				m.ProposalInformation = &ProposalInformation{}
			}
			if err := m.ProposalInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalPayload == nil {
				m.ProposalPayload = &ProposalAddValidatorPayload{}
			}
			if err := m.ProposalPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalInformation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &Vote{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteID", wireType)
			}
			m.VoteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= Vote_Value(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalChangePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalChangePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalChangePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddAccountPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAddAccountPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAddAccountPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, &Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddValidatorPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAddValidatorPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAddValidatorPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = append(m.OperatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorAddress == nil {
				m.OperatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubKey = append(m.ConsensusPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusPubKey == nil {
				m.ConsensusPubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &ProposalAddValidatorPayload_Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commission == nil {
				m.Commission = &ProposalAddValidatorPayload_Comission{}
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfDelegation == nil {
				m.SelfDelegation = &Coin{}
			}
			if err := m.SelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTx = append(m.GenTx[:0], dAtA[iNdEx:postIndex]...)
			if m.GenTx == nil {
				m.GenTx = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddValidatorPayload_Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAddValidatorPayload_Comission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionMaxChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionMaxChangeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionMaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionMaxRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
