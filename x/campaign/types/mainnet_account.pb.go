// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: campaign/mainnet_account.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MainnetAccount struct {
	CampaignID uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Shares     Shares `protobuf:"bytes,3,rep,name=shares,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"shares"`
}

func (m *MainnetAccount) Reset()         { *m = MainnetAccount{} }
func (m *MainnetAccount) String() string { return proto.CompactTextString(m) }
func (*MainnetAccount) ProtoMessage()    {}
func (*MainnetAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a87a85fe8b4c45d, []int{0}
}
func (m *MainnetAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainnetAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainnetAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainnetAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainnetAccount.Merge(m, src)
}
func (m *MainnetAccount) XXX_Size() int {
	return m.Size()
}
func (m *MainnetAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MainnetAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MainnetAccount proto.InternalMessageInfo

func (m *MainnetAccount) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *MainnetAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MainnetAccount) GetShares() Shares {
	if m != nil {
		return m.Shares
	}
	return nil
}

func init() {
	proto.RegisterType((*MainnetAccount)(nil), "tendermint.spn.campaign.MainnetAccount")
}

func init() { proto.RegisterFile("campaign/mainnet_account.proto", fileDescriptor_0a87a85fe8b4c45d) }

var fileDescriptor_0a87a85fe8b4c45d = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3d, 0x4e, 0xc3, 0x30,
	0x18, 0x86, 0x63, 0x8a, 0x8a, 0x30, 0x12, 0x43, 0x84, 0x44, 0xe8, 0xe0, 0x44, 0x2c, 0x44, 0x48,
	0xd8, 0x2a, 0x4c, 0x8c, 0x94, 0x2e, 0x0c, 0x2c, 0x61, 0x63, 0x41, 0x8e, 0x63, 0xa5, 0x16, 0xc4,
	0x8e, 0xf2, 0xb9, 0x08, 0x6e, 0xc1, 0x39, 0x38, 0x01, 0x47, 0xe8, 0xd8, 0x91, 0xa9, 0xa0, 0xe4,
	0x16, 0x4c, 0xa8, 0x71, 0x02, 0x9d, 0xfc, 0xf7, 0xfa, 0x79, 0x3e, 0xbd, 0x98, 0x08, 0x5e, 0x94,
	0x5c, 0xe5, 0x9a, 0x15, 0x5c, 0x69, 0x2d, 0xed, 0x03, 0x17, 0xc2, 0xcc, 0xb5, 0xa5, 0x65, 0x65,
	0xac, 0xf1, 0x0f, 0xad, 0xd4, 0x99, 0xac, 0x0a, 0xa5, 0x2d, 0x85, 0x52, 0xd3, 0x3e, 0x3e, 0x3a,
	0xc8, 0x4d, 0x6e, 0xda, 0x0c, 0x5b, 0xef, 0x5c, 0x7c, 0x44, 0x84, 0x81, 0xc2, 0x00, 0x4b, 0x39,
	0x48, 0xf6, 0x3c, 0x4e, 0xa5, 0xe5, 0x63, 0x26, 0x8c, 0xd2, 0xee, 0xfd, 0xf8, 0x03, 0xe1, 0xfd,
	0x5b, 0x27, 0xba, 0x72, 0x1e, 0x9f, 0x60, 0xdc, 0x43, 0x6f, 0xa6, 0x01, 0x8a, 0x50, 0xbc, 0x9d,
	0x6c, 0xdc, 0xf8, 0x01, 0xde, 0xe1, 0x59, 0x56, 0x49, 0x80, 0x60, 0x2b, 0x42, 0xf1, 0x6e, 0xd2,
	0x1f, 0xfd, 0x27, 0x3c, 0x84, 0x19, 0xaf, 0x24, 0x04, 0x83, 0x68, 0x10, 0xef, 0x9d, 0x1f, 0x51,
	0x67, 0xa7, 0x6b, 0x3b, 0xed, 0xec, 0xf4, 0xda, 0x28, 0x3d, 0xb9, 0x5c, 0xac, 0x42, 0xef, 0x67,
	0x15, 0x9e, 0xe4, 0xca, 0xce, 0xe6, 0x29, 0x15, 0xa6, 0x60, 0xdd, 0xa8, 0x6e, 0x39, 0x83, 0xec,
	0x91, 0xd9, 0xd7, 0x52, 0x42, 0xfb, 0xe1, 0xfd, 0x2b, 0x1c, 0xde, 0xb5, 0xec, 0xa4, 0x73, 0x4c,
	0xa6, 0x8b, 0x9a, 0xa0, 0x65, 0x4d, 0xd0, 0x77, 0x4d, 0xd0, 0x5b, 0x43, 0xbc, 0x65, 0x43, 0xbc,
	0xcf, 0x86, 0x78, 0xf7, 0xa7, 0x1b, 0xd0, 0xff, 0xba, 0x18, 0x94, 0x9a, 0xbd, 0xb0, 0xbf, 0x7e,
	0x5b, 0x78, 0x3a, 0x6c, 0x7b, 0xb8, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x54, 0x80, 0xec,
	0x78, 0x01, 0x00, 0x00,
}

func (m *MainnetAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainnetAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainnetAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMainnetAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMainnetAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintMainnetAccount(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMainnetAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovMainnetAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MainnetAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovMainnetAccount(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMainnetAccount(uint64(l))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovMainnetAccount(uint64(l))
		}
	}
	return n
}

func sovMainnetAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMainnetAccount(x uint64) (n int) {
	return sovMainnetAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MainnetAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainnetAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainnetAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainnetAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMainnetAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainnetAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainnetAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainnetAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMainnetAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMainnetAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMainnetAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMainnetAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMainnetAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMainnetAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMainnetAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMainnetAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMainnetAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMainnetAccount = fmt.Errorf("proto: unexpected end of group")
)
