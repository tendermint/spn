// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: campaign/mainnet_vesting_account.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MainnetVestingAccount struct {
	CampaignID     uint64              `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address        string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StartingShares Shares              `protobuf:"bytes,3,rep,name=startingShares,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"startingShares"`
	VestingOptions ShareVestingOptions `protobuf:"bytes,4,opt,name=vestingOptions,proto3" json:"vestingOptions"`
}

func (m *MainnetVestingAccount) Reset()         { *m = MainnetVestingAccount{} }
func (m *MainnetVestingAccount) String() string { return proto.CompactTextString(m) }
func (*MainnetVestingAccount) ProtoMessage()    {}
func (*MainnetVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d9b25b318c41d6, []int{0}
}
func (m *MainnetVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainnetVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainnetVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainnetVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainnetVestingAccount.Merge(m, src)
}
func (m *MainnetVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *MainnetVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MainnetVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MainnetVestingAccount proto.InternalMessageInfo

func (m *MainnetVestingAccount) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *MainnetVestingAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MainnetVestingAccount) GetStartingShares() Shares {
	if m != nil {
		return m.StartingShares
	}
	return nil
}

func (m *MainnetVestingAccount) GetVestingOptions() ShareVestingOptions {
	if m != nil {
		return m.VestingOptions
	}
	return ShareVestingOptions{}
}

type ShareVestingOptions struct {
	// Types that are valid to be assigned to Options:
	//	*ShareVestingOptions_DelayedVesting
	Options isShareVestingOptions_Options `protobuf_oneof:"options"`
}

func (m *ShareVestingOptions) Reset()         { *m = ShareVestingOptions{} }
func (m *ShareVestingOptions) String() string { return proto.CompactTextString(m) }
func (*ShareVestingOptions) ProtoMessage()    {}
func (*ShareVestingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d9b25b318c41d6, []int{1}
}
func (m *ShareVestingOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareVestingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareVestingOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareVestingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareVestingOptions.Merge(m, src)
}
func (m *ShareVestingOptions) XXX_Size() int {
	return m.Size()
}
func (m *ShareVestingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareVestingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ShareVestingOptions proto.InternalMessageInfo

type isShareVestingOptions_Options interface {
	isShareVestingOptions_Options()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShareVestingOptions_DelayedVesting struct {
	DelayedVesting *ShareDelayedVesting `protobuf:"bytes,1,opt,name=delayedVesting,proto3,oneof" json:"delayedVesting,omitempty"`
}

func (*ShareVestingOptions_DelayedVesting) isShareVestingOptions_Options() {}

func (m *ShareVestingOptions) GetOptions() isShareVestingOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ShareVestingOptions) GetDelayedVesting() *ShareDelayedVesting {
	if x, ok := m.GetOptions().(*ShareVestingOptions_DelayedVesting); ok {
		return x.DelayedVesting
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShareVestingOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShareVestingOptions_DelayedVesting)(nil),
	}
}

// ShareDelayedVesting represents options for share delayed vesting
// Delayed vesting is the type of vesting where all vesting coins are vested once end time is reached
type ShareDelayedVesting struct {
	Vesting Shares `protobuf:"bytes,1,rep,name=vesting,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"vesting"`
	EndTime int64  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *ShareDelayedVesting) Reset()         { *m = ShareDelayedVesting{} }
func (m *ShareDelayedVesting) String() string { return proto.CompactTextString(m) }
func (*ShareDelayedVesting) ProtoMessage()    {}
func (*ShareDelayedVesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d9b25b318c41d6, []int{2}
}
func (m *ShareDelayedVesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDelayedVesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDelayedVesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDelayedVesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDelayedVesting.Merge(m, src)
}
func (m *ShareDelayedVesting) XXX_Size() int {
	return m.Size()
}
func (m *ShareDelayedVesting) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDelayedVesting.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDelayedVesting proto.InternalMessageInfo

func (m *ShareDelayedVesting) GetVesting() Shares {
	if m != nil {
		return m.Vesting
	}
	return nil
}

func (m *ShareDelayedVesting) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*MainnetVestingAccount)(nil), "tendermint.spn.campaign.MainnetVestingAccount")
	proto.RegisterType((*ShareVestingOptions)(nil), "tendermint.spn.campaign.ShareVestingOptions")
	proto.RegisterType((*ShareDelayedVesting)(nil), "tendermint.spn.campaign.ShareDelayedVesting")
}

func init() {
	proto.RegisterFile("campaign/mainnet_vesting_account.proto", fileDescriptor_90d9b25b318c41d6)
}

var fileDescriptor_90d9b25b318c41d6 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x41, 0xcf, 0xd2, 0x30,
	0x1c, 0xc6, 0xd7, 0x17, 0x02, 0xa1, 0x24, 0x1c, 0xa6, 0xc6, 0xc9, 0xa1, 0x2c, 0x1c, 0x74, 0x31,
	0xda, 0x06, 0x3c, 0x79, 0x74, 0x72, 0xd0, 0x83, 0x31, 0x99, 0x86, 0x03, 0x17, 0xd2, 0x6d, 0xcd,
	0x68, 0x74, 0xed, 0xb2, 0x16, 0x02, 0x89, 0x1f, 0xc2, 0x6f, 0xe0, 0x5d, 0xbf, 0x08, 0x47, 0x8e,
	0x9e, 0xd0, 0xc0, 0xb7, 0xf0, 0x64, 0xb6, 0x6e, 0x08, 0x44, 0xe3, 0xe9, 0x3d, 0x6d, 0x6d, 0xff,
	0xcf, 0xf3, 0x7b, 0xf2, 0xb4, 0xf0, 0x61, 0x44, 0xd3, 0x8c, 0xf2, 0x44, 0x90, 0x94, 0x72, 0x21,
	0x98, 0x9e, 0xaf, 0x98, 0xd2, 0x5c, 0x24, 0x73, 0x1a, 0x45, 0x72, 0x29, 0x34, 0xce, 0x72, 0xa9,
	0xa5, 0x7d, 0x5f, 0x33, 0x11, 0xb3, 0x3c, 0xe5, 0x42, 0x63, 0x95, 0x09, 0x5c, 0xcb, 0xfa, 0x77,
	0x13, 0x99, 0xc8, 0x72, 0x86, 0x14, 0x7f, 0x66, 0xbc, 0x8f, 0x22, 0xa9, 0x52, 0xa9, 0x48, 0x48,
	0x15, 0x23, 0xab, 0x51, 0xc8, 0x34, 0x1d, 0x91, 0x48, 0x72, 0x61, 0xce, 0x87, 0xdf, 0x6e, 0xe0,
	0xbd, 0x37, 0x06, 0x38, 0x35, 0xbc, 0x17, 0x06, 0x67, 0x23, 0x08, 0x6b, 0xef, 0xd7, 0x13, 0x07,
	0xb8, 0xc0, 0x6b, 0x06, 0x67, 0x3b, 0xb6, 0x03, 0xdb, 0x34, 0x8e, 0x73, 0xa6, 0x94, 0x73, 0xe3,
	0x02, 0xaf, 0x13, 0xd4, 0x4b, 0xfb, 0x13, 0xec, 0x29, 0x4d, 0xf3, 0xc2, 0xec, 0xdd, 0x82, 0xe6,
	0x4c, 0x39, 0x0d, 0xb7, 0xe1, 0x75, 0xc7, 0x0f, 0xb0, 0x09, 0x83, 0x8b, 0x30, 0xb8, 0x0a, 0x83,
	0x5f, 0x4a, 0x2e, 0xfc, 0xe7, 0xdb, 0xfd, 0xc0, 0xfa, 0xb5, 0x1f, 0x3c, 0x4a, 0xb8, 0x5e, 0x2c,
	0x43, 0x1c, 0xc9, 0x94, 0x54, 0xc9, 0xcd, 0xe7, 0xa9, 0x8a, 0x3f, 0x10, 0xbd, 0xc9, 0x98, 0x2a,
	0x05, 0x5f, 0x7f, 0x0c, 0x5a, 0xc6, 0x3b, 0xb8, 0x62, 0xd9, 0x33, 0xd8, 0xab, 0x9a, 0x7b, 0x9b,
	0x69, 0x2e, 0x85, 0x72, 0x9a, 0x2e, 0xf0, 0xba, 0xe3, 0x27, 0xf8, 0x1f, 0xcd, 0xe1, 0x52, 0x38,
	0xbd, 0xd0, 0xf8, 0xcd, 0x22, 0x50, 0x70, 0xe5, 0x34, 0x5c, 0xc3, 0x3b, 0x7f, 0x19, 0xb6, 0xa7,
	0xb0, 0x17, 0xb3, 0x8f, 0x74, 0xc3, 0xe2, 0xea, 0xa0, 0xac, 0xeb, 0xbf, 0xc8, 0xc9, 0x85, 0xe6,
	0x95, 0x15, 0x5c, 0xb9, 0xf8, 0x1d, 0xd8, 0x96, 0x15, 0xf9, 0x0b, 0xa8, 0xd0, 0x97, 0x22, 0x5b,
	0xc0, 0xf6, 0xea, 0xc4, 0xbc, 0xbd, 0x92, 0x6b, 0x48, 0x71, 0xeb, 0x4c, 0xc4, 0xef, 0x79, 0xca,
	0xca, 0x5b, 0x6f, 0x04, 0xf5, 0xd2, 0x9f, 0x6c, 0x0f, 0x08, 0xec, 0x0e, 0x08, 0xfc, 0x3c, 0x20,
	0xf0, 0xf9, 0x88, 0xac, 0xdd, 0x11, 0x59, 0xdf, 0x8f, 0xc8, 0x9a, 0x3d, 0x3e, 0xe3, 0xfd, 0x29,
	0x84, 0xa8, 0x4c, 0x90, 0x35, 0x39, 0x3d, 0xfb, 0x92, 0x1b, 0xb6, 0xca, 0x67, 0xf9, 0xec, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xfe, 0x11, 0x58, 0x0f, 0x03, 0x00, 0x00,
}

func (m *MainnetVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainnetVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainnetVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VestingOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.StartingShares) > 0 {
		for iNdEx := len(m.StartingShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StartingShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareVestingOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareVestingOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareVestingOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShareVestingOptions_DelayedVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareVestingOptions_DelayedVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DelayedVesting != nil {
		{
			size, err := m.DelayedVesting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ShareDelayedVesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDelayedVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareDelayedVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Vesting) > 0 {
		for iNdEx := len(m.Vesting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vesting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMainnetVestingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMainnetVestingAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovMainnetVestingAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MainnetVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovMainnetVestingAccount(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMainnetVestingAccount(uint64(l))
	}
	if len(m.StartingShares) > 0 {
		for _, e := range m.StartingShares {
			l = e.Size()
			n += 1 + l + sovMainnetVestingAccount(uint64(l))
		}
	}
	l = m.VestingOptions.Size()
	n += 1 + l + sovMainnetVestingAccount(uint64(l))
	return n
}

func (m *ShareVestingOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *ShareVestingOptions_DelayedVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelayedVesting != nil {
		l = m.DelayedVesting.Size()
		n += 1 + l + sovMainnetVestingAccount(uint64(l))
	}
	return n
}
func (m *ShareDelayedVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vesting) > 0 {
		for _, e := range m.Vesting {
			l = e.Size()
			n += 1 + l + sovMainnetVestingAccount(uint64(l))
		}
	}
	if m.EndTime != 0 {
		n += 1 + sovMainnetVestingAccount(uint64(m.EndTime))
	}
	return n
}

func sovMainnetVestingAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMainnetVestingAccount(x uint64) (n int) {
	return sovMainnetVestingAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MainnetVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainnetVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainnetVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainnetVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartingShares = append(m.StartingShares, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.StartingShares[len(m.StartingShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainnetVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareVestingOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainnetVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareVestingOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareVestingOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedVesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShareDelayedVesting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &ShareVestingOptions_DelayedVesting{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainnetVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareDelayedVesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainnetVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareDelayedVesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareDelayedVesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vesting = append(m.Vesting, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Vesting[len(m.Vesting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMainnetVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainnetVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMainnetVestingAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMainnetVestingAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMainnetVestingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMainnetVestingAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMainnetVestingAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMainnetVestingAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMainnetVestingAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMainnetVestingAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMainnetVestingAccount = fmt.Errorf("proto: unexpected end of group")
)
