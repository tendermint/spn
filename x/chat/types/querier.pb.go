// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat/v1beta/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryShowChannelRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryShowChannelRequest) Reset()         { *m = QueryShowChannelRequest{} }
func (m *QueryShowChannelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowChannelRequest) ProtoMessage()    {}
func (*QueryShowChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{0}
}
func (m *QueryShowChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowChannelRequest.Merge(m, src)
}
func (m *QueryShowChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowChannelRequest proto.InternalMessageInfo

func (m *QueryShowChannelRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryShowChannelResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryShowChannelResponse) Reset()         { *m = QueryShowChannelResponse{} }
func (m *QueryShowChannelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowChannelResponse) ProtoMessage()    {}
func (*QueryShowChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{1}
}
func (m *QueryShowChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowChannelResponse.Merge(m, src)
}
func (m *QueryShowChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowChannelResponse proto.InternalMessageInfo

func (m *QueryShowChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type QueryListChannelsRequest struct {
}

func (m *QueryListChannelsRequest) Reset()         { *m = QueryListChannelsRequest{} }
func (m *QueryListChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListChannelsRequest) ProtoMessage()    {}
func (*QueryListChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{2}
}
func (m *QueryListChannelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListChannelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListChannelsRequest.Merge(m, src)
}
func (m *QueryListChannelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListChannelsRequest proto.InternalMessageInfo

type QueryListChannelsResponse struct {
	Channels []*Channel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (m *QueryListChannelsResponse) Reset()         { *m = QueryListChannelsResponse{} }
func (m *QueryListChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListChannelsResponse) ProtoMessage()    {}
func (*QueryListChannelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{3}
}
func (m *QueryListChannelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListChannelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListChannelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListChannelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListChannelsResponse.Merge(m, src)
}
func (m *QueryListChannelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListChannelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListChannelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListChannelsResponse proto.InternalMessageInfo

func (m *QueryListChannelsResponse) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type QueryListMessagesRequest struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *QueryListMessagesRequest) Reset()         { *m = QueryListMessagesRequest{} }
func (m *QueryListMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListMessagesRequest) ProtoMessage()    {}
func (*QueryListMessagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{4}
}
func (m *QueryListMessagesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListMessagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListMessagesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListMessagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListMessagesRequest.Merge(m, src)
}
func (m *QueryListMessagesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListMessagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListMessagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListMessagesRequest proto.InternalMessageInfo

func (m *QueryListMessagesRequest) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type QueryListMessagesResponse struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *QueryListMessagesResponse) Reset()         { *m = QueryListMessagesResponse{} }
func (m *QueryListMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListMessagesResponse) ProtoMessage()    {}
func (*QueryListMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{5}
}
func (m *QueryListMessagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListMessagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListMessagesResponse.Merge(m, src)
}
func (m *QueryListMessagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListMessagesResponse proto.InternalMessageInfo

func (m *QueryListMessagesResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type QuerySearchMessagesRequest struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Tag       string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *QuerySearchMessagesRequest) Reset()         { *m = QuerySearchMessagesRequest{} }
func (m *QuerySearchMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySearchMessagesRequest) ProtoMessage()    {}
func (*QuerySearchMessagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{6}
}
func (m *QuerySearchMessagesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySearchMessagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySearchMessagesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySearchMessagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySearchMessagesRequest.Merge(m, src)
}
func (m *QuerySearchMessagesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySearchMessagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySearchMessagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySearchMessagesRequest proto.InternalMessageInfo

func (m *QuerySearchMessagesRequest) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *QuerySearchMessagesRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type QuerySearchMessagesResponse struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *QuerySearchMessagesResponse) Reset()         { *m = QuerySearchMessagesResponse{} }
func (m *QuerySearchMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySearchMessagesResponse) ProtoMessage()    {}
func (*QuerySearchMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566609b8564cf29, []int{7}
}
func (m *QuerySearchMessagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySearchMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySearchMessagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySearchMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySearchMessagesResponse.Merge(m, src)
}
func (m *QuerySearchMessagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySearchMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySearchMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySearchMessagesResponse proto.InternalMessageInfo

func (m *QuerySearchMessagesResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryShowChannelRequest)(nil), "spn.chat.v1beta1.QueryShowChannelRequest")
	proto.RegisterType((*QueryShowChannelResponse)(nil), "spn.chat.v1beta1.QueryShowChannelResponse")
	proto.RegisterType((*QueryListChannelsRequest)(nil), "spn.chat.v1beta1.QueryListChannelsRequest")
	proto.RegisterType((*QueryListChannelsResponse)(nil), "spn.chat.v1beta1.QueryListChannelsResponse")
	proto.RegisterType((*QueryListMessagesRequest)(nil), "spn.chat.v1beta1.QueryListMessagesRequest")
	proto.RegisterType((*QueryListMessagesResponse)(nil), "spn.chat.v1beta1.QueryListMessagesResponse")
	proto.RegisterType((*QuerySearchMessagesRequest)(nil), "spn.chat.v1beta1.QuerySearchMessagesRequest")
	proto.RegisterType((*QuerySearchMessagesResponse)(nil), "spn.chat.v1beta1.QuerySearchMessagesResponse")
}

func init() { proto.RegisterFile("chat/v1beta/querier.proto", fileDescriptor_5566609b8564cf29) }

var fileDescriptor_5566609b8564cf29 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xa5, 0x10, 0xbe, 0x4f, 0x2e, 0x86, 0x90, 0x59, 0x68, 0xa9, 0xa6, 0x21, 0x5d, 0x18, 0xf0,
	0xa7, 0x0d, 0x10, 0x13, 0x97, 0x46, 0x57, 0x26, 0x18, 0x63, 0x75, 0xe5, 0xae, 0xb4, 0x93, 0xb6,
	0x89, 0xfd, 0xa1, 0x33, 0x55, 0x79, 0x0b, 0x9f, 0xc4, 0xe7, 0x70, 0xc9, 0xd2, 0xa5, 0x81, 0x17,
	0x31, 0xb4, 0x53, 0x28, 0xd0, 0x12, 0x8c, 0xbb, 0xe6, 0x9e, 0x73, 0xee, 0x39, 0xbd, 0xf7, 0x66,
	0xa0, 0xa1, 0x5b, 0x1a, 0x55, 0x5e, 0x3a, 0x03, 0x4c, 0x35, 0x65, 0x18, 0xe2, 0xc0, 0xc6, 0x81,
	0xec, 0x07, 0x1e, 0xf5, 0x50, 0x9d, 0xf8, 0xae, 0x3c, 0x83, 0xe5, 0x18, 0xee, 0x08, 0x7b, 0x69,
	0x72, 0x84, 0x44, 0x4c, 0xa9, 0x0d, 0xfb, 0xf7, 0x21, 0x0e, 0x46, 0x0f, 0x96, 0xf7, 0x7a, 0x6d,
	0x69, 0xae, 0x8b, 0x9f, 0x55, 0x3c, 0x0c, 0x31, 0xa1, 0xa8, 0x06, 0x45, 0xdb, 0xe0, 0xb9, 0x26,
	0xd7, 0x2a, 0xab, 0x45, 0xdb, 0x90, 0xee, 0x80, 0x5f, 0xa7, 0x12, 0xdf, 0x73, 0x09, 0x46, 0x3d,
	0xf8, 0xaf, 0xc7, 0xa5, 0x48, 0x50, 0xed, 0x36, 0xe4, 0xd5, 0x08, 0x72, 0xa2, 0x49, 0x98, 0x92,
	0xc0, 0x1a, 0xf6, 0x6d, 0x42, 0x19, 0x48, 0x98, 0xb9, 0xa4, 0x42, 0x23, 0x03, 0x63, 0x6e, 0xe7,
	0xb0, 0xc3, 0x7a, 0x10, 0x9e, 0x6b, 0x96, 0x36, 0xdb, 0xcd, 0xa9, 0xd2, 0x45, 0xca, 0xef, 0x16,
	0x13, 0xa2, 0x99, 0x38, 0xf1, 0x43, 0x87, 0x50, 0x61, 0xbc, 0x9b, 0xe4, 0x9f, 0x17, 0x85, 0xa5,
	0x34, 0x0b, 0xe5, 0x22, 0x8d, 0xc3, 0x6a, 0xf9, 0x69, 0x98, 0x4a, 0x9d, 0x53, 0xa5, 0x3e, 0x08,
	0xf1, 0x38, 0xb1, 0x16, 0xe8, 0xd6, 0xaf, 0xf2, 0xa0, 0x3a, 0x94, 0xa8, 0x66, 0xf2, 0xc5, 0x26,
	0xd7, 0xaa, 0xa8, 0xb3, 0x4f, 0xe9, 0x11, 0x0e, 0x32, 0xbb, 0xfd, 0x29, 0x63, 0xf7, 0xa3, 0x04,
	0xe5, 0xa8, 0x2d, 0x32, 0xa0, 0x9a, 0xda, 0x3b, 0x6a, 0xaf, 0xab, 0x73, 0xce, 0x48, 0x38, 0xde,
	0x86, 0xca, 0x62, 0x9a, 0xb0, 0x9b, 0x5e, 0x38, 0xca, 0xd3, 0x66, 0x5c, 0x8c, 0x70, 0xb2, 0x15,
	0x77, 0xd9, 0x28, 0x99, 0xd3, 0x46, 0xa3, 0x95, 0xd5, 0x6c, 0x34, 0x5a, 0x1b, 0xbc, 0x03, 0xb5,
	0xe5, 0x95, 0xa0, 0xd3, 0xbc, 0x79, 0x64, 0xdd, 0x81, 0x70, 0xb6, 0x25, 0x3b, 0xb6, 0xbb, 0xba,
	0xfc, 0x9c, 0x88, 0xdc, 0x78, 0x22, 0x72, 0xdf, 0x13, 0x91, 0x7b, 0x9f, 0x8a, 0x85, 0xf1, 0x54,
	0x2c, 0x7c, 0x4d, 0xc5, 0xc2, 0xd3, 0x91, 0x69, 0x53, 0x2b, 0x1c, 0xc8, 0xba, 0xe7, 0x28, 0x14,
	0xbb, 0x06, 0x0e, 0x1c, 0xdb, 0xa5, 0x0a, 0xf1, 0x5d, 0xe5, 0x2d, 0x7a, 0x10, 0x14, 0x3a, 0xf2,
	0x31, 0x19, 0xfc, 0x8b, 0xde, 0x85, 0xde, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x8e, 0x82,
	0xe2, 0x5e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	ShowChannel(ctx context.Context, in *QueryShowChannelRequest, opts ...grpc.CallOption) (*QueryShowChannelResponse, error)
	ListChannels(ctx context.Context, in *QueryListChannelsRequest, opts ...grpc.CallOption) (*QueryListChannelsResponse, error)
	ListMessages(ctx context.Context, in *QueryListMessagesRequest, opts ...grpc.CallOption) (*QueryListMessagesResponse, error)
	SearchMessages(ctx context.Context, in *QuerySearchMessagesRequest, opts ...grpc.CallOption) (*QuerySearchMessagesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ShowChannel(ctx context.Context, in *QueryShowChannelRequest, opts ...grpc.CallOption) (*QueryShowChannelResponse, error) {
	out := new(QueryShowChannelResponse)
	err := c.cc.Invoke(ctx, "/spn.chat.v1beta1.Query/ShowChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListChannels(ctx context.Context, in *QueryListChannelsRequest, opts ...grpc.CallOption) (*QueryListChannelsResponse, error) {
	out := new(QueryListChannelsResponse)
	err := c.cc.Invoke(ctx, "/spn.chat.v1beta1.Query/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMessages(ctx context.Context, in *QueryListMessagesRequest, opts ...grpc.CallOption) (*QueryListMessagesResponse, error) {
	out := new(QueryListMessagesResponse)
	err := c.cc.Invoke(ctx, "/spn.chat.v1beta1.Query/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SearchMessages(ctx context.Context, in *QuerySearchMessagesRequest, opts ...grpc.CallOption) (*QuerySearchMessagesResponse, error) {
	out := new(QuerySearchMessagesResponse)
	err := c.cc.Invoke(ctx, "/spn.chat.v1beta1.Query/SearchMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	ShowChannel(context.Context, *QueryShowChannelRequest) (*QueryShowChannelResponse, error)
	ListChannels(context.Context, *QueryListChannelsRequest) (*QueryListChannelsResponse, error)
	ListMessages(context.Context, *QueryListMessagesRequest) (*QueryListMessagesResponse, error)
	SearchMessages(context.Context, *QuerySearchMessagesRequest) (*QuerySearchMessagesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ShowChannel(ctx context.Context, req *QueryShowChannelRequest) (*QueryShowChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowChannel not implemented")
}
func (*UnimplementedQueryServer) ListChannels(ctx context.Context, req *QueryListChannelsRequest) (*QueryListChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (*UnimplementedQueryServer) ListMessages(ctx context.Context, req *QueryListMessagesRequest) (*QueryListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (*UnimplementedQueryServer) SearchMessages(ctx context.Context, req *QuerySearchMessagesRequest) (*QuerySearchMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ShowChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spn.chat.v1beta1.Query/ShowChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowChannel(ctx, req.(*QueryShowChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spn.chat.v1beta1.Query/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListChannels(ctx, req.(*QueryListChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spn.chat.v1beta1.Query/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMessages(ctx, req.(*QueryListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spn.chat.v1beta1.Query/SearchMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SearchMessages(ctx, req.(*QuerySearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spn.chat.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowChannel",
			Handler:    _Query_ShowChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _Query_ListChannels_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _Query_ListMessages_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _Query_SearchMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/v1beta/querier.proto",
}

func (m *QueryShowChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListChannelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListChannelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListChannelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListChannelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListChannelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListChannelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListMessagesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListMessagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySearchMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySearchMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySearchMessagesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChannelId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySearchMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySearchMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySearchMessagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryShowChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	return n
}

func (m *QueryShowChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryListChannelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListChannelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryListMessagesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovQuerier(uint64(m.ChannelId))
	}
	return n
}

func (m *QueryListMessagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QuerySearchMessagesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovQuerier(uint64(m.ChannelId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QuerySearchMessagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryShowChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListChannelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListChannelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListChannelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListChannelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListChannelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListChannelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySearchMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySearchMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySearchMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySearchMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySearchMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySearchMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
